[{"object":"block","id":"35df9a90-52bb-4198-843b-0ecac9538b5a","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"この記事では、","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"この記事では、","href":null},{"type":"text","text":{"content":"RxJS","link":{"url":"https://rxjs.dev/"}},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"RxJS","href":"https://rxjs.dev/"},{"type":"text","text":{"content":" を使った Web Worker の抽象化を試みます。 なお、記事中で Web Worker あるいは Worker と言ったときに指すのは ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" を使った Web Worker の抽象化を試みます。 なお、記事中で Web Worker あるいは Worker と言ったときに指すのは ","href":null},{"type":"text","text":{"content":"new Worker()","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"new Worker()","href":null},{"type":"text","text":{"content":" で作成する Dedicated Worker のみで、Shared Worker や Service Worker などは対象外です。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" で作成する Dedicated Worker のみで、Shared Worker や Service Worker などは対象外です。","href":null}],"color":"default"}},{"object":"block","id":"7a1865e8-cbc1-4e68-a12f-befd42ea1145","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"heading_2","heading_2":{"rich_text":[{"type":"text","text":{"content":"なぜ Web Worker？","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"なぜ Web Worker？","href":null}],"is_toggleable":false,"color":"default"}},{"object":"block","id":"25ac6538-2318-432d-acba-06cbdebc1278","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"Web Worker を使うのに 2 つの目的があります。ひとつは off-the-main-thread とよく言われる、UI メインスレッドとは別の Worker スレッドで並行処理をおこなうことによるパフォーマンス改善です。 そしてもうひとつは、仕様がドラフト段階にある ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Web Worker を使うのに 2 つの目的があります。ひとつは off-the-main-thread とよく言われる、UI メインスレッドとは別の Worker スレッドで並行処理をおこなうことによるパフォーマンス改善です。 そしてもうひとつは、仕様がドラフト段階にある ","href":null},{"type":"text","text":{"content":"ES Modules の Worker 対応","link":null},"annotations":{"bold":true,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ES Modules の Worker 対応","href":null},{"type":"text","text":{"content":" を利用した ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" を利用した ","href":null},{"type":"text","text":{"content":"Module Worker","link":null},"annotations":{"bold":false,"italic":true,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Module Worker","href":null},{"type":"text","text":{"content":" によるコード分割です。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" によるコード分割です。","href":null}],"color":"default"}},{"object":"block","id":"f3b53e74-d2ac-4983-a087-4259761fbea4","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T01:38:00.000Z","last_edited_time":"2023-05-21T01:38:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"bookmark","bookmark":{"caption":[],"url":"https://html.spec.whatwg.org/multipage/workers.html#module-worker-example"}},{"object":"block","id":"a42eaad6-91b0-4c09-92c7-fc9f21406924","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"ES Modules の Worker 対応は、現在 Chromium ではフラグ付きでサポートされています。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ES Modules の Worker 対応は、現在 Chromium ではフラグ付きでサポートされています。","href":null}],"color":"default"}},{"object":"block","id":"0b426e98-8213-4857-bea3-5e789fe4d5c3","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T01:38:00.000Z","last_edited_time":"2023-05-21T01:38:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"bookmark","bookmark":{"caption":[],"url":"https://www.chromestatus.com/feature/5761300827209728"}},{"object":"block","id":"2c1c7bad-e651-4b3e-a4b8-ffeba2c957fe","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"Module Worker では次のようなコードで ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Module Worker では次のようなコードで ","href":null},{"type":"text","text":{"content":"type: 'module'","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"type: 'module'","href":null},{"type":"text","text":{"content":" を指定すると、コンストラクタに指定したパスを ES Module として読み込めます。 さらに Worker スクリプト内でも ES Module のコンテキストで他のモジュールを import/export 文を使えるようになります。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" を指定すると、コンストラクタに指定したパスを ES Module として読み込めます。 さらに Worker スクリプト内でも ES Module のコンテキストで他のモジュールを import/export 文を使えるようになります。","href":null}],"color":"default"}},{"object":"block","id":"5c9d16bd-b456-4443-b7e2-1701966b4409","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"code","code":{"caption":[],"rich_text":[{"type":"text","text":{"content":"const worker = new Worker(\"./worker.mjs\", { type: \"module\" });","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"const worker = new Worker(\"./worker.mjs\", { type: \"module\" });","href":null}],"language":"javascript"}},{"object":"block","id":"389875a6-5000-47a2-96d1-1574ea672a29","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"もちろん Chrome ですらまだ普通には使えない機能なので、今 Module Worker を使うためには小細工が必要です。 webpack を使っている場合は、Google の Chrome チームが開発している WorkerPlugin を使うのが便利です。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"もちろん Chrome ですらまだ普通には使えない機能なので、今 Module Worker を使うためには小細工が必要です。 webpack を使っている場合は、Google の Chrome チームが開発している WorkerPlugin を使うのが便利です。","href":null}],"color":"default"}},{"object":"block","id":"bb98c405-5ac1-476a-8e8e-cbaff23f4117","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T01:39:00.000Z","last_edited_time":"2023-08-16T08:36:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"480a5159-f46b-4a81-895c-9d56a207d9cc"},"has_children":false,"archived":false,"type":"link_preview","link_preview":{"url":"https://github.com/GoogleChromeLabs/worker-plugin"}},{"object":"block","id":"c769eb30-1b99-49fd-b57f-e43310f288f5","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"WorkerPlugin は ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"WorkerPlugin は ","href":null},{"type":"text","text":{"content":"type: 'module'","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"type: 'module'","href":null},{"type":"text","text":{"content":" オプションで Module Worker を作成しているコードを発見すると、 呼び出されているファイルを webpack の Code Splitting 機能で別バンドルに分割しながら、","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" オプションで Module Worker を作成しているコードを発見すると、 呼び出されているファイルを webpack の Code Splitting 機能で別バンドルに分割しながら、","href":null},{"type":"text","text":{"content":"type: 'module'","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"type: 'module'","href":null},{"type":"text","text":{"content":" オプションを除去してくれます。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" オプションを除去してくれます。","href":null}],"color":"default"}},{"object":"block","id":"4f6b27c0-8b16-4cf9-a429-23c0391f4215","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T01:39:00.000Z","last_edited_time":"2023-05-21T01:39:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"bookmark","bookmark":{"caption":[],"url":"https://webpack.js.org/guides/code-splitting"}},{"object":"block","id":"428a4bd8-7329-4ff5-b9ff-2e6c5009d2b7","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"つまり、このプラグインさえ入れておけば、ES Module ベースで書かれたファイルを Module Worker として呼び出し、webpack のビルド後には Worker ごとにバンドルが自動で分割されている、という状態になります。 多くの場合、Worker で実行したい処理というのはページの初期化時に必要なものではないでしょう。 たいていはユーザーインタラクションや何かのイベントを受けて実行される非同期的なジョブです。 そのような処理は遅延読み込みと Worker の両方と相性がよいので、Module Worker はページの初期読み込みに必要なバンドルサイズを少なくしながらメインスレッド の負荷も下げられるまさに一石二鳥です。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"つまり、このプラグインさえ入れておけば、ES Module ベースで書かれたファイルを Module Worker として呼び出し、webpack のビルド後には Worker ごとにバンドルが自動で分割されている、という状態になります。 多くの場合、Worker で実行したい処理というのはページの初期化時に必要なものではないでしょう。 たいていはユーザーインタラクションや何かのイベントを受けて実行される非同期的なジョブです。 そのような処理は遅延読み込みと Worker の両方と相性がよいので、Module Worker はページの初期読み込みに必要なバンドルサイズを少なくしながらメインスレッド の負荷も下げられるまさに一石二鳥です。","href":null}],"color":"default"}},{"object":"block","id":"fe67d8d4-d726-45e0-9f09-9c16a6826277","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"heading_2","heading_2":{"rich_text":[{"type":"text","text":{"content":"RxJS による抽象化","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"RxJS による抽象化","href":null}],"is_toggleable":false,"color":"default"}},{"object":"block","id":"28601904-ede5-4c36-81ae-0016130f3b78","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"Worker は postMessage/ommessage によって他のスレッドとコミュニケーションします。 このイベント駆動の仕組みは、RxJS の Subject モデルとよく似ています。 Worker そのものでは拡張性に乏しいですが、Subject で抽象化することで RxJS のオペレーターを使ったデータ加工や、RxJS と連携できる他の JavaScript ライブラリなどとのコミュニケーションも容易になります。 そして RxJS は元来が非同期処理を扱うためのものですから、そのイベントの由来が同じスレッドか Worker スレッドかは気にせず同じ非同期の枠で考えられます。 このことからも、Worker による別スレッドでの処理とそのイベント購読は RxJS でうまく抽象化できるのではないかと考えています。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Worker は postMessage/ommessage によって他のスレッドとコミュニケーションします。 このイベント駆動の仕組みは、RxJS の Subject モデルとよく似ています。 Worker そのものでは拡張性に乏しいですが、Subject で抽象化することで RxJS のオペレーターを使ったデータ加工や、RxJS と連携できる他の JavaScript ライブラリなどとのコミュニケーションも容易になります。 そして RxJS は元来が非同期処理を扱うためのものですから、そのイベントの由来が同じスレッドか Worker スレッドかは気にせず同じ非同期の枠で考えられます。 このことからも、Worker による別スレッドでの処理とそのイベント購読は RxJS でうまく抽象化できるのではないかと考えています。","href":null}],"color":"default"}},{"object":"block","id":"4063a187-5d01-4f79-9673-ffd376406486","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"image","image":{"caption":[],"type":"external","external":{"url":"https://cdn-ak.f.st-hatena.com/images/fotolife/l/lacolaco/20190326/20190326141608.png"}}},{"object":"block","id":"a37a3c7c-2663-4dde-8761-b4c5f222eabd","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"heading_3","heading_3":{"rich_text":[{"type":"text","text":{"content":"アプローチ 1. Worker as a Subject","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"アプローチ 1. Worker as a Subject","href":null}],"is_toggleable":false,"color":"default"}},{"object":"block","id":"2ddbf7f8-f5cd-4f47-a962-c517715ad7db","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"まずひとつめのアプローチとして、Worker そのものが Subject のインターフェースを備えるというアプローチを試みます。 これは Worker スレッドから送られてくるイベントをメインスレッドで購読する形です。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"まずひとつめのアプローチとして、Worker そのものが Subject のインターフェースを備えるというアプローチを試みます。 これは Worker スレッドから送られてくるイベントをメインスレッドで購読する形です。","href":null}],"color":"default"}},{"object":"block","id":"51df16f2-bf9b-4fc9-bc20-76b322897616","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"image","image":{"caption":[],"type":"external","external":{"url":"https://cdn-ak.f.st-hatena.com/images/fotolife/l/lacolaco/20190326/20190326142344.png"}}},{"object":"block","id":"34525dff-dddc-4445-8b60-bfac3ea688ec","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"次のコードは、Worker を隠蔽する ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"次のコードは、Worker を隠蔽する ","href":null},{"type":"text","text":{"content":"WorkerSubject","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"WorkerSubject","href":null},{"type":"text","text":{"content":" の実装例です。 ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" の実装例です。 ","href":null},{"type":"text","text":{"content":"WorkerSubject","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"WorkerSubject","href":null},{"type":"text","text":{"content":" は","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" は","href":null},{"type":"text","text":{"content":"next","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"next","href":null},{"type":"text","text":{"content":" メソッドで渡されたデータを Worker に postMessage し、 Worker の ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" メソッドで渡されたデータを Worker に postMessage し、 Worker の ","href":null},{"type":"text","text":{"content":"message","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"message","href":null},{"type":"text","text":{"content":" / ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" / ","href":null},{"type":"text","text":{"content":"error","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"error","href":null},{"type":"text","text":{"content":" イベントを内部の子 Subject で購読します。 ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" イベントを内部の子 Subject で購読します。 ","href":null},{"type":"text","text":{"content":"WorkerSubject","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"WorkerSubject","href":null},{"type":"text","text":{"content":" を購読する Subscriber は 内部の子 Subject を間接的に購読することになります。 これは実装の一例であって、もっと効率的な実装はあると思います。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" を購読する Subscriber は 内部の子 Subject を間接的に購読することになります。 これは実装の一例であって、もっと効率的な実装はあると思います。","href":null}],"color":"default"}},{"object":"block","id":"94492bd3-7bae-40a8-b235-5f0bb495debf","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"code","code":{"caption":[],"rich_text":[{"type":"text","text":{"content":"export class WorkerSubject<T> extends Subject<T> {\n  private inner = new ReplaySubject();\n  private sub = new Subscription();\n\n  constructor(public worker: Worker) {\n    super();\n    this.sub.add(\n      fromEvent<MessageEvent>(worker, \"message\").subscribe(ev =>\n        this.inner.next(ev.data)\n      )\n    );\n    this.sub.add(\n      fromEvent<ErrorEvent>(worker, \"error\").subscribe(ev =>\n        this.inner.error(ev.error)\n      )\n    );\n    this._subscribe = this.inner._subscribe.bind(this.inner);\n  }\n\n  next(value: T) {\n    this.worker.postMessage(value);\n  }\n\n  complete() {\n    this.sub.unsubscribe();\n    this.inner.complete();\n    super.complete();\n  }\n}","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"export class WorkerSubject<T> extends Subject<T> {\n  private inner = new ReplaySubject();\n  private sub = new Subscription();\n\n  constructor(public worker: Worker) {\n    super();\n    this.sub.add(\n      fromEvent<MessageEvent>(worker, \"message\").subscribe(ev =>\n        this.inner.next(ev.data)\n      )\n    );\n    this.sub.add(\n      fromEvent<ErrorEvent>(worker, \"error\").subscribe(ev =>\n        this.inner.error(ev.error)\n      )\n    );\n    this._subscribe = this.inner._subscribe.bind(this.inner);\n  }\n\n  next(value: T) {\n    this.worker.postMessage(value);\n  }\n\n  complete() {\n    this.sub.unsubscribe();\n    this.inner.complete();\n    super.complete();\n  }\n}","href":null}],"language":"typescript"}},{"object":"block","id":"5cb66ec2-33a2-47a6-bbc0-e808f1ccc86e","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"具体的な例として、Markdown 文字列を HTML 文字列に変換する処理を Worker スレッドで実行してみます。 まずは次のように ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"具体的な例として、Markdown 文字列を HTML 文字列に変換する処理を Worker スレッドで実行してみます。 まずは次のように ","href":null},{"type":"text","text":{"content":"./compile-markdown.ts","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"./compile-markdown.ts","href":null},{"type":"text","text":{"content":" を作成します。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" を作成します。","href":null}],"color":"default"}},{"object":"block","id":"3e85c43c-ac0b-4733-ba95-9d567703f746","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"Subject に隠蔽するためには、入力に対して出力を返す ping-pong 型の Worker であると好都合です（必ずしもそうでなくてもよいですが）。 ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Subject に隠蔽するためには、入力に対して出力を返す ping-pong 型の Worker であると好都合です（必ずしもそうでなくてもよいですが）。 ","href":null},{"type":"text","text":{"content":"onmessage","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"onmessage","href":null},{"type":"text","text":{"content":"で受け取った文字列を変換し、 ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"で受け取った文字列を変換し、 ","href":null},{"type":"text","text":{"content":"postMessage","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"postMessage","href":null},{"type":"text","text":{"content":" でレスポンスのイベントを発火しています。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" でレスポンスのイベントを発火しています。","href":null}],"color":"default"}},{"object":"block","id":"d656174a-705f-459c-a359-85ef00b10745","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"code","code":{"caption":[],"rich_text":[{"type":"text","text":{"content":"import * as marked from \"marked\";\n\nfunction compileMarkdown(markdownString: string) {\n  return new Promise<string>((resolve, reject) => {\n    marked(markdownString, {}, (err, result) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      return resolve(result);\n    });\n  });\n}\n\n// [tsconfig] lib: \"dom\" and \"webworker\" are exclutive.\nconst _self: Worker = self as any;\n\n_self.onmessage = ev => {\n  compileMarkdown(ev.data)\n    .then(result => {\n      _self.postMessage(result);\n    })\n    .catch(err => {\n      throw err;\n    });\n};","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"import * as marked from \"marked\";\n\nfunction compileMarkdown(markdownString: string) {\n  return new Promise<string>((resolve, reject) => {\n    marked(markdownString, {}, (err, result) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      return resolve(result);\n    });\n  });\n}\n\n// [tsconfig] lib: \"dom\" and \"webworker\" are exclutive.\nconst _self: Worker = self as any;\n\n_self.onmessage = ev => {\n  compileMarkdown(ev.data)\n    .then(result => {\n      _self.postMessage(result);\n    })\n    .catch(err => {\n      throw err;\n    });\n};","href":null}],"language":"typescript"}},{"object":"block","id":"4d1337b4-74d7-42cb-8e62-68c2c62bc650","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"const _self: Worker = self as any;","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"const _self: Worker = self as any;","href":null},{"type":"text","text":{"content":" は TypeScript のためのハックです。同じ tsconfig で ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" は TypeScript のためのハックです。同じ tsconfig で ","href":null},{"type":"text","text":{"content":"dom","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"dom","href":null},{"type":"text","text":{"content":" と ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" と ","href":null},{"type":"text","text":{"content":"webworker","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"webworker","href":null},{"type":"text","text":{"content":" の両方をターゲットとすることができない問題があるため、手動で ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" の両方をターゲットとすることができない問題があるため、手動で ","href":null},{"type":"text","text":{"content":"self","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"self","href":null},{"type":"text","text":{"content":" の型をグローバルの ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" の型をグローバルの ","href":null},{"type":"text","text":{"content":"Window","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"Window","href":null},{"type":"text","text":{"content":" 型ではなく ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" 型ではなく ","href":null},{"type":"text","text":{"content":"Worker","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"Worker","href":null},{"type":"text","text":{"content":" 型に補正しています。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" 型に補正しています。","href":null}],"color":"default"}},{"object":"block","id":"0ed552f5-d8e2-4047-8547-0c6cc11be9ee","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"あとは Module Worker を作って、 ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"あとは Module Worker を作って、 ","href":null},{"type":"text","text":{"content":"WorkerSubject","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"WorkerSubject","href":null},{"type":"text","text":{"content":" でラップすると使えるようになります。 Angular のコンポーネントで使うと、次のようなコードになります。 結果としてこのコンポーネントのテンプレートには ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" でラップすると使えるようになります。 Angular のコンポーネントで使うと、次のようなコードになります。 結果としてこのコンポーネントのテンプレートには ","href":null},{"type":"text","text":{"content":"## foo","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"## foo","href":null},{"type":"text","text":{"content":" が ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" が ","href":null},{"type":"text","text":{"content":"<h2>foo</h2>","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"<h2>foo</h2>","href":null},{"type":"text","text":{"content":" に変換された HTML 文字列が表示されます。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" に変換された HTML 文字列が表示されます。","href":null}],"color":"default"}},{"object":"block","id":"129b7d38-e86f-4f65-8e6d-6ed62193e703","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"code","code":{"caption":[],"rich_text":[{"type":"text","text":{"content":"@Component({\n  selector: \"app-root\",\n  template: `\n    <div>{{ compiled$ | async }}</div>\n  `\n})\nexport class AppComponent implements OnInit {\n  compiled$: Subject<string>;\n\n  constructor() {\n    // Module Workerの作成とWorkerSubjectでのラップ\n    this.compiled$ = new WorkerSubject(\n      new Worker(\"./compile-markdown\", { type: \"module\" })\n    );\n  }\n\n  ngOnInit() {\n    // WorkerSubjectに新しいデータを送る\n    this.compiled$.next(\"## foo\");\n  }\n}","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"@Component({\n  selector: \"app-root\",\n  template: `\n    <div>{{ compiled$ | async }}</div>\n  `\n})\nexport class AppComponent implements OnInit {\n  compiled$: Subject<string>;\n\n  constructor() {\n    // Module Workerの作成とWorkerSubjectでのラップ\n    this.compiled$ = new WorkerSubject(\n      new Worker(\"./compile-markdown\", { type: \"module\" })\n    );\n  }\n\n  ngOnInit() {\n    // WorkerSubjectに新しいデータを送る\n    this.compiled$.next(\"## foo\");\n  }\n}","href":null}],"language":"typescript"}},{"object":"block","id":"0add863e-a96a-4ca4-9006-d6bb1474a11f","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"このアプローチのメリットは次のものが考えられます。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"このアプローチのメリットは次のものが考えられます。","href":null}],"color":"default"}},{"object":"block","id":"004f0a77-d2a7-469c-8b78-babe4622a9db","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"bulleted_list_item","bulleted_list_item":{"rich_text":[{"type":"text","text":{"content":"Worker の実装に制約がなく、既存の Worker はほとんど適用可能である","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Worker の実装に制約がなく、既存の Worker はほとんど適用可能である","href":null}],"color":"default"}},{"object":"block","id":"461cfb8f-a011-40cc-af40-865d1fcf1d70","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"bulleted_list_item","bulleted_list_item":{"rich_text":[{"type":"text","text":{"content":"Module Worker がコード分割する境界としてわかりやすく、ES Module をそのまま Worker 化できるのが簡単","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Module Worker がコード分割する境界としてわかりやすく、ES Module をそのまま Worker 化できるのが簡単","href":null}],"color":"default"}},{"object":"block","id":"69e75b86-b60c-4077-96c3-a01024a04abc","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"bulleted_list_item","bulleted_list_item":{"rich_text":[{"type":"text","text":{"content":"もともと next/subscribe で Write と Read が非同期的であることから、その内部が Worker を経由していても利用側に影響しない","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"もともと next/subscribe で Write と Read が非同期的であることから、その内部が Worker を経由していても利用側に影響しない","href":null}],"color":"default"}},{"object":"block","id":"2b3c9edb-e289-4f6a-b6ff-36fa54c52be6","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"一方で、Worker 側の実装では postMessage/onmessage を隠蔽できていないという課題もまだあります。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"一方で、Worker 側の実装では postMessage/onmessage を隠蔽できていないという課題もまだあります。","href":null}],"color":"default"}},{"object":"block","id":"10630cfa-0c63-4711-99aa-7f620428f346","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"heading_3","heading_3":{"rich_text":[{"type":"text","text":{"content":"アプローチ 2. Worker as an Operator","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"アプローチ 2. Worker as an Operator","href":null}],"is_toggleable":false,"color":"default"}},{"object":"block","id":"38973ab6-95b0-406b-941e-0a31c31e54a1","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"もうひとつのアプローチは、Observable に適用するオペレーターの処理を Worker スレッドに委譲するものです。 Observable の実体や購読者はメインスレッドにあるまま、データ処理の一部分だけの並行性を高められます。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"もうひとつのアプローチは、Observable に適用するオペレーターの処理を Worker スレッドに委譲するものです。 Observable の実体や購読者はメインスレッドにあるまま、データ処理の一部分だけの並行性を高められます。","href":null}],"color":"default"}},{"object":"block","id":"a1e63a2e-74e7-4400-9bfa-5382e98e56cc","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"image","image":{"caption":[],"type":"external","external":{"url":"https://cdn-ak.f.st-hatena.com/images/fotolife/l/lacolaco/20190326/20190326150102.png"}}},{"object":"block","id":"a96a1954-7cb0-4ec6-87f9-6f23bf381343","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"このアプローチの実装は Worker を関数のように扱うため、Module Worker よりも greenlet によるインライン Worker 化のほうが向いています。 インライン Worker とは、 Data URI を使って作成される Worker のことを指しています。 greenlet は、Promise を返す非同期関数を実行時にインライン Worker に変換して Worker スレッドで実行するライブラリです。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"このアプローチの実装は Worker を関数のように扱うため、Module Worker よりも greenlet によるインライン Worker 化のほうが向いています。 インライン Worker とは、 Data URI を使って作成される Worker のことを指しています。 greenlet は、Promise を返す非同期関数を実行時にインライン Worker に変換して Worker スレッドで実行するライブラリです。","href":null}],"color":"default"}},{"object":"block","id":"912bb2ea-1c61-43c9-8765-671ceffd0b64","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T01:39:00.000Z","last_edited_time":"2023-08-30T03:25:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"480a5159-f46b-4a81-895c-9d56a207d9cc"},"has_children":false,"archived":false,"type":"link_preview","link_preview":{"url":"https://github.com/developit/greenlet"}},{"object":"block","id":"8a2f1fc8-981c-4bee-8065-f632fd7dbe6f","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"RxJS のオペレーターで、関数を渡して処理をおこなう代表的なものは ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"RxJS のオペレーターで、関数を渡して処理をおこなう代表的なものは ","href":null},{"type":"text","text":{"content":"map","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"map","href":null},{"type":"text","text":{"content":" 系のものでしょう。 どのオペレーターにも適用できますが、ここでは ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" 系のものでしょう。 どのオペレーターにも適用できますが、ここでは ","href":null},{"type":"text","text":{"content":"map","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"map","href":null},{"type":"text","text":{"content":" オペレーターを Worker 化した ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" オペレーターを Worker 化した ","href":null},{"type":"text","text":{"content":"mapOnWorker","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"mapOnWorker","href":null},{"type":"text","text":{"content":" オペレーターを実装してみます。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" オペレーターを実装してみます。","href":null}],"color":"default"}},{"object":"block","id":"fb3ff9a3-7315-4d5f-9913-3d200d826e21","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"RxJS のオペレーターの実体は Observable を受け取って Observable を返す関数です。 ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"RxJS のオペレーターの実体は Observable を受け取って Observable を返す関数です。 ","href":null},{"type":"text","text":{"content":"mapOnWorker","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"mapOnWorker","href":null},{"type":"text","text":{"content":" は次のように簡単に実装できます。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" は次のように簡単に実装できます。","href":null}],"color":"default"}},{"object":"block","id":"5e6bd64e-1a26-4600-95e1-1d70a8a5bc58","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"code","code":{"caption":[],"rich_text":[{"type":"text","text":{"content":"import gleenlet from \"greenlet\";\nimport { from, Observable } from \"rxjs\";\nimport { concatMap } from \"rxjs/operators\";\n\nexport function mapOnWorker<T, U>(fn: (arg: T) => Promise<U>) {\n  // 関数をインラインWorker化する\n  const workerized = gleenlet(fn);\n  return (source: Observable<T>): Observable<U> => {\n    // 1. `workerized`関数を呼び出す\n    // 2. 戻り値のPromiseを `from` 関数でObservableに変換する\n    // 3. `concatMap` オペレーターで元のObservableと結合する\n    return source.pipe(concatMap(v => from(workerized(v))));\n  };\n}","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"import gleenlet from \"greenlet\";\nimport { from, Observable } from \"rxjs\";\nimport { concatMap } from \"rxjs/operators\";\n\nexport function mapOnWorker<T, U>(fn: (arg: T) => Promise<U>) {\n  // 関数をインラインWorker化する\n  const workerized = gleenlet(fn);\n  return (source: Observable<T>): Observable<U> => {\n    // 1. `workerized`関数を呼び出す\n    // 2. 戻り値のPromiseを `from` 関数でObservableに変換する\n    // 3. `concatMap` オペレーターで元のObservableと結合する\n    return source.pipe(concatMap(v => from(workerized(v))));\n  };\n}","href":null}],"language":"typescript"}},{"object":"block","id":"8ba730b1-1a74-41f3-a4e5-d98a63e744ca","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"map","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"map","href":null},{"type":"text","text":{"content":" オペレーターと同じように順序を守るために ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" オペレーターと同じように順序を守るために ","href":null},{"type":"text","text":{"content":"concatMap","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"concatMap","href":null},{"type":"text","text":{"content":" を使いましたが、","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" を使いましたが、","href":null},{"type":"text","text":{"content":"mergeMap","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"mergeMap","href":null},{"type":"text","text":{"content":" や ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" や ","href":null},{"type":"text","text":{"content":"switchMap","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"switchMap","href":null},{"type":"text","text":{"content":" のようなオペレーターを使うものも簡単に作れます。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" のようなオペレーターを使うものも簡単に作れます。","href":null}],"color":"default"}},{"object":"block","id":"44d02151-af11-4017-aaa1-cd2f8b627c45","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"code","code":{"caption":[],"rich_text":[{"type":"text","text":{"content":"export const mapOnWorker = concatMapOnWorker;\n\nexport function concatMapOnWorker<T, U>(fn: (arg: T) => Promise<U>) {\n  const workerized = gleenlet(fn);\n  return (source: Observable<T>): Observable<U> => {\n    return source.pipe(concatMap(v => from(workerized(v))));\n  };\n}\n\nexport function switchMapOnWorker<T, U>(fn: (arg: T) => Promise<U>) {\n  const workerized = gleenlet(fn);\n  return (source: Observable<T>): Observable<U> => {\n    return source.pipe(switchMap(v => from(workerized(v))));\n  };\n}\n\nexport function exhaustMapOnWorker<T, U>(fn: (arg: T) => Promise<U>) {\n  const workerized = gleenlet(fn);\n  return (source: Observable<T>): Observable<U> => {\n    return source.pipe(exhaustMap(v => from(workerized(v))));\n  };\n}","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"export const mapOnWorker = concatMapOnWorker;\n\nexport function concatMapOnWorker<T, U>(fn: (arg: T) => Promise<U>) {\n  const workerized = gleenlet(fn);\n  return (source: Observable<T>): Observable<U> => {\n    return source.pipe(concatMap(v => from(workerized(v))));\n  };\n}\n\nexport function switchMapOnWorker<T, U>(fn: (arg: T) => Promise<U>) {\n  const workerized = gleenlet(fn);\n  return (source: Observable<T>): Observable<U> => {\n    return source.pipe(switchMap(v => from(workerized(v))));\n  };\n}\n\nexport function exhaustMapOnWorker<T, U>(fn: (arg: T) => Promise<U>) {\n  const workerized = gleenlet(fn);\n  return (source: Observable<T>): Observable<U> => {\n    return source.pipe(exhaustMap(v => from(workerized(v))));\n  };\n}","href":null}],"language":"typescript"}},{"object":"block","id":"d1053730-346e-40b5-98b7-92f665b6b879","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"Worker への関心はオペレーターの内部に完全に閉じているので、オペレーターの利用側は他のオペレーターと同じようにただ ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Worker への関心はオペレーターの内部に完全に閉じているので、オペレーターの利用側は他のオペレーターと同じようにただ ","href":null},{"type":"text","text":{"content":"pipe","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"pipe","href":null},{"type":"text","text":{"content":" メソッドに渡すだけです。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" メソッドに渡すだけです。","href":null}],"color":"default"}},{"object":"block","id":"275ac1aa-acee-43b2-84a8-e13660cf0ed1","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"code","code":{"caption":[],"rich_text":[{"type":"text","text":{"content":"import { interval, Observable } from \"rxjs\";\nimport { mapOnWorker } from \"../lib/mapOnWorker\";\n\n@Component({\n  selector: \"app-root\",\n  template: `\n    <div>{{ calculated$ | async }}</div>\n  `\n})\nexport class AppComponent implements OnInit {\n  calculated$: Observable<any>;\n\n  constructor() {\n    // 1msごとに発火するObservable\n    this.calculated$ = interval(1).pipe(\n      // Workerで計算処理を実行する\n      mapOnWorker(async i => Math.sqrt(i))\n    );\n  }\n}","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"import { interval, Observable } from \"rxjs\";\nimport { mapOnWorker } from \"../lib/mapOnWorker\";\n\n@Component({\n  selector: \"app-root\",\n  template: `\n    <div>{{ calculated$ | async }}</div>\n  `\n})\nexport class AppComponent implements OnInit {\n  calculated$: Observable<any>;\n\n  constructor() {\n    // 1msごとに発火するObservable\n    this.calculated$ = interval(1).pipe(\n      // Workerで計算処理を実行する\n      mapOnWorker(async i => Math.sqrt(i))\n    );\n  }\n}","href":null}],"language":"typescript"}},{"object":"block","id":"313109b4-aef0-40ce-96cb-a64966be22fd","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"このアプローチのメリットは、オペレーター利用側にまったく関心を漏らさずに CPU 負荷の大きいオペレーター処理を Worker スレッドに逃がせるところです。 上記の例では非同期化するまでもない処理ですが、文字列の全文検索だったりパターンマッチだったり、メインスレッドをブロックしうる計算処理が Observable のオペレーターにあるときには有効です。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"このアプローチのメリットは、オペレーター利用側にまったく関心を漏らさずに CPU 負荷の大きいオペレーター処理を Worker スレッドに逃がせるところです。 上記の例では非同期化するまでもない処理ですが、文字列の全文検索だったりパターンマッチだったり、メインスレッドをブロックしうる計算処理が Observable のオペレーターにあるときには有効です。","href":null}],"color":"default"}},{"object":"block","id":"e54638f8-2675-4f97-a73c-4c44ed5ab724","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"デメリットはオペレーターの呼び出しのたびにかかるインライン Worker とのコミュニケーションのコストです。 Worker スレッドで実行する処理があまり時間のかからないものであれば、オーバーヘッドが相対的に高く付くこともあるかもしれません。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"デメリットはオペレーターの呼び出しのたびにかかるインライン Worker とのコミュニケーションのコストです。 Worker スレッドで実行する処理があまり時間のかからないものであれば、オーバーヘッドが相対的に高く付くこともあるかもしれません。","href":null}],"color":"default"}},{"object":"block","id":"51cd8865-3742-4add-a39b-fecc77d4cf5c","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"heading_2","heading_2":{"rich_text":[{"type":"text","text":{"content":"まとめ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"まとめ","href":null}],"is_toggleable":false,"color":"default"}},{"object":"block","id":"65476b99-499e-4420-acf7-05e0991225c1","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"この記事では Web Worker を意識せずに Web Worker の恩恵を受けられるように RxJS を使って抽象化するアプローチを紹介しました。 Promise を使ってクラスや関数を Worker 化するアプローチは Google Chrome チームの Comlink や Cloony がとてもクールです。 しかし複数回発行するイベントを扱うにはどうしても Observable のようなモデルが必要だと思います。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"この記事では Web Worker を意識せずに Web Worker の恩恵を受けられるように RxJS を使って抽象化するアプローチを紹介しました。 Promise を使ってクラスや関数を Worker 化するアプローチは Google Chrome チームの Comlink や Cloony がとてもクールです。 しかし複数回発行するイベントを扱うにはどうしても Observable のようなモデルが必要だと思います。","href":null}],"color":"default"}},{"object":"block","id":"eefae224-f73a-4765-afa8-8e4d43e4e990","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T01:39:00.000Z","last_edited_time":"2023-08-30T18:37:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"480a5159-f46b-4a81-895c-9d56a207d9cc"},"has_children":false,"archived":false,"type":"link_preview","link_preview":{"url":"https://github.com/GoogleChromeLabs/comlink"}},{"object":"block","id":"14653e2d-b1b7-4c4b-809b-2870c9b138c6","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T01:39:00.000Z","last_edited_time":"2023-08-08T11:58:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"480a5159-f46b-4a81-895c-9d56a207d9cc"},"has_children":false,"archived":false,"type":"link_preview","link_preview":{"url":"https://github.com/GoogleChromeLabs/clooney"}},{"object":"block","id":"492d8174-19da-4b67-ae42-962a443c4837","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T00:22:00.000Z","last_edited_time":"2023-05-21T00:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"サンプルコードは GitHub 上で公開しています。 コード例はどれも完璧である保証はなく、もっと効率的な実装があるかもしれませんので、ご利用は自由ですが自己責任でよろしくおねがいします。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"サンプルコードは GitHub 上で公開しています。 コード例はどれも完璧である保証はなく、もっと効率的な実装があるかもしれませんので、ご利用は自由ですが自己責任でよろしくおねがいします。","href":null}],"color":"default"}},{"object":"block","id":"a888c293-0e27-40fe-9dcd-c9c827f3ddf1","parent":{"type":"page_id","page_id":"9e5898a6-59e0-4315-9846-fe94baa9a101"},"created_time":"2023-05-21T01:39:00.000Z","last_edited_time":"2023-05-21T01:39:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"480a5159-f46b-4a81-895c-9d56a207d9cc"},"has_children":false,"archived":false,"type":"link_preview","link_preview":{"url":"https://github.com/lacolaco/rxjs-worker-sandbox"}}]