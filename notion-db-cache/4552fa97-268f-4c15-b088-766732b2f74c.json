[{"object":"block","id":"0ef04859-d9c6-4256-92d8-3c42566beab6","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:00:00.000Z","last_edited_time":"2023-03-01T08:00:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"アプリケーションの開発では「状態」という言葉がよく使われるが、「状態」とはなんだろうか。 「状態」は単なるデータと何が違い、なぜアプリケーション開発において重要なのだろうか。 本論では、主にWebアプリケーションの文脈をベースとしながら「状態」の本質を考える。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"アプリケーションの開発では「状態」という言葉がよく使われるが、「状態」とはなんだろうか。 「状態」は単なるデータと何が違い、なぜアプリケーション開発において重要なのだろうか。 本論では、主にWebアプリケーションの文脈をベースとしながら「状態」の本質を考える。","href":null}],"color":"default"}},{"object":"block","id":"c4d38516-33bd-44bd-9cae-744cf1551e93","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:00:00.000Z","last_edited_time":"2023-03-01T08:27:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"heading_2","heading_2":{"rich_text":[{"type":"text","text":{"content":"状態 (state) とはなにか","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"状態 (state) とはなにか","href":null}],"is_toggleable":false,"color":"default"}},{"object":"block","id":"92648bfa-3a90-4f91-8487-ca5364897d20","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:02:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"状態というものを考えるにあたって、アプリケーションそのものを再考しよう。\nユーザーのアクションに対して、アプリケーションは何かしらの振る舞い(behavior)を見せる。言い換えると、振る舞いはアクションがアプリケーションに作用した結果である。アプリケーションを関数 ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"状態というものを考えるにあたって、アプリケーションそのものを再考しよう。\nユーザーのアクションに対して、アプリケーションは何かしらの振る舞い(behavior)を見せる。言い換えると、振る舞いはアクションがアプリケーションに作用した結果である。アプリケーションを関数 ","href":null},{"type":"equation","equation":{"expression":"f"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"f","href":null},{"type":"text","text":{"content":" と置くと、次のような式になるだろうか。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" と置くと、次のような式になるだろうか。","href":null}],"color":"default"}},{"object":"block","id":"7da45fa8-a66b-4c21-a651-a0f0dd1f6a44","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:27:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"equation","equation":{"expression":"f(\\text{Action}) = \\text{Behavior}"}},{"object":"block","id":"8658ae3c-5658-4cb1-9a56-4d00368c0022","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:01:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"しかし ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"しかし ","href":null},{"type":"text","text":{"content":"echo","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"echo","href":null},{"type":"text","text":{"content":" のような単純なコマンドラインツールならまだしも、一般的なアプリケーションにおいてはこの式は成り立たない。簡単なカウンターアプリを想像してみても、カウントアップするという同じアクションの結果として表示される数は 1, 2, 3 と変わっていく。\nつまり、アプリケーションの振る舞いの決定にはアクションとは別の要因が存在する。ならばその要因を新たな変数として捉える必要がある。これがアプリケーションの ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" のような単純なコマンドラインツールならまだしも、一般的なアプリケーションにおいてはこの式は成り立たない。簡単なカウンターアプリを想像してみても、カウントアップするという同じアクションの結果として表示される数は 1, 2, 3 と変わっていく。\nつまり、アプリケーションの振る舞いの決定にはアクションとは別の要因が存在する。ならばその要因を新たな変数として捉える必要がある。これがアプリケーションの ","href":null},{"type":"text","text":{"content":"「状態 (state)」","link":null},"annotations":{"bold":true,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"「状態 (state)」","href":null},{"type":"text","text":{"content":" と呼ばれるものだ。同じアクションに対して結果が変わりうるアプリケーションはかならずその内部に状態を持っている。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" と呼ばれるものだ。同じアクションに対して結果が変わりうるアプリケーションはかならずその内部に状態を持っている。","href":null}],"color":"default"}},{"object":"block","id":"8fd429d1-9960-4258-b9b9-ad298a47e8c1","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:27:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"equation","equation":{"expression":"f(\\text{Action}, \\text{State}) = \\text{Behavior}"}},{"object":"block","id":"c893e2be-476c-4e5d-aef1-a82cb9163a10","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:04:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"しかしこの式もまだ不完全である。アクションは多くの場合、アプリケーションの状態を変化させる。カウンターアプリではカウントアップというアクションは保持する数値の状態を変化させる。そしてアクションによって変更された状態は、次のアクションに対する振る舞いを変化させる。つまり、アクションと振る舞い、状態との関係は次のような式で表現できる。アプリケーションは関数 ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"しかしこの式もまだ不完全である。アクションは多くの場合、アプリケーションの状態を変化させる。カウンターアプリではカウントアップというアクションは保持する数値の状態を変化させる。そしてアクションによって変更された状態は、次のアクションに対する振る舞いを変化させる。つまり、アクションと振る舞い、状態との関係は次のような式で表現できる。アプリケーションは関数 ","href":null},{"type":"equation","equation":{"expression":"f"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"f","href":null},{"type":"text","text":{"content":" と ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" と ","href":null},{"type":"equation","equation":{"expression":"g"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"g","href":null},{"type":"text","text":{"content":" が合成して成り立っている。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" が合成して成り立っている。","href":null}],"color":"default"}},{"object":"block","id":"ac9fd3f8-6e3a-45e0-ab6d-c6eca9cfd242","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T09:38:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"equation","equation":{"expression":"\\begin{aligned}\n  \\text{State}_{i} &= g(\\text{Action}_i, \\text{State}_{i-1})\\cr\n  \\text{Behavior}_{i} &= f(\\text{Action}_i, \\text{State}_i)\n\\end{aligned}"}},{"object":"block","id":"75e583ed-0010-4f57-a901-d4a0bde6c364","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:01:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"ここから、アプリケーションの振る舞いはアクションと、その時点での状態によって決定することがわかる。\nしかし実際のプログラムの上での状態は単純な1つの変数であることはほとんどない。一般的にはクラスのフィールドや現在時刻、インメモリのデータなど、さまざまな状態の組み合わせとなる。そして「状態管理 (state management)」の責務は、どの状態がどのような形で保持され参照されるのかを管理することだ。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ここから、アプリケーションの振る舞いはアクションと、その時点での状態によって決定することがわかる。\nしかし実際のプログラムの上での状態は単純な1つの変数であることはほとんどない。一般的にはクラスのフィールドや現在時刻、インメモリのデータなど、さまざまな状態の組み合わせとなる。そして「状態管理 (state management)」の責務は、どの状態がどのような形で保持され参照されるのかを管理することだ。","href":null}],"color":"default"}},{"object":"block","id":"0fbeca9d-27c1-4af2-8382-38af079c1911","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"状態管理ライブラリの Reduxは 関数 ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"状態管理ライブラリの Reduxは 関数 ","href":null},{"type":"equation","equation":{"expression":"g"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"g","href":null},{"type":"text","text":{"content":" をJavaScriptの関数で表現する。Reduxではアプリケーションの状態を単一のJSONオブジェクトに集約し、アプリケーションの構造を単純化する。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" をJavaScriptの関数で表現する。Reduxではアプリケーションの状態を単一のJSONオブジェクトに集約し、アプリケーションの構造を単純化する。","href":null}],"color":"default"}},{"object":"block","id":"5bffabca-eb9f-41a2-bf71-2edac5ffbe84","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"code","code":{"caption":[],"rich_text":[{"type":"text","text":{"content":"function reducer(state: State, action: Action): State;\ncurrentState = actions.reduce((state, action) => reducer(state, action), initialState);","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"function reducer(state: State, action: Action): State;\ncurrentState = actions.reduce((state, action) => reducer(state, action), initialState);","href":null}],"language":"typescript"}},{"object":"block","id":"628e1352-c482-4759-ab3d-bf028ccb6e37","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"ちなみに、任意の時点の状態 ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ちなみに、任意の時点の状態 ","href":null},{"type":"equation","equation":{"expression":"\\text{State}_n"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"\\text{State}_n","href":null},{"type":"text","text":{"content":" は次のように変形できる。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" は次のように変形できる。","href":null}],"color":"default"}},{"object":"block","id":"e576ae13-a764-4a32-ac03-cbc62cee4ca6","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T09:37:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"equation","equation":{"expression":"\\begin{aligned}   \\text{State}_{n} &= g(\\text{Action}_n, \\text{State}_{n-1}) \\cr  \\text{State}_{n} &= g(\\text{Action}_n, g(\\text{Action}_{n-1}, \\text{State}_{n-2})) \\cr  \\text{State}_{n} &= g(\\text{Action}_n, g(\\text{Action}_{n-1}, g(\\text{Action}_{n-2}, \\text{State}_{n-3}))) \\cr  ...\\cr  \\text{State}_{n} &= g(\\text{Action}_n, g(\\text{Action}_{n-1}, g(\\text{Action}_{n-2}, ..., g(\\text{Action}_{1}, \\text{State}_0))))\\end{aligned} "}},{"object":"block","id":"8c375f17-62b7-4932-ab01-e0882068bc94","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"つまり現在の状態は、初期状態と開始からの今までのアクションの列によって決定される。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"つまり現在の状態は、初期状態と開始からの今までのアクションの列によって決定される。","href":null}],"color":"default"}},{"object":"block","id":"938784b2-4718-4b81-ba71-5496c84d42ab","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"heading_3","heading_3":{"rich_text":[{"type":"text","text":{"content":"宣言的UI","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"宣言的UI","href":null}],"is_toggleable":false,"color":"default"}},{"object":"block","id":"40a978e5-4840-4ec7-a503-ee5c479db325","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:07:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"さて、ここからは特にGUIアプリケーションに注目する。昨今のGUIアプリケーションの設計のメインストリームには関数型プログラミングのパラダイムが強く影響している。その中でも中心にあるのが、 ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"さて、ここからは特にGUIアプリケーションに注目する。昨今のGUIアプリケーションの設計のメインストリームには関数型プログラミングのパラダイムが強く影響している。その中でも中心にあるのが、 ","href":null},{"type":"equation","equation":{"expression":"f(\\text{State}) = \\text{UI}"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"f(\\text{State}) = \\text{UI}","href":null},{"type":"text","text":{"content":" の考え方だ。この考えに沿ったUI構築の設計は「宣言的UI」とも呼ばれる。利点はいくつかあるが、代表的なものは以下のものだ。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" の考え方だ。この考えに沿ったUI構築の設計は「宣言的UI」とも呼ばれる。利点はいくつかあるが、代表的なものは以下のものだ。","href":null}],"color":"default"}},{"object":"block","id":"b5072a12-597f-4abe-9c8e-d553a222ee9c","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"numbered_list_item","numbered_list_item":{"rich_text":[{"type":"text","text":{"content":"再現性: 同一の状態を与えれば同一のUIを再現できる（デバッグしやすい）","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"再現性: 同一の状態を与えれば同一のUIを再現できる（デバッグしやすい）","href":null}],"color":"default"}},{"object":"block","id":"6885c565-04a7-4816-b8c6-2533f41aa5db","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"numbered_list_item","numbered_list_item":{"rich_text":[{"type":"text","text":{"content":"再利用性: 関数自身は状態を持たないため、別の関数との合成や再利用などが容易である","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"再利用性: 関数自身は状態を持たないため、別の関数との合成や再利用などが容易である","href":null}],"color":"default"}},{"object":"block","id":"8df7d1ca-047c-42b9-984e-593cb2b49119","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:08:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"equation","equation":{"expression":"f(\\text{State}) = \\text{UI}"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"f(\\text{State}) = \\text{UI}","href":null},{"type":"text","text":{"content":" とは、UIの出力が現在のアプリケーションの状態にのみ依存するということだ。この関係を先ほどの式に加えてみよう。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" とは、UIの出力が現在のアプリケーションの状態にのみ依存するということだ。この関係を先ほどの式に加えてみよう。","href":null}],"color":"default"}},{"object":"block","id":"67be24c5-dccf-4669-99bb-70ecf3a86653","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:12:00.000Z","last_edited_time":"2023-03-01T09:37:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"equation","equation":{"expression":"\\begin{aligned}  \\text{State}_{i} &= f_{\\text{State}}(\\text{Action}_i, \\text{State}_{i-1})\\cr  \\text{Behavior}_{i} &= f_{\\text{Behavior}}(\\text{Action}_i, \\text{State}_i)\\cr  \\text{UI}_{i} &= f_{\\text{UI}}(\\text{State}_i)\\end{aligned}"}},{"object":"block","id":"e44eee30-7566-4d9a-9eee-f86966eaff01","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"ところでUIの出力は当然ながらアプリケーションの振る舞いのうちに含まれているはずだ。そこで振る舞いのうち UIの出力である部分と、そうでないものを次のように分ける。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ところでUIの出力は当然ながらアプリケーションの振る舞いのうちに含まれているはずだ。そこで振る舞いのうち UIの出力である部分と、そうでないものを次のように分ける。","href":null}],"color":"default"}},{"object":"block","id":"74c423c6-5ebb-4707-bf78-0e74f1735d8a","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:12:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"equation","equation":{"expression":"\\text{Behavior} = \\text{UI} + \\text{Business}"}},{"object":"block","id":"a108ee86-6efc-4908-a87e-842e545eaa6f","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T09:37:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"そうすると振る舞いについての式は次のように変形できる。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"そうすると振る舞いについての式は次のように変形できる。","href":null},{"type":"equation","equation":{"expression":"f_{\\text{Behavior}}(\\text{Action}_i, \\text{State}_i) - f_{\\text{UI}}(\\text{State}_i)"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"f_{\\text{Behavior}}(\\text{Action}_i, \\text{State}_i) - f_{\\text{UI}}(\\text{State}_i)","href":null},{"type":"text","text":{"content":" は結局 ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" は結局 ","href":null},{"type":"equation","equation":{"expression":"\\text{Action}_i"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"\\text{Action}_i","href":null},{"type":"text","text":{"content":" と ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" と ","href":null},{"type":"equation","equation":{"expression":"\\text{State}_i"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"\\text{State}_i","href":null},{"type":"text","text":{"content":" を変数とする関数であるから、改めて ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" を変数とする関数であるから、改めて ","href":null},{"type":"equation","equation":{"expression":"f_{\\text{Business}}(\\text{Action}_i, \\text{State}_i)"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"f_{\\text{Business}}(\\text{Action}_i, \\text{State}_i)","href":null},{"type":"text","text":{"content":" と置くことができる。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" と置くことができる。","href":null}],"color":"default"}},{"object":"block","id":"544cb874-035d-45cc-8906-5e77cce06071","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:15:00.000Z","last_edited_time":"2023-03-01T08:16:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"equation","equation":{"expression":"\\begin{aligned}  f_{\\text{Behavior}}(\\text{Action}_i, \\text{State}_i) &= f_{\\text{UI}}(\\text{State}_i) + \\text{Business}_{i}\\cr  \\text{Business}_{i} &= f_{\\text{Behavior}}(\\text{Action}_i, \\text{State}_i) - f_{\\text{UI}}(\\text{State}_i)\\cr  &= f_{\\text{Business}}(\\text{Action}_i, \\text{State}_i)\\end{aligned}"}},{"object":"block","id":"f1fdd5d0-03ab-46c3-9621-4ccbdd788ffa","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"こうして、GUIアプリケーションの状態と振る舞いの関係を単純化した次の式が成り立つ。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"こうして、GUIアプリケーションの状態と振る舞いの関係を単純化した次の式が成り立つ。","href":null}],"color":"default"}},{"object":"block","id":"cc6dbf43-4d41-4f5a-a56c-1e2ecd03e274","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:17:00.000Z","last_edited_time":"2023-03-01T09:37:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"equation","equation":{"expression":"\\begin{aligned}  \\text{State}_{i} &= f_{\\text{State}}(\\text{Action}_i, \\text{State}_{i-1}) \\cr  \n\\text{Behavior}_{i} &= f_{\\text{UI}}(\\text{State}_i) + f_{\\text{Business}}(\\text{Action}_i, \\text{State}_i)\\end{aligned}"}},{"object":"block","id":"89a4328d-095a-4047-8f02-cd1874f9356f","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:17:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"Reactはこの式をそのままJavaScriptで表現できるライブラリであり、ひとつひとつのコンポーネントがこの ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Reactはこの式をそのままJavaScriptで表現できるライブラリであり、ひとつひとつのコンポーネントがこの ","href":null},{"type":"equation","equation":{"expression":"f_{\\text{UI}}"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"f_{\\text{UI}}","href":null},{"type":"text","text":{"content":" となるように設計されている。また、Angularでもコンポーネントクラスが公開する状態をテンプレートHTMLを通してUIに反映するため、テンプレートHTMLが ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" となるように設計されている。また、Angularでもコンポーネントクラスが公開する状態をテンプレートHTMLを通してUIに反映するため、テンプレートHTMLが ","href":null},{"type":"equation","equation":{"expression":"f_{\\text{UI}}"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"f_{\\text{UI}}","href":null},{"type":"text","text":{"content":" の役割をもつ。共通するのは、UIが「操作 (manipulate)」されるのではなく「描画 (render)」される、というアプリケーションの状態とUIの出力の関係である。状態が先にあり、その投影としてUIがあるという主従の関係が重要である。\n裏を返せば、ReactであろうとAngularであろうと、レンダリング後のDOMをアプリケーションが直接操作して値を書き換えた瞬間にこの関係は崩壊する。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" の役割をもつ。共通するのは、UIが「操作 (manipulate)」されるのではなく「描画 (render)」される、というアプリケーションの状態とUIの出力の関係である。状態が先にあり、その投影としてUIがあるという主従の関係が重要である。\n裏を返せば、ReactであろうとAngularであろうと、レンダリング後のDOMをアプリケーションが直接操作して値を書き換えた瞬間にこの関係は崩壊する。","href":null}],"color":"default"}},{"object":"block","id":"716a9b64-64f6-42a2-9d38-b77947adb60e","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"heading_3","heading_3":{"rich_text":[{"type":"text","text":{"content":"Reactive UI","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Reactive UI","href":null}],"is_toggleable":false,"color":"default"}},{"object":"block","id":"b97ad4ad-70d4-4f54-a000-a4792f4ad1b2","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:18:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"equation","equation":{"expression":"f_{\\text{UI}}(\\text{State})"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"f_{\\text{UI}}(\\text{State})","href":null},{"type":"text","text":{"content":" で問題となるのが、状態が変更されたタイミングでUIを再描画しなおす方法だ。 ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" で問題となるのが、状態が変更されたタイミングでUIを再描画しなおす方法だ。 ","href":null},{"type":"equation","equation":{"expression":"f_{\\text{Business}}(\\text{Action}, \\text{State})"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"f_{\\text{Business}}(\\text{Action}, \\text{State})","href":null},{"type":"text","text":{"content":" は何らかのアクションによってトリガーされるが、","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" は何らかのアクションによってトリガーされるが、","href":null},{"type":"equation","equation":{"expression":"f_{\\text{UI}}(\\text{State})"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"f_{\\text{UI}}(\\text{State})","href":null},{"type":"text","text":{"content":" は状態の変化をなんらかの方法で知る必要がある。\nつまり、状態が監視可能 (observable)であることが重要だ。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" は状態の変化をなんらかの方法で知る必要がある。\nつまり、状態が監視可能 (observable)であることが重要だ。","href":null}],"color":"default"}},{"object":"block","id":"7c23d2fb-8573-4b18-9bbd-8e53a7712aa0","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"Angularは、RxJSの ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Angularは、RxJSの ","href":null},{"type":"text","text":{"content":"Observable","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"Observable","href":null},{"type":"text","text":{"content":" として管理された状態をテンプレートHTMLに接続することによってリアクティブなUIを構築できる。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" として管理された状態をテンプレートHTMLに接続することによってリアクティブなUIを構築できる。","href":null}],"color":"default"}},{"object":"block","id":"d35a03c6-3616-4b65-84e4-7b6556d6fcce","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T09:37:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"code","code":{"caption":[],"rich_text":[{"type":"text","text":{"content":"<ng-container *ngIf=\"state$ | async as state\">\n  {{ state.count }}\n</ng-container>","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"<ng-container *ngIf=\"state$ | async as state\">\n  {{ state.count }}\n</ng-container>","href":null}],"language":"html"}},{"object":"block","id":"691a55a3-c21d-4a5e-8545-5e693262ac00","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:19:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"Observable#subscribe()","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"Observable#subscribe()","href":null},{"type":"text","text":{"content":" メソッドのコールバックでコンポーネントクラスのフィールドを更新するのは宣言的ではあるが、リアクティブではない。いったんコンポーネントクラスのフィールドを経由すると、そのUIはコンポーネントクラスの状態を投影したものになる。\nそしてアプリケーションの状態とコンポーネントクラスの状態を同期する責務はアプリケーション側に残される。\nこの部分にバグがあれば、アプリケーションの状態を変えてもUIに投影されず、 ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" メソッドのコールバックでコンポーネントクラスのフィールドを更新するのは宣言的ではあるが、リアクティブではない。いったんコンポーネントクラスのフィールドを経由すると、そのUIはコンポーネントクラスの状態を投影したものになる。\nそしてアプリケーションの状態とコンポーネントクラスの状態を同期する責務はアプリケーション側に残される。\nこの部分にバグがあれば、アプリケーションの状態を変えてもUIに投影されず、 ","href":null},{"type":"equation","equation":{"expression":"f_{\\text{UI}}(\\text{State})"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"f_{\\text{UI}}(\\text{State})","href":null},{"type":"text","text":{"content":" が機能していないことになる。リアクティブプログラミングの考え方は、宣言的UIを堅牢にする。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" が機能していないことになる。リアクティブプログラミングの考え方は、宣言的UIを堅牢にする。","href":null}],"color":"default"}},{"object":"block","id":"becadbdf-a7a3-4116-9026-f482f8633d99","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"heading_2","heading_2":{"rich_text":[{"type":"text","text":{"content":"状態と情報","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"状態と情報","href":null}],"is_toggleable":false,"color":"default"}},{"object":"block","id":"8b48fc6a-ffb1-47d6-9ac8-28fab77c28e9","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"ここまではアプリケーションの状態と振る舞いの関係についての話だった。ここからは状態そのものについて考える。\n状態とは何なのか、そのひとつの答えが先ほどの式である。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ここまではアプリケーションの状態と振る舞いの関係についての話だった。ここからは状態そのものについて考える。\n状態とは何なのか、そのひとつの答えが先ほどの式である。","href":null}],"color":"default"}},{"object":"block","id":"7c0b9dce-b1d6-437b-9bbf-edf51fa8c6b3","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:20:00.000Z","last_edited_time":"2023-03-01T08:20:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"equation","equation":{"expression":"\\text{Behavior}_{i} = f_{\\text{Behavior}}(\\text{Action}_i, \\text{State}_i)"}},{"object":"block","id":"6c18bc37-1d3d-475f-92a6-b96000ebd2f6","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"状態とは「振る舞いを決定する変数」、あるいは「振る舞いに影響を与える変数」である。どんなデータでも状態となるわけではなく、状態とそうでないデータの間には違いがある。この違いを、本論では「状態と情報の違い」として表現したい。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"状態とは「振る舞いを決定する変数」、あるいは「振る舞いに影響を与える変数」である。どんなデータでも状態となるわけではなく、状態とそうでないデータの間には違いがある。この違いを、本論では「状態と情報の違い」として表現したい。","href":null}],"color":"default"}},{"object":"block","id":"ffeb3064-d940-4912-9715-e46803dc5e62","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"「情報 (information)」は、アプリケーションの外から舞い込んでくるデータである。ユーザーが入力した住所、OSの現在時刻、Webアプリが実行されたURLなどさまざまあるが、すべての「情報」に共通するのはそれが外部からやってくるということだ。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"「情報 (information)」は、アプリケーションの外から舞い込んでくるデータである。ユーザーが入力した住所、OSの現在時刻、Webアプリが実行されたURLなどさまざまあるが、すべての「情報」に共通するのはそれが外部からやってくるということだ。","href":null}],"color":"default"}},{"object":"block","id":"f121953a-10c1-4d3a-a96f-a9dabf68bcec","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"「情報」それ自体には数値や文字列以上の意味はない。「情報」に意味を与えるのはアプリケーションだ。住所の文字列はアプリケーションが入力を受け取って初めて「住所」という意味を持つ。なぜなら、アプリケーションはその振る舞いを決定するために「住所」という変数が必要であるからだ。つまり、 ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"「情報」それ自体には数値や文字列以上の意味はない。「情報」に意味を与えるのはアプリケーションだ。住所の文字列はアプリケーションが入力を受け取って初めて「住所」という意味を持つ。なぜなら、アプリケーションはその振る舞いを決定するために「住所」という変数が必要であるからだ。つまり、 ","href":null},{"type":"text","text":{"content":"「情報」はアプリケーションの\"解釈\"によって「状態」になる。","link":null},"annotations":{"bold":true,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"「情報」はアプリケーションの\"解釈\"によって「状態」になる。","href":null}],"color":"default"}},{"object":"block","id":"8179709f-9238-46c6-9ed1-5e5bb24adbc2","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"この解釈の材料となるのはアプリケーションの裏にある ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"この解釈の材料となるのはアプリケーションの裏にある ","href":null},{"type":"text","text":{"content":"ユースケース","link":null},"annotations":{"bold":true,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ユースケース","href":null},{"type":"text","text":{"content":" だ。テキストボックスの入力イベントを、「住所が変更された」と解釈し、「住所の変更」アクションを発行するためには、ユースケースを深く知っている必要がある。\nつまり、","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" だ。テキストボックスの入力イベントを、「住所が変更された」と解釈し、「住所の変更」アクションを発行するためには、ユースケースを深く知っている必要がある。\nつまり、","href":null},{"type":"text","text":{"content":"状態はユースケースに依存するデータである","link":null},"annotations":{"bold":true,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"状態はユースケースに依存するデータである","href":null},{"type":"text","text":{"content":"とも言える。であるなら、","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"とも言える。であるなら、","href":null},{"type":"text","text":{"content":"情報はユースケースに依存しないデータ","link":null},"annotations":{"bold":true,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"情報はユースケースに依存しないデータ","href":null},{"type":"text","text":{"content":" だ。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" だ。","href":null}],"color":"default"}},{"object":"block","id":"56e5afb7-685d-474a-be70-b45779f9870f","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"heading_3","heading_3":{"rich_text":[{"type":"text","text":{"content":"例1. APIレスポンスと状態","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"例1. APIレスポンスと状態","href":null}],"is_toggleable":false,"color":"default"}},{"object":"block","id":"2ce474fe-8f0b-4ec7-a7f9-dd88625d7232","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"ドメイン駆動設計などの設計パターンでは、システムの中でユースケースに依存する部分としない部分の境界が重要になるが、状態はユースケースに依存するということを意識しておくことが必要だ。そして、「状態管理」と「情報の保持」を区別して考えることが重要だ。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ドメイン駆動設計などの設計パターンでは、システムの中でユースケースに依存する部分としない部分の境界が重要になるが、状態はユースケースに依存するということを意識しておくことが必要だ。そして、「状態管理」と「情報の保持」を区別して考えることが重要だ。","href":null}],"color":"default"}},{"object":"block","id":"fb0941c3-d58f-42f8-9d32-cd21fe0ce4f2","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"例えば、フロントエンドが「プロフィール表示」というユースケースの中で必要なユーザーデータをバックエンドに要求したとしよう。\nこのとき、バックエンドAPIがRESTfulであれば、そのレスポンスはユースケースに依存しない「情報」だ。この「情報」はどのように扱うべきだろうか？\nアプリケーションが求めているのは「プロフィール表示の対象ユーザー」だ。よってアプリケーションは「プロフィール表示の対象ユーザー」を状態として管理する必要がある。つまり、次のように状態を定義してアクションを発行する。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"例えば、フロントエンドが「プロフィール表示」というユースケースの中で必要なユーザーデータをバックエンドに要求したとしよう。\nこのとき、バックエンドAPIがRESTfulであれば、そのレスポンスはユースケースに依存しない「情報」だ。この「情報」はどのように扱うべきだろうか？\nアプリケーションが求めているのは「プロフィール表示の対象ユーザー」だ。よってアプリケーションは「プロフィール表示の対象ユーザー」を状態として管理する必要がある。つまり、次のように状態を定義してアクションを発行する。","href":null}],"color":"default"}},{"object":"block","id":"d6b516f7-a70f-4fc9-abe7-72ab31c2a42d","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:20:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"code","code":{"caption":[],"rich_text":[{"type":"text","text":{"content":"type State = {\n  profileView: {\n    user: User\n  }\n}\n\nbackendApi.getUser(userId).then(user => {\n  store.dispatch(ProfileViewActions.finishFetchingUser(user));\n});","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"type State = {\n  profileView: {\n    user: User\n  }\n}\n\nbackendApi.getUser(userId).then(user => {\n  store.dispatch(ProfileViewActions.finishFetchingUser(user));\n});","href":null}],"language":"typescript"}},{"object":"block","id":"e2bb2b1f-4ff1-4fdb-b5db-0bd7a69a72fb","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"次の例のように、データの型に合わせて保持するのは状態管理ではなく、情報の保持である。複数のユースケースで同じユーザーのデータを何度も取得したくないという要求は、ユースケースに依存しない層でバックエンドAPIのキャッシュなどで解決するものだ。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"次の例のように、データの型に合わせて保持するのは状態管理ではなく、情報の保持である。複数のユースケースで同じユーザーのデータを何度も取得したくないという要求は、ユースケースに依存しない層でバックエンドAPIのキャッシュなどで解決するものだ。","href":null}],"color":"default"}},{"object":"block","id":"dc8a7ae7-c741-4061-9dfd-f28e4dc26e85","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:20:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"code","code":{"caption":[],"rich_text":[{"type":"text","text":{"content":"type State = {\n  users: {\n    [id: string]: User\n  }\n}","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"type State = {\n  users: {\n    [id: string]: User\n  }\n}","href":null}],"language":"typescript"}},{"object":"block","id":"91078606-7d6a-4891-aff8-20885d8e8158","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"heading_3","heading_3":{"rich_text":[{"type":"text","text":{"content":"例2. URL変化と状態","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"例2. URL変化と状態","href":null}],"is_toggleable":false,"color":"default"}},{"object":"block","id":"618e1e1c-d92e-46d4-ae5b-f586f4b8484e","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"シングルページアプリケーションはURLに応じて振る舞いを変える。だとするとURLは「状態」だろうか？\n答えはNoだ。ブラウザのURLはアプリケーションの外から与えられる「情報」である。\nアプリケーションはURLを解釈し、パスやパラメータをアプリケーションが必要とする状態に変える責務を持つ。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"シングルページアプリケーションはURLに応じて振る舞いを変える。だとするとURLは「状態」だろうか？\n答えはNoだ。ブラウザのURLはアプリケーションの外から与えられる「情報」である。\nアプリケーションはURLを解釈し、パスやパラメータをアプリケーションが必要とする状態に変える責務を持つ。","href":null}],"color":"default"}},{"object":"block","id":"be160ab8-4a5e-428c-8aaa-f836d0e995a3","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"例えば、プロフィール画面が ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"例えば、プロフィール画面が ","href":null},{"type":"text","text":{"content":"/profile/:userId","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"/profile/:userId","href":null},{"type":"text","text":{"content":" のようなパスで表示されるシングルページアプリケーションであれば、次のように状態を定義し、URL中のパラメータの変更イベントを購読してアクションを発行することで状態を更新する。\nそうして更新された状態をもとにアプリケーションは振る舞いを決定できる。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" のようなパスで表示されるシングルページアプリケーションであれば、次のように状態を定義し、URL中のパラメータの変更イベントを購読してアクションを発行することで状態を更新する。\nそうして更新された状態をもとにアプリケーションは振る舞いを決定できる。","href":null}],"color":"default"}},{"object":"block","id":"ed67323d-6629-419e-9216-86c48ca0eaa6","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:21:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"code","code":{"caption":[],"rich_text":[{"type":"text","text":{"content":"type State = {\n  profileView: {\n    params: {\n      userId: string;\n    };\n    user: User\n  }\n}\n\nrouteParams.subscribe(routeParams => {\n  store.dispatch(ProfileViewActions.changeParams({userId: routeParams['userId']}))\n});\n\nstore.select(state => state.profileView.params).subscribe(params => {\n  backendApi.getUser(params.userId).then(user => {\n    store.dispatch(ProfileViewActions.finishFetchingUser(user));\n  });\n})","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"type State = {\n  profileView: {\n    params: {\n      userId: string;\n    };\n    user: User\n  }\n}\n\nrouteParams.subscribe(routeParams => {\n  store.dispatch(ProfileViewActions.changeParams({userId: routeParams['userId']}))\n});\n\nstore.select(state => state.profileView.params).subscribe(params => {\n  backendApi.getUser(params.userId).then(user => {\n    store.dispatch(ProfileViewActions.finishFetchingUser(user));\n  });\n})","href":null}],"language":"typescript"}},{"object":"block","id":"560b326e-b22f-4444-b3d8-f6c91e9f0227","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"heading_3","heading_3":{"rich_text":[{"type":"text","text":{"content":"例3. フォーム入力変化と状態","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"例3. フォーム入力変化と状態","href":null}],"is_toggleable":false,"color":"default"}},{"object":"block","id":"2331f730-1f19-4f68-84b8-60cfaedd010a","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"ユーザーがフォームに入力しているデータはまだ「情報」である。\nユーザーが送信ボタンを押したとき、あるいはバリデーション処理が実行されるとき、アプリケーションはその時点の入力内容を解釈し、状態を変化させる。\nパフォーマンスの面からみてもそうだが、情報と状態の違いの面から見ても、フォームの入力内容を状態としてそのまま同期することは望ましくない。送信やバリデーションといったそれぞれのユースケースにとって必要な状態だけが管理されるべきだろう。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"ユーザーがフォームに入力しているデータはまだ「情報」である。\nユーザーが送信ボタンを押したとき、あるいはバリデーション処理が実行されるとき、アプリケーションはその時点の入力内容を解釈し、状態を変化させる。\nパフォーマンスの面からみてもそうだが、情報と状態の違いの面から見ても、フォームの入力内容を状態としてそのまま同期することは望ましくない。送信やバリデーションといったそれぞれのユースケースにとって必要な状態だけが管理されるべきだろう。","href":null}],"color":"default"}},{"object":"block","id":"c45ce4d6-c7ba-44b6-b9b5-3b04fad3ed61","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"heading_2","heading_2":{"rich_text":[{"type":"text","text":{"content":"まとめ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"まとめ","href":null}],"is_toggleable":false,"color":"default"}},{"object":"block","id":"761cf184-e3b7-4606-841f-c6e3e2defe8e","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:21:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"アプリケーションを関数として単純化して捉えることで、アプリケーションの振る舞いは状態とアクションによって決定されることを定式化できた。状態管理は、状態をどのような形式で保持し、アプリケーションに適用するかという重要な責務をもつ。状態を持つ領域と持たない領域を明確に区別することが肝要だ。\n宣言的UI ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"アプリケーションを関数として単純化して捉えることで、アプリケーションの振る舞いは状態とアクションによって決定されることを定式化できた。状態管理は、状態をどのような形式で保持し、アプリケーションに適用するかという重要な責務をもつ。状態を持つ領域と持たない領域を明確に区別することが肝要だ。\n宣言的UI ","href":null},{"type":"equation","equation":{"expression":"f(\\text{State}) = \\text{UI}"},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"f(\\text{State}) = \\text{UI}","href":null},{"type":"text","text":{"content":" とリアクティブプログラミングの考え方は、振る舞いの決定を単純化、安定化するのに役立つ。予測可能性と再現可能性の高いアプリケーションはデバッグやメンテナンスが容易になる。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" とリアクティブプログラミングの考え方は、振る舞いの決定を単純化、安定化するのに役立つ。予測可能性と再現可能性の高いアプリケーションはデバッグやメンテナンスが容易になる。","href":null}],"color":"default"}},{"object":"block","id":"2465aa46-bee0-47de-82d1-8b0cb5a6b9f4","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"そして状態と情報の違いについては、そのデータがユースケースによる解釈を受けているかどうかが大きな違いであることに着目した。外部から与えられる「情報」をアプリケーションがユースケースに沿って解釈することで、振る舞いに影響を与える「状態」になる。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"そして状態と情報の違いについては、そのデータがユースケースによる解釈を受けているかどうかが大きな違いであることに着目した。外部から与えられる「情報」をアプリケーションがユースケースに沿って解釈することで、振る舞いに影響を与える「状態」になる。","href":null}],"color":"default"}},{"object":"block","id":"5e4e5002-8cf8-4b5c-ba80-2db987be2234","parent":{"type":"page_id","page_id":"4552fa97-268f-4c15-b088-766732b2f74c"},"created_time":"2023-03-01T08:01:00.000Z","last_edited_time":"2023-03-01T08:05:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"in_trash":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"なお、今回はサンプルコードにはRedux形式のインターフェースを使った。しかしReduxは状態管理の王道ではあるが唯一の正解ではない。中央集権的な状態管理、分散型の状態管理など状態管理にもいろいろなアプローチがある。これに関しては状態論 (2) に続く予定。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"なお、今回はサンプルコードにはRedux形式のインターフェースを使った。しかしReduxは状態管理の王道ではあるが唯一の正解ではない。中央集権的な状態管理、分散型の状態管理など状態管理にもいろいろなアプローチがある。これに関しては状態論 (2) に続く予定。","href":null}],"color":"default"}}]