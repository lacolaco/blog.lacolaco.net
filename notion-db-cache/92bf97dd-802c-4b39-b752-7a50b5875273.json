[{"object":"block","id":"bc3d9d9a-aebd-4705-84d5-fdc05fa641a1","parent":{"type":"page_id","page_id":"92bf97dd-802c-4b39-b752-7a50b5875273"},"created_time":"2023-03-12T02:00:00.000Z","last_edited_time":"2023-03-12T02:10:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"Angular のレンダリングメカニズムや変更検知などの文脈で “Dirty Checking” という用語はよくでてくるが、これが誤って理解されているようなブログ記事や発言を目にすることがある。つまり、「汚い方法での変更検知」という意味で読まれていることがあるが、これは完全に間違っている。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Angular のレンダリングメカニズムや変更検知などの文脈で “Dirty Checking” という用語はよくでてくるが、これが誤って理解されているようなブログ記事や発言を目にすることがある。つまり、「汚い方法での変更検知」という意味で読まれていることがあるが、これは完全に間違っている。","href":null}],"color":"default"}},{"object":"block","id":"0a2cc19a-ec0f-4ccf-940a-852a51e15507","parent":{"type":"page_id","page_id":"92bf97dd-802c-4b39-b752-7a50b5875273"},"created_time":"2023-03-12T02:02:00.000Z","last_edited_time":"2023-03-12T02:32:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"“Dirty Checking” とは、あるオブジェクトの状態が “Dirty” であるのかどうかをチェックすることである。この文脈では、オブジェクトは “Pristine” と“Dirty” のどちらかの状態を持つと考える。”Pristine”（手つかずの）とは、オブジェクトが何者によっても手を加えられておらず事前状態から変わっていないことを示す。逆に “Dirty” とはオブジェクトが何者かによって手を加えられて事前状態から変化していることを示す。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"“Dirty Checking” とは、あるオブジェクトの状態が “Dirty” であるのかどうかをチェックすることである。この文脈では、オブジェクトは “Pristine” と“Dirty” のどちらかの状態を持つと考える。”Pristine”（手つかずの）とは、オブジェクトが何者によっても手を加えられておらず事前状態から変わっていないことを示す。逆に “Dirty” とはオブジェクトが何者かによって手を加えられて事前状態から変化していることを示す。","href":null}],"color":"default"}},{"object":"block","id":"6221af5c-41ec-4d1a-b2c1-5761d79afd1b","parent":{"type":"page_id","page_id":"92bf97dd-802c-4b39-b752-7a50b5875273"},"created_time":"2023-03-12T02:06:00.000Z","last_edited_time":"2023-03-12T02:13:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"Angularのレンダリングメカニズムは、コンポーネントの状態が変更されたことを検知して再レンダリングするが、これは言いかえればコンポーネントがDirtyになったことを検知している。Dirtyなコンポーネントを検知するとレンダリング処理が実行され、コンポーネントとビューを同期したあとにコンポーネントをPristineに戻す。これを繰り返している。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Angularのレンダリングメカニズムは、コンポーネントの状態が変更されたことを検知して再レンダリングするが、これは言いかえればコンポーネントがDirtyになったことを検知している。Dirtyなコンポーネントを検知するとレンダリング処理が実行され、コンポーネントとビューを同期したあとにコンポーネントをPristineに戻す。これを繰り返している。","href":null}],"color":"default"}},{"object":"block","id":"861cf6c9-d83f-493e-9114-4872dfab11d9","parent":{"type":"page_id","page_id":"92bf97dd-802c-4b39-b752-7a50b5875273"},"created_time":"2023-03-12T02:14:00.000Z","last_edited_time":"2023-03-17T00:14:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"ChangeDetectorRef.markForCheck()","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"ChangeDetectorRef.markForCheck()","href":null},{"type":"text","text":{"content":" というAPIはこのメカニズムを象徴している。呼び出し元のコンポーネントを明示的にDirty状態に遷移させて、再レンダリングの必要があることをフレームワークに伝えることができる。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" というAPIはこのメカニズムを象徴している。呼び出し元のコンポーネントを明示的にDirty状態に遷移させて、再レンダリングの必要があることをフレームワークに伝えることができる。","href":null}],"color":"default"}},{"object":"block","id":"811a991a-1678-41db-8695-d5223f693320","parent":{"type":"page_id","page_id":"92bf97dd-802c-4b39-b752-7a50b5875273"},"created_time":"2023-03-17T00:15:00.000Z","last_edited_time":"2023-03-17T00:15:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"bookmark","bookmark":{"caption":[],"url":"https://angular.io/api/core/ChangeDetectorRef#markforcheck"}},{"object":"block","id":"31760cb6-18c8-4320-88b8-c7deda4a2e99","parent":{"type":"page_id","page_id":"92bf97dd-802c-4b39-b752-7a50b5875273"},"created_time":"2023-03-12T02:06:00.000Z","last_edited_time":"2023-03-17T00:15:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"quote","quote":{"rich_text":[{"type":"text","text":{"content":"Components are normally marked as dirty (in need of rerendering) when inputs have changed or events have fired in the view. Call this method to ensure that a component is checked even if these triggers have not occurred.","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"Components are normally marked as dirty (in need of rerendering) when inputs have changed or events have fired in the view. Call this method to ensure that a component is checked even if these triggers have not occurred.","href":null}],"color":"default"}},{"object":"block","id":"3eb93de4-777e-43e1-8892-7d047c5bb9cf","parent":{"type":"page_id","page_id":"92bf97dd-802c-4b39-b752-7a50b5875273"},"created_time":"2023-03-12T02:06:00.000Z","last_edited_time":"2023-03-17T00:15:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[],"color":"default"}},{"object":"block","id":"24328e60-450f-49d1-8afa-8188da6eae73","parent":{"type":"page_id","page_id":"92bf97dd-802c-4b39-b752-7a50b5875273"},"created_time":"2023-03-12T02:06:00.000Z","last_edited_time":"2023-03-17T00:15:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"同様に、AngularのフォームAPIにおいても各コントロールがDirtyとPristineの状態を持つ。同じ空文字列であってもユーザーがまだ触れていない状態か、ユーザーが触れた上での空なのかは意味が異なる。この文脈でも ","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"同様に、AngularのフォームAPIにおいても各コントロールがDirtyとPristineの状態を持つ。同じ空文字列であってもユーザーがまだ触れていない状態か、ユーザーが触れた上での空なのかは意味が異なる。この文脈でも ","href":null},{"type":"text","text":{"content":"FormControl.markAsDirty()","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"FormControl.markAsDirty()","href":null},{"type":"text","text":{"content":" と","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" と","href":null},{"type":"text","text":{"content":"FormControl.markAsPristine()","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":true,"color":"default"},"plain_text":"FormControl.markAsPristine()","href":null},{"type":"text","text":{"content":" というAPIがある。Dirty/Pristineという状態概念はAngularの文脈のなかで一貫した基礎的な用語であるといえる。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":" というAPIがある。Dirty/Pristineという状態概念はAngularの文脈のなかで一貫した基礎的な用語であるといえる。","href":null}],"color":"default"}},{"object":"block","id":"cf7853e0-1939-4824-884c-bdb11b82863b","parent":{"type":"page_id","page_id":"92bf97dd-802c-4b39-b752-7a50b5875273"},"created_time":"2023-03-12T02:19:00.000Z","last_edited_time":"2023-03-12T02:22:00.000Z","created_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"last_edited_by":{"object":"user","id":"f4f222d4-d508-405d-ba6c-da82ee26ee54"},"has_children":false,"archived":false,"type":"paragraph","paragraph":{"rich_text":[{"type":"text","text":{"content":"したがって、少なくともAngularの文脈において ”Dirty Checking” というのは変更検知の方法が ”Dirty” であるという意味ではまったくなく、”Dirty” かどうかを検知するという意味以外に解釈の余地はない。","link":null},"annotations":{"bold":false,"italic":false,"strikethrough":false,"underline":false,"code":false,"color":"default"},"plain_text":"したがって、少なくともAngularの文脈において ”Dirty Checking” というのは変更検知の方法が ”Dirty” であるという意味ではまったくなく、”Dirty” かどうかを検知するという意味以外に解釈の余地はない。","href":null}],"color":"default"}}]