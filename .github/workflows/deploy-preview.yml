name: deploy-preview

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
    paths:
      # Source code and components
      - 'src/**'
      # Content updates
      - 'src/content/**'
      # Configuration files
      - 'astro.config.ts'
      - 'tailwind.config.js'
      - 'tsconfig.json'
      # Package dependencies
      - 'package.json'
      - 'pnpm-lock.yaml'
      # Remark plugins and tools affecting build
      - 'tools/remark-embed/**'
      # Public assets
      - 'public/**'
      # Cloud Run files
      - 'Dockerfile'
      - '.dockerignore'
      - '.gcloudignore'
      # GitHub workflows (for workflow changes)
      - '.github/workflows/deploy-preview.yml'
      # Ignore non-content markdown files
      - '!*.md'
      - '!docs/**'
      - '!tools/**/README.md'

concurrency:
  group: deploy-preview-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      id-token: write
      pull-requests: write
    environment: development
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Google Auth
        uses: 'google-github-actions/auth@7c6bc770dae815cd3e89ee6cdf493a5fab2cc093' # v3.0.0
        with:
          workload_identity_provider: 'projects/348931464772/locations/global/workloadIdentityPools/github-actions-pool/providers/github-deploy'
          service_account: 'github-actions@blog-lacolaco-net.iam.gserviceaccount.com'

      - name: setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version-file: .node-version
          cache: 'pnpm'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@lacolaco'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: pnpm run build

      - name: Deploy to Cloud Run
        id: deploy-cloudrun
        uses: 'google-github-actions/deploy-cloudrun@2028e2d7d30a78c6910e0632e48dd561b064884d' # v3.0.1
        with:
          service: 'web'
          region: 'asia-northeast1'
          source: '.'
          no_traffic: true
          tag: 'pr-${{ github.event.number }}'
          flags: '--allow-unauthenticated'
          env_vars: |-
            GCS_BUCKET_NAME=${{ vars.GCS_BUCKET_NAME }}

      - name: Comment preview URL on PR
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('<!-- deploy-preview-comment -->')
            );

            const previewUrl = '${{ steps.deploy-cloudrun.outputs.url }}' || 'Deployment URL not available';
            const commitSha = '${{ github.event.pull_request.head.sha }}';
            const shortSha = commitSha.substring(0, 7);

            const commentBody = `üöÄ **Preview deployment ready!**

            ‚úÖ Preview URL: ${previewUrl}
            üìù Commit SHA: \`${shortSha}\` ([view commit](https://github.com/${{ github.repository }}/commit/${commitSha}))

            This comment was automatically generated by the deploy-preview workflow.

            <!-- deploy-preview-comment -->`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
