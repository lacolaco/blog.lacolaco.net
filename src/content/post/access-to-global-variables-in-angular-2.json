{
  "pageId": "5fa5bd2c-24b5-494a-984c-d234f8fab462",
  "lastEditedAt": "2023-06-03T11:23:00.000Z",
  "slug": "access-to-global-variables-in-angular-2",
  "properties": {
    "title": "Access to global variables in Angular 2",
    "date": "2016-10-04T01:24:00.000Z",
    "tags": ["tech", "Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Don’t use ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "window",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " directly.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 2 has an ability to develop an application in cross-platform because it doesn’t depend on DOM.\nBut it’s breakable easily. If you use ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "window",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ",",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "document",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " or anything browser-specific, then of course your app will lose the ability.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "We often use ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "window",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " instance to get and set ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "global variables",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": ". In browser platform, ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "window",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " is a single global context object.\nIn the other side, Node.js environment provides a global context as ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "global",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ".\nTo make our app platform-agnostic, we must ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "absorb",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " the difference.\nDon’t worry. Already we have a powerful stuff for that.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Dependency injection.",
          "annotations": {
            "bold": true
          }
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Define a global variable",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Prepare a global variable ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "foo",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " as example.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<body>\n  <my-app>\n    loading...\n  </my-app>\n  <script>\n    window.DATA = {\n      foo: \"bar\"\n    };\n  </script>\n</body>\n"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Declare global type",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "First, we should declare our global type as an interface. In this case, global type has only ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "foo",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " string field.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export interface MyGlobal {\n  foo: string;\n}\n"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Create ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "GlobalRef",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " class",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "This is a hero of this story. ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "GlobalRef",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " is an abstract class to access to the global object. It has only one ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "nativeGlobal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " getter. (consistent with ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ElementRef#nativeElement",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ".)",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export abstract class GlobalRef {\n  abstract get nativeGlobal(): MyGlobal;\n}\n"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Create platform-specific classes",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "GlobalRef",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " class is just a placeholder. Let’s make platform-specific classes by extending ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "GlobalRef",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ".",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export class BrowserGlobalRef extends GlobalRef {\n  get nativeGlobal(): MyGlobal {\n    return window as MyGlobal;\n  }\n}\nexport class NodeGlobalRef extends GlobalRef {\n  get nativeGlobal(): MyGlobal {\n    return global as MyGlobal;\n  }\n}\n"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Provide ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "GlobalRef",
          "annotations": {
            "code": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "We must provide the classes. Let’ create ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SharedModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " and define ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SharedModule.forBrowser()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " and ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SharedModule.forNode()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ".",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { NgModule, ModuleWithProviders } from \"@angular/core\";\nimport { GlobalRef, BrowserGlobalRef, NodeGlobalRef } from \"./global-ref\";\n@NgModule({})\nexport class SharedModule {\n  static forBrowser(): ModuleWithProviders {\n    return {\n      ngModule: SharedModule,\n      providers: [{ provide: GlobalRef, useClass: BrowserGlobalRef }]\n    };\n  }\n\n  static forNode(): ModuleWithProviders {\n    return {\n      ngModule: SharedModule,\n      providers: [{ provide: GlobalRef, useClass: NodeGlobalRef }]\n    };\n  }\n}\n"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "And use them in ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "BrowserAppModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " and ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NodeAppModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ".",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@NgModule({\n  imports: [BrowserModule, SharedModule.forBrowser()],\n  declarations: [App],\n  bootstrap: [App]\n})\nexport class BrowserAppModule {}\n@NgModule({\n  imports: [BrowserModule, SharedModule.forNode()],\n  declarations: [App],\n  bootstrap: [App]\n})\nexport class NodeAppModule {}\n"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Bootstrap",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Bootstrapping must be separated for each platform. Following is for only browser.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\nimport {AppBrowserModule} from './app';\nplatformBrowserDynamic().bootstrapModule(AppBrowserModule)\nUse `GlobalRef` in components\nAll done! Let’s use `GlobalRef` and access to global variables.\nimport {GlobalRef} from './global-ref';\n@Component({\n  selector: 'my-app',\n  template: `\n    <div>\n      <pre>{{ data | json }}</pre>\n    </div>\n  `,\n})\nexport class App {\n  data: any;\n  constructor(_global: GlobalRef) {\n    this.data = _global.nativeGlobal.DATA;\n  }\n}\n"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Plunker: ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "http://plnkr.co/edit/ceuEBlVpWhNNYZvMOqbO?p=preview",
          "href": "http://plnkr.co/edit/ceuEBlVpWhNNYZvMOqbO?p=preview",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Conclusion",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Don’t access to ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "window",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " as global context",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Wrap the context and absorb the difference among platforms",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Use dependency injection and NgModule",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Note: I never recommend you to use global variables. This is a small tip to tackle the real world… Good luck!",
          "annotations": {}
        }
      ]
    }
  ]
}
