{
  "pageId": "14d3521b-014a-803e-a815-c7030c8e4287",
  "lastEditedAt": "2025-01-09T13:02:00.000Z",
  "slug": "angular-signal-forms-prototype",
  "locale": "ja",
  "properties": {
    "title": "AngularのSignal Forms（プロトタイプ）をチラ見する",
    "date": "2024-12-24T15:00:00.000Z",
    "category": "Tech",
    "tags": ["Angular", "Signals", "Forms"],
    "canonicalUrl": "https://zenn.dev/lacolaco/articles/angular-signal-forms-prototype"
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これはAngularアドベントカレンダー 25日目の記事です。昨日はAKAIさんでした。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://qiita.com/advent-calendar/2024/angular"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "シグナルベースの新しいフォームAPIはAngularのロードマップにおいても注目されています。それがいったいどんなものになるのか、2025年に予想される動きをチラ見して期待を高めておくことにしましょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Signal Forms",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "実は現在、AngularレポジトリでSignal FormsのAPIをどのようにデザインするか実験するためのブランチができています。このブランチではプロトタイプをいくつか作成し、最初の草案を作成することを目指しています。ここである程度固まったアイデアを元に、コミュニティからのフィードバックを募るRFCが作られる見込みです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/angular/angular/blob/prototype/signal-forms/packages/forms/experimental/README.md"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "では具体的なアイデアを見てみましょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "1. スキーマロジック関数によるフォーム構築",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/angular/angular/blob/prototype/signal-forms/packages/forms/experimental/src/prototype1/README.md",
          "href": "https://github.com/angular/angular/blob/prototype/signal-forms/packages/forms/experimental/src/prototype1/README.md",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このアイデアでは、フォーム全体の構造を組み立てるための部品となる、スキーマロジック関数を導入しています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "もっとも基本的なパーツは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "field()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "group()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " といったフォームの構造を決定する関数です。リアクティブフォームにおける",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "FormControl",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "FormGroup",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を想像すればわかりやすいでしょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "const nameSchema = group({\n  first: field(''),\n  last: field('')\n})"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "group()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " や ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "field()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " によって生成されるそれぞれのパーツには ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "disabled()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " や ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "validate()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " などのロジックを指定するメソッドがあります。これらのメソッドは現在の値をシグナルとして受け取って結果を返す関数の形を取ります。次の例では、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "validate()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドの引数として渡される関数は内部的に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "computed()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で処理されるため、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "value()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "シグナルに更新があるたびにバリデーションが実行されるということでしょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "field(0).validate(value => value() > 9 ? 'too big' : null)"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "xlink()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "という特別なメソッドは別のフィールドの値に依存したロジックを定義するためのものです。パスワードの確認フィールドなどが想定されますね。次の例ではファーストネームとラストネームが同じであるときにエラーにしています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "const nameSchema = group({\n  first: field(''),\n  last: field('')\n}).xlink({\n  last: (schema, form) => schema\n    .validate(value => form.first.$() === value() ? 'cannot be the same as your first name' : '')\n})"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "定義済みのスキーマは別のスキーマの定義にマージすることもできるようです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "const userSchema = group({\n  name: nameSchema,\n  address: group({\n    street: field(''),\n    city: field(''),\n    state: field(''),\n    zip: field('')\n  })\n})"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここまではスキーマを定義しただけで、スキーマは値の保持などを行いません。次の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "form()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数にスキーマを与えることによって状態を含むフォームモデルとして完成します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "const nameForm = form(nameSchema, {first: 'John', last: 'Doe'});"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今のプロトタイプでは現在の入力値を取り出すシグナルは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": ".$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " というシグネチャのようです。フォームモデルはスキーマの各パーツごとに状態をシグナルとして取り出すことができます。次の例だと、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "nameForm.$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "も取得できますし、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "nameForm.first.$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "も取得できます。それぞれのシグナルには書き込みもできて、シグナルに値を書き込むとフォームモデルも更新されます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "const nameSignal = nameForm.$;\nconst firstNameSignal = nameForm.first.$;\nnameSignal() // => {first: 'John', last: 'Doe'}\nnameSignal.set({first: 'Bob', last: 'Loblaw'});\nfirstNameSignal() // => 'Bob'"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ざっと見てきましたが、このアイデアの特徴は次の点です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "group()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " や ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "field()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " といった部品を組み合わせて",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "フォームスキーマ",
              "annotations": {
                "bold": true
              }
            },
            {
              "type": "text",
              "text": "を定義する。",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "form()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " 関数にフォームスキーマを渡すことでフォームモデルを作成する",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "フォームモデルは内部の各コントロールの値や状態をシグナルで提供する（上記コードでは ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "$",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " が値の取得を表している）",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ざっくりいえば、関数の合成によってスキーマを組み立てるのがこのアイデアです。考え方としては",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "zod",
          "href": "https://github.com/colinhacks/zod",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "のようなライブラリと似ています。スキーマはフォームモデルは内部で生成するシグナルの構造を決定します。つまり、入力値をシグナルとして管理する責任はアプリケーション側ではなくフォームモデル側が持っています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、このフォームモデルをテンプレートとDOMにどのように紐づけるのかはまだ未知数です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "2.フォームフィールドによるシグナルの紐づけ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/angular/angular/blob/prototype/signal-forms/packages/forms/experimental/src/idea2/README.md",
          "href": "https://github.com/angular/angular/blob/prototype/signal-forms/packages/forms/experimental/src/idea2/README.md",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このアイデアはさきほどのスキーマ方式とは対照的に、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngField",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " というディレクティブを中心とするテンプレートベースのアプローチです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "quote",
      "text": [
        {
          "type": "text",
          "text": "Main idea: have a directive ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngField",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " that sets a field as the current field for all controls beneath it. controls can then inject the current field and register themselves to control its value and/or use some of the field's values in its bindings. To facilitate binding all of the relevant properties/attributes, another directive ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngBindField",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " binds all applicable bindings for common native controls.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import {Component, signal} from '@angular/core';\nimport {NativeInput} from './native-controls';\nimport {FormField, NgBindField, NgField} from './ngfield';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div *ngField=\"field\">\n      <label ngBindField></label>:\n      <input ngBindField />\n    </div>\n    <input [ngField]=\"field\" ngBindField /> <!-- could have input[ngField] auto-bind -->\n  `,\n  imports: [NgField, NgBindField, NativeInput],\n})\nexport class App {\n  field = new FormField(signal('value'), signal('label'));\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "FormField",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " クラスのインスタンスはひとつのフォーム上のフィールドに対応し、値とラベルをそれぞれシグナルで渡して初期化しています。そのインスタンスを ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngField",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ディレクティブに紐づけます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このアプローチの肝は、入力値を管理するシグナルを作成する責任がコンポーネント側にあることです。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "FormField",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " クラスや",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NgField",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブは受け取ったシグナルをDOMと橋渡しするだけで、シグナルの作成はしていません。シグナルの作成と管理についてアプリケーション側で自由にできます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "現状のプロトタイプへの所感",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今のAngularにはテンプレート駆動とリアクティブフォームの2つのフォームAPIがありますが、現状のプロトタイプでいえばテンプレート駆動はアイデア2の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "FormField",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "、リアクティブフォームはアイデア1のスキーマロジック関数と通じるところがあります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "スキーマロジック関数はなかなか複雑です。リアクティブフォームからRxJSを抜いてシグナルAPIベースにしたものと考えると、リアクティブフォームと同じく、そもそも複雑なフォームを構築するための多機能なAPIとして考えたほうがよさそうです。少なくとも今のままではAngularを学び始めた段階の人には難しすぎるだろうと思います。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "一方、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "FormField",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のほうはシグナルネイティブで再設計されたというだけで、やっていることは現状の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngModel",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "とそれほど大した違いはないし、このままの路線ならむしろ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngModel",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "よりも軽量な実装になると思われます。アプリケーションのバンドルサイズにシビアな環境でも最低限のフォーム構築支援を行うという路線ならこれでもアリかもしれないです。また、このレベルならギリギリでチュートリアルに載せてもいいんじゃなかろうかと思います。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "シグナルベースのフォームAPIもこれまでと同じく2種類のアプローチを提供するのか、統一された1つのアプローチにするのかはわかりませんが、今のところどちらのAPIもいまいちまだハマってない気がしています。今後のさらなるプロトタイピングに期待したいと思います。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "divider"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angularアドベントカレンダーに参加してくださったみなさん、ありがとうございました！また来年も知見を交換していきましょう。よいお年を！",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://qiita.com/advent-calendar/2024/angular"
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
