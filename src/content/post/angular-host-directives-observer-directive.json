{
  "pageId": "8921bbca-9dc2-4312-8119-845110ae380e",
  "lastEditedAt": "2023-06-03T11:23:00.000Z",
  "slug": "angular-host-directives-observer-directive",
  "properties": {
    "title": "Angular v15 hostDirectivesのユースケース検討: 状態監視系ディレクティブの合成",
    "date": "2022-10-30T09:53:00.000Z",
    "tags": ["Angular", "tech", "standalone component", "IntersectionObserver"],
    "updatedAt": "2022-10-30T00:00:00.000Z"
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この記事ではAngular v15で追加される ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@Directive.hostDirectives",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の実用的なユースケースとして、状態監視系ディレクティブを合成する使い道を検討する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "hostDirectives",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は基本的にライブラリ製作者に向けたAPIである上に実装されてから日が浅いのでまだ詳しいドキュメントはないが、ひとまず一次情報としてはこのIssueが一番適しているだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/angular/angular/issues/8785"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "公式チャンネルではないが、Angular Componentsチームの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@crisbeto",
          "href": "https://github.com/crisbeto",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " が機能について詳しく語っている動画もあるので参考にしてほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "youtube",
      "videoId": "oC9Qd9yw3pE"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "ユースケース例: ViewportDirectiveの合成",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "hostDirectives",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " はスタンドアロンなディレクティブを別のコンポーネントやディレクティブに合成できる機能であるから、合成されるディレクティブは再利用可能性が高いユーティリティ的なものが主になるだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "わざわざディレクティブとして実装して再利用したいユーティリティといえば、だいたいは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ElementRef",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を参照してDOMを扱う類のものである。そこで今回はDOMの状態を監視するAPIのひとつである ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "IntersectionObserver",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を利用して、画面内に要素が出入りするイベントをアプリケーションで扱えるようにする ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ViewportDirective",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を例に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "hostDirectives",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を試してみよう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "動作するサンプルはStackblitzで公開している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "stackblitz",
      "url": "https://stackblitz.com/edit/angular-ivy-utpuhe?ctl=1&embed=1&file=src/app/app.component.ts"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "ViewportDirective",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の実装",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "本質的な部分ではないので詳細は省くが、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "IntersectionObserver",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を使ってホスト要素が完全に表示されたときに ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "viewportIn",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " イベントを、ホスト要素が完全に画面外に隠れたときに ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "viewportOut",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " イベントを発火する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Directive({\n  selector: '[appViewport]',\n  standalone: true,\n})\nexport class ViewportDirective implements AfterViewInit, OnDestroy {\n  private el = inject(ElementRef).nativeElement as HTMLElement;\n  private intersectionObserver = new IntersectionObserver(\n    (entries) => {\n      for (const entry of entries) {\n        // 100%表示\n        if (entry.isIntersecting && entry.intersectionRatio === 1) {\n          this.viewportIn.emit();\n        }\n        // 100%非表示\n        if (!entry.isIntersecting && entry.intersectionRatio === 0) {\n          this.viewportOut.emit();\n        }\n      }\n    },\n    {\n      threshold: [0, 1],\n    }\n  );\n\n  @Output()\n  readonly viewportIn = new EventEmitter<void>();\n  @Output()\n  readonly viewportOut = new EventEmitter<void>();\n\n  ngAfterViewInit() {\n    this.intersectionObserver.observe(this.el);\n  }\n\n  ngOnDestroy() {\n    this.intersectionObserver.disconnect();\n  }\n}"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "ディレクティブとして直接利用する",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "まずは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ViewportDirective",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " をそのままテンプレート中で直接呼び出して利用する。比較対象として書いているだけなので特に解説することはない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: 'my-app',\n  standalone: true,\n  imports: [ViewportDirective],\n  template: `\n  <div class=\"container\">\n    <div style=\"height: 110vh; background: tomato;\">110vh</div>\n\n    <div appViewport style=\"padding: 16px; border: 1px solid black;\"\n      (viewportIn)=\"onViewportIn('direct')\" \n      (viewportOut)=\"onViewportOut('direct')\">\n      viewport directive (direct)\n    </div>\n  </div>\n  `,\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  onViewportIn(name: string) {\n    console.log(name, 'onViewportIn');\n  }\n\n  onViewportOut(name: string) {\n    console.log(name, 'onViewportOut');\n  }\n}"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "コンポーネントに合成して利用する (",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "hostDirectives",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " )",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "では、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "hostDirectives",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を使ってコンポーネントに合成して ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ViewportDirective",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を使ってみよう。まずは合成する先のコンポーネントとして ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "BannerComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を定義する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: 'app-banner',\n  standalone: true,\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class BannerComponent {}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "hostDirectives",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プロパティをコンポーネントメタデータに追加し、次のように ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ViewportDirective",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を追加する。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "hostDirectives",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に追加するディレクティブは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "imports",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に追加する必要はない。（ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "imports",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " はテンプレートコンパイルのためのメタデータであるから）",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "デフォルトではアウトプットは合成されないため、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ViewportDirective",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が持つ2つのアウトプットを ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "BannerComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の一部として公開するために、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "outputs",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プロパティを設定している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  ...,\n  hostDirectives: [\n    {\n      directive: ViewportDirective,\n      outputs: ['viewportIn', 'viewportOut'],\n    },\n  ],\n})"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これにより、 親コンポーネントでは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "BannerComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " には定義されていない ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "viewportIn",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "viewportOut",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " イベントにもアクセスできる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: 'my-app',\n  standalone: true,\n  imports: [ViewportDirective, BannerComponent],\n  template: `\n  <div class=\"container\">\n    <div style=\"height: 110vh; width: 100%; background: skyblue;\">110vh</div>\n\n    <app-banner\n      (viewportIn)=\"onViewportIn('composite')\" \n      (viewportOut)=\"onViewportOut('composite')\">\n      viewport directive (composite)\n    </app-banner>\n  </div>\n  `,\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {}"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "コンポーネント内部から参照する (dependency injection)",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "もうひとつの使い方として、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "hostDirectives",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に追加したディレクティブの参照をDependency Injectionで取得することが考えられる。合成した機能を親コンポーネントに対して露出するのではなく、内部で利用する形だ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次のように ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "inject",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数で取得したホスト要素の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ViewportDirective",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " インスタンスを使い、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "viewportIn",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "viewportOut",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のイベントを購読して処理を行うことができる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  ...\n  hostDirectives: [\n    {\n      directive: ViewportDirective,\n    },\n  ],\n  host: {\n    '[class.in-viewport]': 'isInViewport',\n  },\n})\nexport class BannerComponent {\n  private viewport = inject(ViewportDirective, { self: true });\n  isInViewport = false;\n\n  ngOnInit() {\n    merge(\n      this.viewport.viewportIn.pipe(map(() => true)),\n      this.viewport.viewportOut.pipe(map(() => false))\n    ).subscribe((isInViewport) => {\n      this.isInViewport = isInViewport;\n    });\n  }\n}"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "インプット・アウトプットの再公開は名前の設計が重要",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今回の検討で感じたのは、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "outputs",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を使ったケースでは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<app-banner>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " コンポーネントが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "viewportIn",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " / ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "viewportOut",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を自身のアウトプットとして再公開したが、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ViewportDirective",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が公開するときに適した命名とは違っているように思う。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ディレクティブのインプット・アウトプットは、ディレクティブ名をprefixとするような命名がされやすい。たとえば ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "routerLink",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に対して ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "routerLinkActive",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のような感じだ。なぜかといえば同じホスト要素に複数の属性ディレクティブが付与されることがあり、名前空間を分けて衝突しないようにするからだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "BannerComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " から再公開したインプット・アウトプットが合成されたものであったとしても、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "BannerComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を利用する側からすれば直接定義されたものとの間に違いはない。だから ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "BannerComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が持っていても不自然ではない名前で公開するようにエイリアスを設定するのがいいだろう。エイリアスは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "元の名前: 再公開する名前",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で設定できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  ...,\n  hostDirectives: [\n    {\n      directive: ViewportDirective,\n      outputs: [\n        'viewportIn: shown', // `<app-banner (shown)=\"onBannerShown()\">\n      ],\n    },\n  ],\n})"
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
