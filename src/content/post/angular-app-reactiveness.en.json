{
  "pageId": "e2c2dfec-0816-45ec-91da-8e3b41c704ad",
  "lastEditedAt": "2023-12-24T00:37:00.000Z",
  "slug": "angular-app-reactiveness",
  "locale": "en",
  "properties": {
    "title": "Angular: Test Reactiveness with OnPush strategy",
    "date": "2020-03-18T00:00:00.000Z",
    "tags": ["Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "OnPush",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " change detection strategy can test ‚Äúreactiveness‚Äù of an Angular application. Using OnPush is not neccessary to remove Zone.js, but reactiveness is still important in the ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "zone-less",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": " world. Removing Zone.js brings both control and responsibility about application rendering to a developer. It is not recommendable for everyone. So before doing that, understand how much Angular and Zone.js have been helping us enough.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Things Zone.js does",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Simply, what Zone.js (Zone) does is just ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "firing events to Angular in order to run change detection",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": ". It means Zone itself does ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "not",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " detect changes. Change detection is Angular‚Äôs job. Zone just tells Angular when it should run change detection.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Technically, Zone patches some of Browser APIs like ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "setTimeout",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ", ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Promise",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " and ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "XHR",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " to hook into ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "async tasks",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": " and fire its events. Angular listens the events and run change detection on after each async task. As the result, Angular application can re-render component templates after ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "setTimeout",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ".",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Learn more: ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "https://angular.io/guide/zone",
          "href": "https://angular.io/guide/zone",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "So, after removing Zone, Angular cannot know when it should run change detection. Angular won‚Äôt re-render any components unless explicit triggering. Who have to does it? Of course, a developer.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Triggering Change Detection manually",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Without Zone, there is a bit difference in how to use ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ChangeDetectorRef",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ".",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "markForCheck()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " does ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "NOT",
              "annotations": {
                "bold": true
              }
            },
            {
              "type": "text",
              "text": " trigger change detection.",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "detectChanges()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " triggers change detection immediately.",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Because ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "markForCheck()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " can just mark the component ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "for the next change detection",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": ", re-rendering never happens unless someone triggers it. But ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "detectChanges()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " is exactly an API for trigger change detection. So without Zone, developers can call ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "detectChanges()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " when they want to re-rendering. All done! yay!",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "üòì ‚ÄúToo many detectChanges()!!‚Äù",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "But sadly, regular Angular applications are not ready for Zone-less. You may have to write too many ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "detectChanges()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " in a lot components or other places.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "It is because the application‚Äôs ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "reactiveness",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": " is not high. Reactiveness means how much the Angular application can react the state changes. As you know, using observables and AsyncPipe is a common pattern which can make the app reactive.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Here is a great talk about reactive Angular by Mike Ryan.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "youtube",
      "videoId": "rz-rcaGXhGk"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "To build reactive Angular app, immutability and passiveness of components are strongly important. And before removing Zone, artificially we can ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "test",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": " these with ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "OnPush change detection strategy",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": ".",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "OnPush strategy",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "OnPush is one of the change detection behavior. That brings some restriction to an application. Every components won‚Äôt be checked in change detection flow unless it has been ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "pushed",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": ". What the ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "push",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "? Great articles are here;",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Angular OnPush Change Detection - Avoid Common Pitfalls",
              "href": "https://blog.angular-university.io/onpush-change-detection-how-it-works/",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "üöÄ A Comprehensive Guide to Angular onPush Change Detection Strategy",
              "href": "https://netbasal.com/a-comprehensive-guide-to-angular-onpush-change-detection-strategy-5bac493074a4",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Shortly, the following things can ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "push",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " a component.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "numbered_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Input changes: passing new value to the ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "@Input()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " property ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "within the template",
              "annotations": {
                "bold": true
              }
            },
            {
              "type": "text",
              "text": ".",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "DOM events: dispatching a native DOM events in its template.",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Marking: calling ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "ChangeDetectorRef.markForCheck()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " from a directive/component.",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "From OnPush-full to Zone-less",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "If an application works well even all components has been configured as OnPush, it has a great reactiveness. There are some steps to removing Zone from there.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "For example, this component can be used with OnPush because it uses ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " and AsyncPipe and its template is completely depending on the stream. AsyncPipe calls ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "markForCheck",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " when the observable emits new value. So after calling ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "count()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ", this component will be re-rendered.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  template: `\n    <ng-container *ngIf=\"state$ | async as state\">\n    <button (click)=\"count()\">Counter {{ state.counter }}</button>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CounterComponent {\n  private readonly stateSubject = new BehaviorSubject({\n    counter: 1,\n  });\n  readonly state$ = this.stateSubject.asObservable();\n\n  count() {\n    const prev = this.stateSubject.value;\n    this.stateSubject.next({ ...prev, counter: prev.counter + 1 });\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Because that re-rendering is triggered by ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "markForCheck",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ", still it needs Zone. Setting ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NoopZone",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " in ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "main.ts",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ", the counter won‚Äôt work on click.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "platformBrowser().bootstrapModule(AppModule, { ngZone: 'noop'});"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "To fixing this, call ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "detectChanges()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " on state changes. Adding a line to ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "click()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " method is easy but it is not ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "reactive",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": " way. Let‚Äôs make ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " can trigger change detection. ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "tap()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " operator is added to ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " observable to call ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "detectChanges()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " after each change. ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "setTimeout()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " is needed to defer it till AsyncPipe handles the change.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "export class AppComponent {\n  constructor(private cdRef: ChangeDetectorRef) { }\n\n  private readonly stateSubject = new BehaviorSubject({\n    counter: 1,\n  });\n  readonly state$ = this.stateSubject.asObservable().pipe(\n    // Reactive way\n    // Trigger change detection after each change\n    tap(() => setTimeout(() => this.cdRef.detectChanges()))\n  );\n\n  count() {\n    const prev = this.stateSubject.value;\n    this.stateSubject.next({ ...prev, counter: prev.counter + 1 });\n    // Imperative way\n    // this.cdRef.detectChanges()\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "If you are familier to Ivy‚Äôs experimental secret APIs, use ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "…µmarkDirty",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " instead.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "readonly state$ = this.stateSubject.asObservable().pipe(\n    tap(() => …µmarkDirty(this))\n);"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "It works well! But‚Ä¶ wait! Why we have to trigger change detection manually is AsyncPipe doesn‚Äôt do that. If AsyncPipe can do that, we are free from ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "detectChanges()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ". Let‚Äôs replace AsyncPipe by another solution.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Pipe and ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "detectChanges()",
          "annotations": {
            "code": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "This is the simplest alternative. Making a pipe similar to AsyncPipe but call ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "detectChanges()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " insteat of ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "markForCheck()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ".",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "NgRx team are proposing a RFC about ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngrx/components",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " package and it says about that.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "RFC: Component: Proposal for a new package `component` ¬∑ Issue #2052 ¬∑ ngrx/platform",
          "href": "https://github.com/ngrx/platform/issues/2052",
          "annotations": {}
        }
      ]
    },
    {
      "type": "quote",
      "text": [
        {
          "type": "text",
          "text": "Push Pipe",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "There is not the implementation yet but it is not difficult to built the pipe by yourself.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "// Simple Implementation\n@Pipe({\n  name: 'push',\n  pure: false\n})\nexport class PushPipe<T> implements PipeTransform {\n  constructor(private cdRef: ChangeDetectorRef) { }\n\n  observable: Observable<T> | null = null;\n  subscription: Subscription;\n  lastValue: T | null = null;\n\n  transform(observable: Observable<T>): T {\n    if (this.observable !== observable) {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n      this.subscription = observable.subscribe(value => {\n        this.lastValue = value;\n        setTimeout(() => this.cdRef.detectChanges());\n      });\n    }\n    return this.lastValue;\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "By the way, Pipes have a problem for handling asynchronous data. Read previous post ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "‚ÄúInitial Null Problem of AsyncPipe and async data-binding‚Äù",
          "href": "https://blog.lacolaco.net/2020/02/async-pipe-initial-null-problem-en/",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " for the detail.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Conclusion",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Zone is telling Angular when it should run change detection.",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Without Zone, a developer have to do that instead of Zone.",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Both OnPush and Zone-less require reactiveness of an application.",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "OnPush-full application can go forward for Zone-less with less effort.",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Example app for this arcticle is avaiable on ng-run: ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "https://ng-run.com/edit/OCM8QyXr4CrgPQv5TZMT?open=app%2Fapp.component.ts",
          "href": "https://ng-run.com/edit/OCM8QyXr4CrgPQv5TZMT?open=app%2Fapp.component.ts",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Thanks!",
          "annotations": {}
        }
      ]
    }
  ]
}
