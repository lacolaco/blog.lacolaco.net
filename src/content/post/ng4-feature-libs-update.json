{
  "pageId": "aa3078a5-d0bb-4538-aa41-5008ca903a52",
  "lastEditedAt": "2023-12-30T10:11:00.000Z",
  "slug": "ng4-feature-libs-update",
  "properties": {
    "title": "[Angular 4.0] router/http/animationsモジュールの更新について",
    "date": "2017-03-13T00:00:00.000Z",
    "tags": ["Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 4.0特集のラストはrouterモジュール、httpモジュールの変更と、新たに追加されたanimationsモジュールについての解説です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "routerモジュールの変更",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "イベントの追加",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Router",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が発火するイベントに、Lazy Loading用の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "RouteConfigLoadStart",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "RouteConfigLoadEnd",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が追加されました。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "RouterModule.forChild()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で遅延して読み込まれた設定をRouterに取り込みはじめた時と、それが終わった時に発火されます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "runGuardsAndResolvers",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "設定の追加",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Route",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に新しく",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "runGuardsAndResolvers",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティが追加されました。 これは同じルートが選択されているときに、GuardやResolverが再実行するタイミングを制御するためのものです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "runGuardsAndResolvers",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が取り得る値は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "paramsChange",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "paramsOrQueryParamsChange",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "そして",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "always",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の3種類です。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "paramsChange",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "はデフォルトの設定で、これまでの挙動と同じです。 GuardとResolverが再実行するのはパスパラメータかマトリクスパラメータが変わったときだけです。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "paramsOrQueryParamsChange",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "では、デフォルトの挙動に加えてクエリパラメータの変更時にも再実行されます。 そして",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "always",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ではあらゆるナビゲーションで再実行されます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "runGuardsAndResolvers",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は次のように設定します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "{\n    path: 'admin',\n    component: AdminCmp,\n    runGuardsAndResolvers: 'paramsChange',\n    canActivate: [AdminAuth]\n},"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "httpモジュールの変更",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "リクエストオプションの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "search",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が非推奨に",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "RequestOptions",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "型の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "search",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティが非推奨のAPIとなります。 このプロパティはリクエストURLにクエリパラメータを付与するためのものでしたが、今後は新しく追加される",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "params",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティを使います。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次のコードを見ればとても使いやすくなることがわかります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "// Before\nconst search = new URLSearchParams();\nsearch.append('id', 'foo');\nsearch.append('name', 'bar');\n\nthis.http.get(url, {search});\n\n// After\nthis.http.get(url, {params: {id: 'foo', name: 'bar'}});"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これまで",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "search",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティが受け取るオブジェクトの型は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "string|URLSearchParams",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "でしたが、 4.0以降はこれに加えて",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "{[key: string]: any|any[]}",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "型のマップオブジェクトを受け取ることができます。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "params",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティも同じ型のオブジェクトを受け取れます。 内部的には",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "params",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "をパースして内部の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "search",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティを組み立てる、という処理になっているので、 4.x系の間は破壊的変更を防ぐためにどちらのプロパティも同じ挙動で動作しますが、 5.0からは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "search",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティは外部からは見えないようになります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "animationsモジュール",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "animationsモジュールはこれまでcoreモジュールに同梱されていたアニメーションAPIを、独立したモジュールに分割したものです。 アニメーションを必要としないアプリケーションが不要なコードを含まないようにすることを目的としています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、animationsモジュールはさらに便利になる新しいAPIがいくつも開発中です。 まだ4.0ではリリースされませんが、ひとつだけ4.0に含まれる変更があるので紹介します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "transition式の関数サポート",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "transition",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の第1引数はこれまで文字列で",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "hide => show",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "* => void",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "など定義していましたが、 これに加えて",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "fromState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "toState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を受け取って",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "boolean",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を返す関数を渡せるようになります。 次のコード例を見てください。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "transition('hide => show', ...)\n// equivalent to\nconst hide2show = (from, to) => from === 'hide' && to === 'show';\ntransition(hide2show, ...)\n\ntransition('void => *', ...)\n// equivalent to\nconst fromVoid = (from, to) => from === 'void';\ntransition(fromVoid, ...)"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Lazy Loadingのサポート強化",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Guard/Resolveがさらに便利に",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Httpの",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "search",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "が非推奨に",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "animationsモジュールの追加",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "divider"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 4.0 Features",
          "annotations": {
            "bold": true
          }
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "新しいngIfの使い方",
              "href": "/post/ng4-feature-ngif/",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Metaサービスの使い方",
              "href": "/post/ng4-feature-meta-service/",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "formsモジュールの更新について",
              "href": "/post/ng4-feature-forms-update/",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "core/commonモジュールの変更について",
              "href": "/post/ng4-feature-core-update/",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "router/http/animationsモジュールの変更について",
              "href": "/post/ng4-feature-libs-update/",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
