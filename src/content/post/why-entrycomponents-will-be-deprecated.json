{
  "pageId": "56463883-d920-4375-a2f4-f76b6fcf3c88",
  "lastEditedAt": "2023-06-03T11:23:00.000Z",
  "slug": "why-entrycomponents-will-be-deprecated",
  "properties": {
    "title": "なぜentryComponentsは非推奨になるのか",
    "date": "2019-11-04T00:00:00.000Z",
    "tags": ["tech", "Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この記事では、Angular v9.0 にて非推奨となる ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 機能が、なぜ非推奨になるのかについてできるだけ簡単に解説します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular - Deprecated APIs and Features",
          "href": "https://next.angular.io/guide/deprecations#entrycomponents-and-analyze_for_entry_components-no-longer-required",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "はじめに",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "解説を始める前に、重要な点をあらかじめ書き記しておきます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "もし Ivy をオプトアウトする場合は、 ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "entryComponents",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " は引き続き必要です。決して削除しないでください。",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "いままで ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "entryComponents",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " 機能を使ったことがない方が新たになにか覚える必要はありません。興味がなければ過去のものとして無視してください。",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " とは何なのか",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "v9.0 で非推奨となる ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " とは何だったのかということをまずは振り返りましょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は多くの場合、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "動的なコンポーネント",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " を実現するために利用されます。動的なコンポーネントとは、Angular のテンプレート HTML 内に登場せず、コードの実行によって生成されるコンポーネントです。テンプレート HTML を静的に検査しても宣言が見つからないことから ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "動的",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " と呼ばれます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular - 動的コンポーネントローダー",
          "href": "https://angular.jp/guide/dynamic-component-loader",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "もっとも代表的なユースケースはダイアログやモーダルのようなケースです。コンポーネントクラスの処理が実行されることで動的にコンポーネントが表示されます。このようなコンポーネントはテンプレート HTML 内に宣言されません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "たとえば Angular CDK の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Overlay API",
          "href": "https://material.angular.io/cdk/overlay/overview",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "を使ってコンポーネントをオーバーレイ上に表示するには次のようなコードを書きます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export class AppComponent {\n  constructor(private overlay: Overlay) {}\n\n  openModal() {\n    const overlayRef = overlay.create();\n    const modalPortal = new ComponentPortal(MyModalComponent);\n    overlayRef.attach(modalPortal);\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このとき、動的に表示したい ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MyModalComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は、 それが宣言される ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NgModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 配列に追加される必要があります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@NgModule({\n  declarations: [AppComponent, MyModalComponent],\n  entryComponents: [MyModalComponent]\n})\nexport class AppModule {}"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "なぜ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が必要なのか",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular に慣れている人にとっては、もはや当たり前のように「モーダルを実装するときは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 」というルーチンになってしまっているかもしれませんが、そもそもなぜこれが必要なのでしょうか。その理由は、Angular v8 までの AoT テンプレートコンパイラと、そのテンプレートコンパイラが生成する実行コードに理由があります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここで以降の説明の簡単のため、v8 以前の AoT コンパイラを ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ViewEngine",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " (VE) コンパイラと呼びます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "コンポーネントの生成と ComponentFactory",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "動的コンポーネントの生成には ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ComponentFactoryResolver",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という API を使います。この API はコンポーネントクラスから、そのコンポーネントに対して AoT コンパイラが生成した ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ComponentFactory",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " オブジェクトを返すものです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export class AppComponent {\n  constructor(private cfr: ComponentFactoryResolver) {}\n\n  ngOnInit() {\n    const componentFactory = this.cfr.resolveComponentFactory(SomeComponent);\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "先ほど紹介した CDK の Overlay や Portal の機能も、この ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ComponentFactoryResolver",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を利用しています。そして、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に追加されたコンポーネントだけがこの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "resolveComponentFactory",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " メソッドの引数に使えます。もし追加されていなければ次のようなエラーが表示されます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://thepracticaldev.s3.amazonaws.com/i/y832ijip6kq9xmouhvvg.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "つまり、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " とは、「あるコンポーネントの ComponentFactory を解決可能にする」ための機能であると言えます。ではなぜ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に追加されていないコンポーネントの ComponentFactory は解決できないのでしょうか。すべてのコンポーネントは等価ではないのでしょうか？",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "ViewEngine は Tree-shakable な ComponentFactory を生成する",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "その答えは半分 YES です。ViewEngine の AoT コンパイラは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NgModule.declarations",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 配列に指定されたすべてのコンポーネントの ComponentFactory を生成しています。しかし、それが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ComponentFactoryResolver",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " から解決可能になっていないのです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この様子は実際に AoT コンパイルの結果を見るとはっきりとわかります。Angular CLI のプロジェクトであれば、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngc -p ./tsconfig.app.json",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " とコマンドを実行すれば ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "tsc-out",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ディレクトリに AoT コンパイル結果が出力されます。その中には、すべてのコンポーネントに対して ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "./some.component.ngfactory.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のような ComponentFactory の生成コードを見ることができます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://thepracticaldev.s3.amazonaws.com/i/ksacrf6s6j49dn18iofg.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これで ViewEngine ではどのコンポーネントにも ComponentFactory は存在していることがわかります。しかし、これらの ComponentFactory は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "どこからも参照されていません",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "。つまり Angular CLI（の内部で使われている webpack）のビルドでは、不要なコードとしてバンドルに含められないのです。これが、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ComponentFactoryResolver",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " によって ComponentFactory を解決できないコンポーネントがある理由です。バンドルサイズ削減のために、不要なコードを含めない仕組みになっているのです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Component と ComponentFactory の分断",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "しかしこれはおかしい話です。ソースコード中で ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SomeComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を参照しているのだからその ComponentFactory は必要なコードとしてバンドルに含められるべきです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここが ViewEngine の限界です。ViewEngine の AoT コンパイラは ComponentFactory の生成コードを元のコンポーネントクラスとは別のファイルに出力します。つまり、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "some.component.ts",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に対して ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "some.component.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "some.component.ngfactory.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を出力します。したがって、アプリケーションで ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SomeComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " への参照があったとしても、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SomeComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の ComponentFactory には一切参照が届かないのです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://thepracticaldev.s3.amazonaws.com/i/936ej8535g3gtybmoxnz.png",
      "caption": ""
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ComponentFactoryResolver",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " をセットアップする",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここでようやく ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の出番です。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NgModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に追加されたコンポーネントの ComponentFactory は、AoT コンパイラが特別に解釈して ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ComponentFactoryResolver",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で解決できるように参照を作ります。その様子は AoT コンパイル後の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "app.module.ngfactory.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で見ることができます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://thepracticaldev.s3.amazonaws.com/i/db6vv7ojx2mqk7mo55uu.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "AoT コンパイルの生成コードをはじめて見る方は驚くかもしれませんが、今回注目すべき点は 2 ヶ所。インポート文と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ComponentFactoryResolver",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のプロバイダ宣言です。見ての通り、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppModuleNgFactory",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " から参照されているのは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "app.component.ngfactory",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " だけです。そして、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ComponentFactoryResolver",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の近くにある配列には ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppComponentNgFactory",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " だけがセットされています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "それでは、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SomeComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 配列に追加してもう一度 AoT コンパイルしてみましょう。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "app.module.ngfactory.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に変化があるはずです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://thepracticaldev.s3.amazonaws.com/i/bszkaslhwu3bai9vtceg.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "新たに ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "some.component.ngfactory",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " への参照が追加され、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ComponentFactoryResolver",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の近くにある配列に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SomeComponentNgFactory",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が追加されています。実はこの配列こそが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ComponentFactoryResolver",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が解決できるコンポーネントのリストです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "つまり、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " によって ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NgModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のコンパイル結果に影響を与えることで、動的に利用したいコンポーネントの ComponentFactory が Tree-shaking されないように、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ComponentFactoryResolver",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " から解決可能な参照を保持することができるのです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "なぜ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が非推奨になるのか",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ViewEngine において ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " がなぜ必要だったかを簡単に説明しましたが、なぜ v9 からは非推奨となるのでしょうか。それは ViewEngine に変わる Angular の新しい ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Ivy",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "コンパイラが ViewEngine の抱える問題を根本から解決したからです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Ivy は同一ファイルにコード生成する",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Ivy の AoT コンパイラは元のコンポーネントファイルと同じファイル、しかも同じクラスの静的フィールドとしてコード生成します。実際に AoT コンパイル結果を見てみましょう。v9 では次のような生成コードになります。Ivy では AoT コンパイルによって追加される独自のファイルは一切ありません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://thepracticaldev.s3.amazonaws.com/i/bj6x27pj91vgbvu6h3jm.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "some.component.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は次のようになっています。3 行目にあるのは元の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SomeComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " から ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@Component",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " デコレーターが除去されたクラスです。そしてデコレーターの中に定義されていたセレクターやテンプレートなどのメタデータが、 9 行目以降の AoT コンパイラによる生成コードに変換されています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://thepracticaldev.s3.amazonaws.com/i/p2q707m1e3rtd5xobkf1.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここで重要なことは、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SomeComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の AoT コンパイル後コードが、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SomeComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " クラスと密に結合していることです。これにより、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SomeComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を参照すれば自動的に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SomeComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のコンポーネント生成に必要なすべての情報を解決できます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "つまり、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "app.module.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "some.component.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " をインポートしているだけで、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SomeComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の ComponentFactory は解決可能になるのです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://thepracticaldev.s3.amazonaws.com/i/4bdke2arab01ajubqkxb.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これが、 Angular v9 で Ivy によって ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が非推奨になる理由です。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の代替となる新たな方法に変わるのではなく、そもそも根本的に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "動的コンポーネントと静的コンポーネントを区別する必要がなくなる",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "のです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Tree-shaking の問題は？",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここまで読んだ方はもしかすると ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " がなくなることで、ViewEngine と比べてバンドルサイズが増えるのではないかと疑っているかもしれません。確かに、コンポーネントの生成コードだけを考えると、ViewEngine と比べて Tree-shaking 可能な領域は減っています。しかし Ivy ではその他のいくつもの改善によってトータルではほとんどのユースケースでバンドルサイズが削減されます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "もっとも大きな改善は、Angular のテンプレート機能が Tree-shakable になることです。詳細は割愛しますが、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "[prop]=\"someValue\"",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " や ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "(eventName)=\"onEvent($event)\"",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " など、すべてのテンプレートの機能が個別に Tree-shaking されます。アプリケーションで一度も使わなかったテンプレート機能はバンドルに含まれません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、コンポーネントと生成コードが同一ファイルになることでクラス定義や import/export のオーバーヘッドもなくなり、より少ないコードだけを生成すればよくなりました。また、ViewEngine ではコンポーネントが子コンポーネントになる場合とホストコンポーネントになる場合で別の生成関数を定義していましたが、Ivy ではひとつの生成関数に統合されるので、これによっても生成コードのサイズは減っています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "トレードオフはありつつも、Ivy では差分コンパイルのスピード、バンドルサイズの削減、内部アーキテクチャの単純化などの複合的な視点で、Ivy のアーキテクチャを選択しています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "動的コンポーネントを超えた遅延コンポーネントへ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Ivy の AoT コンパイラは同一クラスの静的フィールドに ComponentFactory を生成すると説明しました。この変更による恩恵は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が不要になるだけではありません。ひとつのコンポーネントに関するコードが 1 ファイルに含まれることで、Dynamic Import によるコンポーネントの遅延読み込みも可能になります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "つまり、次のように動的な ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "import()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 文で取得した ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SomeComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " クラスでも ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ComponentFactoryResolver",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で解決できるということです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export class AppComponent {\n  constructor(private cfr: ComponentFactoryResolver) {}\n\n  ngOnInit() {\n    import(\"./some/some.component\")\n      .then(m => this.cfr.resolveComponentFactory(m.SomeComponent))\n      .then(someCompFactory => {\n        console.log(someCompFactory);\n      });\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Ivy ではすべてのコンポーネントの ComponentFactory がバンドルに含められると説明しましたが、それはテンプレート HTML や TypeScript コードの中で ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "静的に",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " 参照されている場合だけです。もし ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SomeComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " がこの Dynamic Import 以外でまったく参照されていなければ、 Angular CLI は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SomeComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " そのものを別バンドルに分離し、遅延読み込み可能にします。モーダル用のコンポーネントであれば、初期読込される JavaScript にはコンポーネントを含めず、モーダルを表示するイベントが発生したときに初めて遅延読み込みすればいいわけです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このように ViewEngine から Ivy にアーキテクチャ変更したことによって、いままでは覚えるしかなかった「Angular ではできない」や「Angular ではこのようにする」といった慣例的な制約がいくつも取り払われています。そして不要になった（陳腐化した）API は非推奨となっていきます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "非推奨化は必ずしも代替 API への置き換えを意味するわけではないということを覚えておきましょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "v8 までの ViewEngine では ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "entryComponents",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " が無ければ ComponentFactory の解決ができなかった",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Ivy ではすべてのコンポーネントが常に ComponentFactory を保持しているため、いつでもどのコンポーネントも動的に利用できるようになる",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "entryComponents",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " の非推奨化は代替 API への置き換えではなく、そもそも動的コンポーネントと静的コンポーネントの区別が不要になったということである",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Ivy についての詳しい話は、 AngularConnect 2019 での次のセッションをおすすめします。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Deep Dive into the Angular Compiler | Alex Rickabaugh",
              "href": "https://www.youtube.com/watch?v=anphffaCZrQ&list=PLAw7NFdKKYpE-f-yMhP2WVmvTH2kBs00s",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "How Angular works | Kara Erickson",
              "href": "https://www.youtube.com/watch?v=S0o-4yc2n-8&list=PLAw7NFdKKYpE-f-yMhP2WVmvTH2kBs00s&index=26",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "How we make Angular fast | Miško Hevery",
              "href": "https://www.youtube.com/watch?v=EqSRpkMRyY4&list=PLAw7NFdKKYpE-f-yMhP2WVmvTH2kBs00s&index=10",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "The secrets behind Angular’s lightning speed | Max Koretskyi",
              "href": "https://www.youtube.com/watch?v=nQ8oJ1rpwIc&list=PLAw7NFdKKYpE-f-yMhP2WVmvTH2kBs00s&index=7",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
