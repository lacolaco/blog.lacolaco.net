{
  "pageId": "1d03521b-014a-8070-af87-dfbe63ce9c9a",
  "lastEditedAt": "2025-04-09T15:04:00.000Z",
  "slug": "angular-selectorless-is-coming",
  "locale": "ja",
  "properties": {
    "title": "Angular: Selectorlessがもうすぐやってくる",
    "date": "2025-04-09T14:13:00.000Z",
    "category": "Tech",
    "tags": ["Angular"],
    "canonicalUrl": "https://zenn.dev/lacolaco/articles/angular-selectorless-is-coming"
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この記事では、Angularフレームワークに導入が検討されている新たな概念、\"",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Selectorless",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "\" について解説する。 Angularは常に開発者の体験向上とアプリケーションの効率化を目指し進化を続けている。その最新の潮流の一つが Selectorless である。これは、Angular v14で導入されたStandalone Componentの思想をさらに推し進め、Angular開発のあり方を大きく変える可能性を秘めている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "背景",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "従来のAngular開発においては、コンポーネントやディレクティブはNgModuleというモジュールに属する必要があり、コンパイラが依存関係を解析する上で複雑さの一因となっていた。Angular v14におけるStandalone Componentの導入は、このNgModuleの抽象化を解消し、コンポーネント自身が依存関係を直接管理できるようにすることで、ビルド効率の向上に貢献した。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://blog.angular.dev/the-future-is-standalone-475d7edbc706"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "しかし、Standalone Componentにおいても、テンプレート内でコンポーネントやディレクティブを参照する際には、HTML要素のセレクタを使用する必要がある。TypeScriptファイルでクラスをimportしているにも関わらず、セレクタと対応するクラスの関連性はコンポーネントファイルだけでは明確にならず、コンパイラはセレクタの定義を探しに行く必要がある。これは、単一ファイルコンパイルの理想を妨げ、ビルドの並列化を阻害する要因となっている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "さらに、ランタイムにおいても、セレクタによるコンポーネントやディレクティブのマッチング処理はパフォーマンス上のオーバーヘッドとなり、テンプレートを見ただけではどのコンポーネントやディレクティブが適用されているのかが分かりにくいという開発者体験上の課題も存在している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Selectorless: テンプレートでのクラス直接参照",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これらの課題を解決するために検討されているのが \"Selectorless\" というアプローチである。これは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "テンプレート内でHTMLセレクタを使用する代わりに、コンポーネントやディレクティブのクラス名を直接参照する",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " というシンプルなアイデアに基づいている。これは、TypeScriptのコード内でimportしたクラスを直接利用するのと同じ直感的なアプローチである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angularの公式ロードマップでも、SelectorlessはStandalone Componentのエルゴノミクス向上とボイラープレート削減を目指すものとして以前から掲げられていた。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "quote",
      "text": [
        {
          "type": "text",
          "text": "Selectorless\nTo reduce boilerplate and improve the ergonomics of standalone components we are now designing a solution that will make selectors optional. To use a component or directive you'll be able to import it and directly use it in a component's template.\nWe're still in early stages of planning selectorless. We'll share a request for comments when we have an early design and we're ready for next steps.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://angular.dev/roadmap#future-work-explorations-and-prototyping",
          "href": "https://angular.dev/roadmap#future-work-explorations-and-prototyping",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Selectorlessのコンセプトをサンプルコードで理解しよう。次のようなコンポーネントを想像してほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "greeting.ts",
      "text": "@Component({\n  selector: 'app-greeting',\n  template: `<p>Hello, {{ name }}!</p>`,\n})\nexport class Greeting {\n  name = input('World');\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "上述の通り、Standalone Componentの導入でNgModuleの記述は不要になったが、テンプレート内での利用には依然としてセレクタが必要であった。この",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Greeting",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "コンポーネントを利用する親コンポーネントでは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "imports",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "配列にコンポーネントを読み込んだうえでテンプレート中では",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<app-greeting>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "セレクタで参照する必要がある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "app.ts",
      "text": "import { Greeting } from './greeting';\n\n@Component({\n\tselector: 'app-root',\n  imports: [Greeting],\n  template: `\n    <app-greeting name=\"World\" />\n  `,\n})\nexport class App {}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Selectorlessの具体的なシンタックスは今後のRFCで提案される見込みだが、現在検討中の案では次の例のように、テンプレート内でクラス名を直接参照できるようになる見込みだ。このように、セレクタの記述が不要になることで、より簡潔で直感的なテンプレート記述が期待される。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "app.ts (selectorless)",
      "text": "import { Greeting } from './greeting';\n\n@Component({\n\tselector: 'app-root',\n  imports: [Greeting],\n  template: `\n    <Greeting name=\"World\" />\n  `,\n})\nexport class App {}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "現在、Selectorlessはまだ初期計画段階にあり、プロトタイプの実装が進められている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/angular/angular/pull/60724/files#diff-6398e1ffddbcd90e365c15608a4652a0eac83e7c442afe05cc70debcc93e5322"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これらの実装はあくまでもプロトタイプで、未確定のデザインに基づくものであり、具体的な設計はこれから進められる。Signalsなど過去の提案と同じように、Angularチームは Request for Comments (RFC) を公開し、コミュニティからのフィードバックを求める予定だ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Selectorlessは、Angular開発における新たなコンポーネント実装のコンセプトである。Standalone Componentの定着によりフレームワークが解決すべき課題が次のステージへ進んでいるとも言える。セレクタという抽象化を取り除くことで、開発効率やアプリケーションのパフォーマンス、そしてコードの可読性を向上させることが期待される。おそらく5月にリリースされるAngular v20の期間には、もっと具体的な姿が見えてくるだろう。今後の動向にぜひ期待しよう。",
          "annotations": {}
        }
      ]
    }
  ]
}
