{
  "pageId": "3f8c4b9e-8542-45a2-b428-a333076afb0a",
  "lastEditedAt": "2023-06-03T11:23:00.000Z",
  "slug": "translation-template-driven-form-in-angular-2",
  "properties": {
    "title": "[日本語訳] Template-driven Forms in Angular 2",
    "date": "2016-04-10T00:00:00.000Z",
    "tags": ["tech", "Angular", "translation"]
  },
  "content": [
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Original: ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "Template-driven Forms in Angular 2",
              "href": "http://blog.thoughtram.io/angular/2016/03/21/template-driven-forms-in-angular-2.html",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Written by: ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "Pascal Precht",
              "href": "http://twitter.com/PascalPrecht",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Translated at: 04/07/2016",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "divider"
    },
    {
      "type": "heading",
      "level": 1,
      "text": [
        {
          "type": "text",
          "text": "Angular 2におけるテンプレート駆動フォーム",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angularはフォームを組み立てるのに3つの異なる方法を用意しています。 1つはテンプレート駆動、アプリケーションコードを一切必要としない方法です。 そしてローレベルAPIを使ったDOMを一切必要としないモデル駆動の方法と、 最後はハイレベルのAPI、すなわち",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "FormBuilder",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使ったモデル駆動の方法です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これらの異なる手段からわかるように、目標を達成するための道具がいくつもあるかもしれないのは当然のことです。 しかし混乱を招いてしまうので、この記事ではAngular 2におけるテンプレート駆動のフォームディレクティブについて明らかにしていきます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "まずはユーザーの情報をいくつか質問するシンプルなログインフォームからはじめましょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<form>\n  <label>Firstname:</label>\n  <input type=\"text\">\n\n  <label>Lastname:</label>\n  <input type=\"text\">\n\n  <label>Street:</label>\n  <input type=\"text\">\n\n  <label>Zip:</label>\n  <input type=\"text\">\n\n  <label>City:</label>\n  <input type=\"text\">\n\n  <button type=\"submit\">Submit</button>\n</form>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "私たちはおそらくこんなフォームを何度も作ったことがあります。 ユーザーの名前と住所を入力するコントロールを持ったシンプルなHTMLのフォームで、ここには何の特別なものはありません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "私たちはここで、Angularが連れてきた",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<form>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "というセレクターを持つ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブによって、 実は私たちの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "form",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素がすでに",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のインスタンスになっているということに気づきません。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "はとある理由のために存在します。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は私たちにフォームが持っている現在の状態を伝えてくれます。状態というのは次のものです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "フォームの値のJSON表現",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "フォーム全体のバリデーション状態",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "インスタンスにアクセスする",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ディレクティブのメタデータの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "exportAs",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティを使うと、コンポーネントのテンプレート内でディレクティブのインスタンスにアクセスできます。 例えば、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "draggable",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブを作ったとき、そのインスタンスを次のように",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "draggable",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "という名前で外部に露出できます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Directive({\n  selector: '[draggable]',\n  exportAs: 'draggable'\n})\nclass Draggable {\n  ...\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そして、ディレクティブを使っているテンプレート内でローカル変数の仕組みを使ってアクセスすることができます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "<div draggable #myDraggable=\"draggable\">I'm draggable!</div>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここで",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "myDraggable",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Draggable",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のインスタンスの参照になっていて、 テンプレート全体で他の式の一部として使うことができます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これがどうして面白いのか不思議に思うかもしれません。 そう、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブが",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "として露出されていること、 それは一切アプリケーションコードを書かずに次のようにフォームのインスタンスにアクセスできるということなのです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<form #form=\"ngForm\">  ...</form>"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "フォームの送信と、値へのアクセス",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "さあ私たちはフォームの値とそのバリデーション状態にアクセスできるようになりました。 まずはフォームから送信されたデータをログに表示してみましょう。 私たちがやらなければならないのは、フォームの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "submit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "イベントにハンドラーを追加してフォームの値を渡すことだけです。 実は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のインスタンスには",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "value",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティがあるので、次のようになります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "<form #form=\"ngForm\" (submit)=\"logForm(form.value)\">\n  ...\n</form>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これでもうまく動きますが、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が送信時に発火しているもう一つのイベントがあります。それが",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngSubmit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "です。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngSubmit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "submit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と一見すると全く同じです。 しかし、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngSubmit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "はイベントハンドラーがエラーを出したときには(デフォルトの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "form",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素と同じように)",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "submit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "されないことと、 HTTPのPOSTリクエストを発生させることが保証されています。 ベストプラクティスとして、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "submit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の代わりに",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngSubmit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使ってみましょう！",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<form #form=\"ngForm\" (ngSubmit)=\"logForm(form.value)\">  ...</form>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "さらに、次のようなコンポーネントを用意します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'app',\n  template: ...\n})\nclass App {\n\n  logForm(value: any) {\n    console.log(value);\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このコードを実行すると、フォームの値は空のオブジェクトなのがわかります。 これは正しい挙動です。なぜならまだコンポーネントのテンプレート中に何もしていないからです。 つまり、私たちはフォームにinput要素を登録しなければなりません。そこで",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngControl",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が登場します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "ngControl",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "フォームのインスタンスにコントロールを登録するために、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngControl",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブを使います。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngControl",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は文字列の名前を持ち、コントロールとしての抽象的なインスタンスを作成します。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngControl",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で登録されたすべてのフォームコントロールは自動的に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "form.value",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に現れ、簡単に処理できるようになります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "いくつかのオブジェクトをフォームに追加し、フォームコントロールとして登録してみましょう！",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "<form #form=\"ngForm\" (ngSubmit)=\"logForm(form.value)\">\n  <label>Firstname:</label>\n  <input type=\"text\" ngControl=\"firstname\">\n\n  <label>Lastname:</label>\n  <input type=\"text\" ngControl=\"lastname\">\n\n  <label>Street:</label>\n  <input type=\"text\" ngControl=\"street\">\n\n  <label>Zip:</label>\n  <input type=\"text\" ngControl=\"zip\">\n\n  <label>City:</label>\n  <input type=\"text\" ngControl=\"city\">\n\n  <button type=\"submit\">Submit</button>\n</form>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ばっちりですね！このフォームに適当な値を入力して送信すれば、次のようなログが見られるでしょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "{\n  firstname: 'Pascal',\n  lastname: 'Precht',\n  street: 'thoughtram Road',\n  zip: '00011',\n  city: 'San Francisco'\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "素晴らしいですね！ 私たちはこのJSONオブジェクトを手に入れて、サーバーへ直接送信することができます。 しかしちょっと待ってください？もし次のようなもっと複雑な構造が欲しい時はどうすればいいんでしょうか？",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "{\n  name: {\n    firstname: 'Pascal',\n    lastname: 'Precht',\n  },\n  address: {\n    street: 'thoughtram Road',\n    zip: '00011',\n    city: 'San Francisco'\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "フォームをsubmitした時に手で組み立てる必要があるのでしょうか？ 答えはノーです！Angularはこれをちゃんとカバーしています。 というわけで、次は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngControlGroup",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の紹介です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "ngControlGroup",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ngControlGroup",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "はフォームコントロールをグループ化することができます。 別の言い方をすれば、コントロールグループはコントロールなしには存在できません。 さらに、コントロールグループはその中にあるコントロールがvalidかどうかを引き継いでくれます。 これによって簡単にフォームの中でバリデーションチェックがとても簡単になります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここであなたはこう考えるかもしれません。 「ちょっと待てよ？つまりフォーム自体が1つのコントロールグループなんじゃないか？」 そう、その通りです。フォームは1つのコントロールグループです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "さっそく",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngControlGroup",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使ってコントロールをグループ化してみましょう！",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "<fieldset ngControlGroup=\"name\">\n  <label>Firstname:</label>\n  <input type=\"text\" ngControl=\"firstname\">\n\n  <label>Lastname:</label>\n  <input type=\"text\" ngControl=\"lastname\">\n</fieldset>\n\n<fieldset ngControlGroup=\"address\">\n  <label>Street:</label>\n  <input type=\"text\" ngControl=\"street\">\n\n  <label>Zip:</label>\n  <input type=\"text\" ngControl=\"zip\">\n\n  <label>City:</label>\n  <input type=\"text\" ngControl=\"city\">\n</fieldset>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ご覧のとおり、上のコードでは私たちはフォームコントロールを",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<fieldset>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素でラップし、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngControlGroup",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブを適用しています。 これは特に意味があるわけではなく、代わりに",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<div>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素を使ってもかまいません。 ポイントは、何かしらの要素である必要があり、 そこに",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngControlGroup",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "をつけることで",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に対して登録されるということです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このフォームを送信すれば次のような出力が得られるでしょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "{\n  name: {\n    firstname: 'Pascal',\n    lastname: 'Precht',\n  },\n  address: {\n    street: 'thoughtram Road',\n    zip: '00011',\n    city: 'San Francisco'\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "完璧ですね！ 私たちは望む構造のオブジェクトを一切アプリケーションコードを書かずにフォームだけで構築できました。 しかし不思議に思うかもしれません。Angular 2でフォームの中で",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngModel",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使うとどうなるんでしょうか。 これは良い質問です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "ngModel",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "とは？",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 2における",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngModel",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は双方向データバインディングを実装しているものです。 ただしそれだけではなく、実はもっと多くのケースでシンプルに使えるものです。 テンプレート駆動のフォームに",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngModel",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "をどう使えばいいのでしょうか？そもそも",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngModel",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使えるのでしょうか？ もちろん使えます！",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngControl",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngControlGroup",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が提供するのはフォームの構造化と、フォームの値へのアクセスですが、 一方で",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngModel",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が提供するのは双方向データバインディングのためのドメインモデルです。 言い方を変えれば、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "form.value",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "はサーバーに送りたいデータであり、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngModel",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "はフォームにデータを与えることができますが、これらは同時に使うことができます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ngControl",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngModel",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "がバインドできるようになっています。 つまり次のように書くことが出来ます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "<fieldset ngControlGroup=\"name\">\n  <label>Firstname:</label>\n  <input type=\"text\" ngControl=\"firstname\" [(ngModel)]=\"firstname\">\n  <p>You entered {{firstname}}</p>\n\n  <label>Lastname:</label>\n  <input type=\"text\" ngControl=\"lastname\" [(ngModel)]=\"lastname\">\n  <p>You entered {{lastname}}</p>\n</fieldset>"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "もっと知りたい方は",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "もちろんここで述べたのはフォームを作る方法の氷山の一角です。 バリデーションについてや、入力されたデータに対してエラーメッセージをどう表示するかなど、話していないことがたくさんあります。 それらについてはまた別の記事で紹介します。 ただしカスタムバリデーターを作る方法については",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "この記事",
          "href": "http://blog.thoughtram.io/angular/2016/03/14/custom-validators-in-angular-2.html",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "を見てください。",
          "annotations": {}
        }
      ]
    }
  ]
}
