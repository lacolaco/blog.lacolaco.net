{
  "pageId": "11a3521b-014a-8026-b45e-fb2c2fc99ee0",
  "lastEditedAt": "2024-10-09T09:32:00.000Z",
  "slug": "angular-v19-effect-changes",
  "locale": "ja",
  "properties": {
    "title": "Angular v19: effect() の変更点",
    "date": "2024-10-09T09:14:00.000Z",
    "category": "Tech",
    "tags": ["Angular", "Signals"],
    "canonicalUrl": "https://zenn.dev/lacolaco/articles/angular-v19-effect-changes"
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular v18では開発者プレビューとして公開されていた",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数の仕様は、コミュニティからのフィードバックを受けてv19で仕様を変更することになった。この記事ではそのv18からv19にかけて",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数について変わることをまとめる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angularチームの公式ブログにも記事が投稿されているので、そちらをすでに読んでいれば内容は大きく変わらない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://blog.angular.dev/latest-updates-to-effect-in-angular-f2d2648defcd"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "これはAngularの破壊的変更ではない",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "念の為に最初に書いておくが、そもそも",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数は開発者プレビューとして公開されているものであり、一度もAngularの安定APIになったことはない。Angularの開発ポリシーでは安定APIについてのルールが定められているが、開発者プレビューはその枠の外にある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "quote",
      "text": [
        {
          "type": "text",
          "text": "このドキュメントに記載されているポリシーと慣行は、開発者プレビューとしてマークされたAPIには適用されません。このようなAPIは、フレームワークの新しいパッチバージョンでも、いつでも変更される可能性があります。チームは、開発者プレビューAPIを使用する利点が、セマンティックバージョンの通常の使用方法ではない破壊的変更のリスクに見合うかどうかを自力で判断する必要があります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://angular.jp/reference/releases#developer-preview"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "したがって、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数の仕様は互換性なく変更されるが、元の振る舞いと共存する非推奨期間などはなく、v19.0.0のリリースで完全に切り替わる。開発者プレビューのAPIを利用するということは、こういった変更が入ることを受け入れることとセットである。リスクはあるが、開発者プレビューのAPIを早く取り入れてフィードバックを送ることで、より使いやすいものに洗練させるコントリビューションのチャンスでもある。今回の変更は、まさに人柱として",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数を使い倒した先行者たちの貢献の結果である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "大きな変更点",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数の振る舞いに大きな変更点が2つある。ひとつは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数のコールバック中で別のSignalへの同期的書き込みが許可されるようになったこと。もうひとつはAngularのコンポーネント・ディレクティブの中で作られたEffectが変更検知の中で実行されるようになったことだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "副作用としてのSignalへの同期的書き込みの許可",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "v18までは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数内でSignalへ同期的な書き込みをすることはデフォルトで禁止されていた。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "const val = signal(0);\n\neffect(() => {\n  val.set(1); // => error!!\n});"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これが禁止されている理由は大きく2つある。ひとつは無限ループを防ぐためである。Effectはそのコールバック関数内で読み取っているSignalの変更でトリガーされるため、読み取りと書き込みが一緒に行われると自分自身をトリガーしつづけてしまうおそれがあった。もうひとつは、Angularチームの設計思想において、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の内部でSignalへ同期的に書き込みをするケースのほとんどは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "computed()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で代替可能であり、そのほうが好ましいという理由だ。AngularチームのテクニカルリードであるAlex Rickabaughが解説している動画がわかりやすい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://www.youtube.com/watch?v=aKxcIQMWSNU"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "というわけで、Signalへの同期的書き込みは非推奨とされているが、開発者の責任で明示的に許可することはできた。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "allowSignalWrites",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "フラグを有効にするか、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "untracked()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数でラップするかどちらかによって、同期的な値の書き込みができた。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "const val = signal(0);\n\neffect(() => {\n  val.set(1); // => ok\n}, { allowSignalWrites: true } );\n\neffect(() => {\n  untracked(() => {\n    val.set(1); // => ok\n  });\n};"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "しかし、この制約はAngularチームの当初の意図通りには機能せず、開発者にとって不要なコストとなっていたとして、v19ではこの制約は撤廃された。今後は特に何もしなくても同期的な書き込みができるようになった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/angular/angular/commit/4e890cc5ac6eaa04a6f7ca988908812a65991c14"
    },
    {
      "type": "link_preview",
      "url": "https://github.com/angular/angular/commit/fc59e2a7b7afa491a5ea740284a742574805eb36"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "とはいえ、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "computed()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に置き換え可能な場合はそうすべきであるというAngularチームの考えは変わっておらず、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "をなるべく使わずにすむようリアクティブプログラミングを支援する新たなヘルパーAPIを今後実装していくようだ。ngxtensionの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "derivedAsync",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "などすでにコミュニティで一定のニーズがわかっているものは公式に取り込まれるかもしれない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://ngxtension.netlify.app/utilities/signals/derived-async/"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Effectの呼び出しタイミングの変更",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "v18までは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数で作成されたすべてのEffectは、Angularアプリケーション内でグローバルな単一のマイクロタスクキューで実行タイミングが管理されていた。v19からはEffectがどのように作成されたかによって2つの動作に分かれる。Effectがコンポーネントツリーの中で作成された場合は、その",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Effectの実行タイミングを握るのはそのコンポーネントの変更検知",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "となる。コンポーネントツリーの外で作られた場合はこれまでと同じくアプリケーショングローバルなタスクキューで処理される。これらは内部的には “",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "component effect (view effect)",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "” と “",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "root effect",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "” と呼び分けられる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これにより何が変わるかというと、まずはコンポーネントの変更検知処理と連動することで、Effectの中で",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "コンポーネントのインプットやビュークエリの結果などへのアクセスが安全になる",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "。これまでは変更検知の処理とグローバルのタスクキューの実行順序は不安定だったため、コンポーネントがインプットを初期化するより先に動いてしまったり、逆に遅すぎたりと問題が多かった。ライフサイクルメソッドと同じ実行基盤に乗ったことでEffectがより安全に使えるようになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、Effectの実行順序がコンポーネントの親子関係に影響を受けるようになる。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngOnInit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "などのライフサイクルメソッドと同じく、まず親のEffectが処理され、その後に子のEffectが処理されるようになる。親コンポーネントのEffectによりテンプレートの状態が更新され、子コンポーネントのEffectがトリガーされる、というように",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "変更検知と整合性をとって実行順序が決定される",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "。これによって予期せぬエラーが起きにくくなる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "バージョンアップへの備え",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "以上の2点がv19における",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数の仕様変更である。実行のスケジューリングに関わる内部の根幹部分が書き直されているが、APIそのもののインターフェースは変わらないため、v18までに書かれたコードは少なくとも",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ビルドエラー",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "になることはないだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "問題になるのは、Effectの実行順序に依存したコードを書いていた場合の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ランタイムエラー",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "である。公式ブログの記事によれば、Google社内のコードベースでこの変更をテストしたところ、タイミングの変更がコードに影響を与えたのは約100のケースで、そのうちの約半数はテストのみの修正で済んだらしい。また、いくつかのケースでは実装を修正することでより正しいアプリケーションの動作につながったようだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "v19が正式リリースされるまでにはまだ時間があるが、v18のうちにやっておけることがあるとすれば、まずは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の使用箇所を特定しておくことだろう。その中で、コンポーネントのライフサイクルやレンダリングのタイミングなどに依存していそうな怪しいものがあれば、アプリケーションのデプロイ前に問題を発見できるように、なるべくテストを書いて準備しておこう。そして、v19のRCバージョンがリリースされたタイミングでテストを実行して問題が起きないかを試しておくことだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、振る舞いが変わることがわかった今のタイミングでは新たに",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使うのはやめておき、v19にアップグレードしてから使うように我慢しておくのもいいだろう。",
          "annotations": {}
        }
      ]
    }
  ]
}
