{
  "pageId": "5423020e-64c0-46c3-918a-7c026b580ed2",
  "lastEditedAt": "2023-05-21T05:40:00.000Z",
  "slug": "angular-how-to-use-action-creator-introduced-in-ngrx-v7-4-ja",
  "properties": {
    "title": "NgRx v7.4で導入されるAction Creatorの使い方",
    "date": "2019-04-03T00:00:00.000Z",
    "tags": ["tech", "Angular", "NgRx"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この記事では NgRx v7.4で導入される ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Action Creator",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " 機能と、それを使った実装パターンを紹介します。 Action Creatorはまだ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngrx.io",
          "href": "https://ngrx.io/",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " のドキュメンテーションに含まれていませんが、将来的に追加された後はそちらを参照するようにしてください。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "アクションの定義",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "簡単なカウンターを実装しながら、これまでのNgRxの書き方をおさらいしましょう。 今回のカウンターは、任意の数値を受け取って加算する ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Increment",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と、カウンターをリセットする ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Reset",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " をアクションとして定義します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これまでのアクション定義では、アクションタイプのEnum と、それを持つ各アクションクラス、そしてそのクラス型のUnion Typeを定義するのが一般的でした。 たとえば ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Increment",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Reset",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " というアクションとする ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "counter.actions.ts",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を定義すると次のようになります。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Increment",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は与えられた数だけカウントを進め、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Reset",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は カウントを 0 に戻すためのアクションです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "// counter.actions.ts\nimport { Action } from '@ngrx/store';\n\nexport enum ActionTypes {\n  Increment = '[Counter] Increment',\n  Reset = '[Counter] Reset',\n}\n\nexport class Increment implements Action {\n  readonly type = ActionTypes.Increment;\n\n  constructor(public payload: number) { }\n}\n\nexport class Reset implements Action {\n  readonly type = ActionTypes.Reset;\n}\n\nexport type ActionsUnion = Increment | Reset;"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このファイルはAction Creatorによって次のように書き換えられます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "// counter.actions.ts\nimport { createAction, union } from '@ngrx/store';\n\nexport const increment = createAction(\n  '[Counter] Increment',\n  (payload: number) => ({ payload })\n);\n\nexport const reset = createAction(\n  '[Counter] Reset'\n);\n\nconst actions = union({\n  increment,\n  reset,\n});\n\nexport type ActionsUnion = typeof actions;"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "createAction",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "まずクラス定義を置き換えている ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "createAction",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数について解説します。 この関数は Action Creatorを返します。Action Creatorはアクションオブジェクトを返す関数です。 つまり、ディスパッチするアクションが、クラスをnewしたインスタンスから関数の戻り値に変わります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import * as Actions from './actions';\n\n// アクションクラスのインスタンス\nstore.dispatch(new Actions.Increment(1));\n\n// Action Creator\n// 関数がActionを返す\nstore.dispatch(Actions.increment(1));"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "引数を取るアクションは、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "createAction",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数の第2引数に関数を渡します。 この関数は任意の引数を取り、任意のオブジェクトを返します。 これは従来のアクションクラスにおけるコンストラクタとクラスフィールドの定義と同じです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "increment",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " アクションをもう一度見てみましょう。 第2引数は数値を ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "payload",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 引数として受け取る関数で、戻り値は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "payload",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プロパティをもつオブジェクトです。。 この関数の戻り値は第1引数から作られるアクションオブジェクトとマージされ、 最終的に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "{ type: '[Counter] Increment'', payload }",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " というアクションオブジェクトを作成することになります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "// アクションを作成する\nconst action = Actions.increment(1);\n\n// アクションオブジェクトは `type` を持つ\nconsole.log(action.type); // => '[Counter] Increment'\n// 第2引数で返したオブジェクトがマージされている\nconsole.log(action.payload); // => 1"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ちなみに、これまで Enumで管理していたアクションタイプの文字列は、これまではクラスインスタンスを作らないと ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "type",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が手に入らないためにクラスと別にEnumを置いていましたが、 今後は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "increment.type",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という形でアクセスできるため、いちいちEnumを作る必要はありません。 これについては後述する Reducerの変更部分で詳しくわかります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "union",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "一連のアクションの型を合成した",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ActionsUnion",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 型は、ReducerやEffectなどいくつかの場所で必要となります。 従来のアクションクラスでは、クラス型の Union Type をそのまま扱えたが、関数の場合はその関数の戻り値の型を合成する必要があります。 それを補助してくれるのが NgRxの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "union",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "すべてのAction Creatorを ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "union",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数に渡し、その戻り値を ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "エクスポートせず",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " 宣言します。 なぜエクスポートしないかというと、欲しいのはその型だけだからでです。エクスポートして外部から参照可能にしたところで使いみちはありません。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "actions",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 変数を宣言したら、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "typeof",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を使ってその型を ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Union",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 型として外部にエクスポートします。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "// 戻り値はエクスポートしない\nconst actions = union({\n  increment,\n  reset,\n});\n\n// 型だけエクスポートする\nexport type ActionsUnion = typeof actions;"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Reducerの作成",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Action Creatorを定義したら、次はReducerを対応させます。 もともとアクションクラスとEnumを使っていたときは、次のような Reducerになっていました。 引数に渡されるアクションの型は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ActionsUnion",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 型で、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "action.type",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ActionTypes",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のEnum文字列と照らし合わせるswitch文を記述します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { ActionsUnion, ActionTypes } from './actions';\nimport { State, initialState } from './state';\n\nexport function reducer(state = initialState, action: ActionsUnion): State {\n  switch (action.type) {\n    case ActionTypes.Increment: {\n      return {\n        ...state,\n        count: state.count + action.payload,\n      };\n    }\n    case ActionTypes.Reset: {\n      return {\n        ...state,\n        count: 0,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このReducerに先ほどの アクション定義の変更を反映すると、次のようになります。 変わったのはcase文だけです。 case文で指定するアクションタイプは、Action Creatorがもつ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "type",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プロパティに変わりました。 このように Action Creatorから直接取得できるため、アクション定義側でEnumに分離する必要がなくなっています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { ActionsUnion, increment, reset} from './actions';\nimport { State, initialState } from './state';\n\nexport function reducer(state = initialState, action: ActionsUnion): State {\n  switch (action.type) {\n    case increment.type: {\n      return {\n        ...state,\n        count: state.count + action.payload,\n      };\n    }\n    case reset.type: {\n      return {\n        ...state,\n        count: 0,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Effectsの作成",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "NgRxのEffectsを使って、カウンターの加算とリセットがおこなわれるたびにログを出力する副作用を定義します。 従来のアクション定義では次のようになります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { Injectable } from '@angular/core';\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { tap } from 'rxjs/operators';\n\nimport { ActionsUnion, ActionTypes } from './actions';\n\n@Injectable()\nexport class CounterEffects {\n\n  constructor(private actions$: Actions<ActionsUnion>) { }\n\n  @Effect({ dispatch: false })\n  logger$ = this.actions$.pipe(\n    ofType(ActionTypes.Increment, ActionTypes.Reset),\n    tap(action => {\n      console.log(action);\n    }),\n  )\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これも Reducerと同じように、アクションタイプの部分だけに影響があります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { Injectable } from '@angular/core';\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { tap } from 'rxjs/operators';\n\nimport { ActionsUnion, increment, reset } from './actions';\n\n@Injectable()\nexport class CounterEffects {\n\n  constructor(private actions$: Actions<ActionsUnion>) { }\n\n  @Effect({ dispatch: false })\n  logger$ = this.actions$.pipe(\n    ofType(increment.type, reset.type),\n    tap(action => {\n      console.log(action);\n    }),\n  )\n}"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "アクションのディスパッチ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "最後にアクションをディスパッチする部分です。 従来のアクションクラスでは、クラスインスタンスを生成して次のようにディスパッチしていました。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import * as CounterActions from './state/counter/actions';\n\n@Component({\n  selector: 'my-app',\n  template: `\n     <div>{{ count$ | async }}</div>\n     <button (click)=\"incrementOne()\">+1</button>\n     <button (click)=\"reset()\">Reset</button>\n  `,\n})\nexport class AppComponent {\n\n  count$ = this.store.pipe(\n    select(state => state.counter.count),\n  );\n\n  constructor(private store: Store<AppState>) { }\n\n  incrementOne() {\n    this.store.dispatch(new CounterActions.Increment(1));\n  }\n\n  reset() {\n    this.store.dispatch(new CounterActions.Reset());\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これはすでに説明したとおり、Action Creatorの関数を呼び出した戻り値をディスパッチするように変わります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import * as CounterActions from './state/counter/actions';\n\n@Component({\n  selector: 'my-app',\n  template: `\n     <div>{{ count$ | async }}</div>\n     <button (click)=\"incrementOne()\">+1</button>\n     <button (click)=\"reset()\">Reset</button>\n  `,\n})\nexport class AppComponent {\n\n  count$ = this.store.pipe(\n    select(state => state.counter.count),\n  );\n\n  constructor(private store: Store<AppState>) { }\n\n  incrementOne() {\n    this.store.dispatch(CounterActions.increment(1));\n  }\n\n  reset() {\n    this.store.dispatch(CounterActions.reset());\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これですべての置き換えが終わりました。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Action Creatorのメリット",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "クラスで定義されるアクションは、インスタンスを作るまで ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "type",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " にアクセスできない不便さや、形式的に書かなければならないコードの量が多かったのが課題でした。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Action Creatorでは関数で記述できるので、無駄なコードが大きく減ります。 そして機能やテスタビリティは以前と変わらず、特にデメリットはありません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "プロジェクトのNgRxをv7.4にアップデートしたら、基本的にはAction Creatorへの置き換えを進めるべきです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "アクションをクラスではなく関数で定義する Action Creator を作る ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "createAction",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " 関数が導入された",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "ActionTypeのEnumはもう必要ない",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "ReducerやEffects、ディスパッチ側への影響はとても軽微",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この記事で扱ったカウンターアプリケーションが実際に動作する様子を確認してみてください。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://stackblitz.com/edit/angular-pj4f4p?file=src%2Fapp%2Fapp.component.ts",
          "href": "https://stackblitz.com/edit/angular-pj4f4p?file=src%2Fapp%2Fapp.component.ts",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        }
      ]
    }
  ]
}
