{
  "pageId": "73231349-3482-40fc-a317-e3cd68e612a3",
  "lastEditedAt": "2023-12-30T10:10:00.000Z",
  "slug": "angular-v6-tree-shakable-di",
  "properties": {
    "title": "Angular v6で導入されるTree-Shakable DIの紹介",
    "date": "2018-03-01T00:00:00.000Z",
    "tags": ["Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "追記: 最新では ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "scope",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "providedIn",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に変わってます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/angular/angular/commit/db56836425fe200f42e299bce3e76bca0a6021e9#diff-8b97739be3c64aaadb195fe80787c702"
    },
    {
      "type": "divider"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular v6 では、これまでの Dependency Injection の仕組みを Tree-Shaking 可能にするためのオプション機能を追加します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "概要を説明するために簡単なスライドを作りました。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://slides.com/laco/angular-v6-tree-shakable-di/embed"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "現状の問題",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "現在の Dependency Injection の仕組みでは、Injection されるサービス（",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Injectable",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "）は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Provider",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "の登録と、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Injector",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "からの参照の 2 箇所で、静的に参照される必要があります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": true,
      "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/l/lacolaco/20180301/20180301145501.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "たとえどこからも Injection されないサービスでも、Provider を登録する時点で NgModule からの参照が発生するため、ビルド時に不要なコードをふるい落とす",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Tree-Shaking",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": "の対象にすることができませんでした。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "新しいアプローチ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular v6 では、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@Injectable",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "デコレータに機能追加をおこない、参照の方向を変更することで Tree-Shaking 可能な Injectable を作成できるようになりました。 次のように",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@Injectable",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "デコレータの引数に、Injection を解決するスコープとなる NgModule のクラスを指定します。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "useClass",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "相当の場合はそのままで、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "useFactory",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "useValue",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "相当の場合はファクトリ関数を同時に設定できます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": true,
      "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/l/lacolaco/20180301/20180301145857.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このようにすることで、NgModule から参照される側だった Injectable が、NgModule を参照する側になります。 つまり、その Injectable を参照する Component や他の Injectable が存在しなければ、どこからも参照されず Tree-Shaking 可能になります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": true,
      "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/l/lacolaco/20180301/20180301150137.png",
      "caption": ""
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "何が嬉しいか",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "言わずもがな、使われていないサービスのぶんだけバンドルサイズを削減できる点が最大の利点です。 アプリケーションコード中には作成して使われないサービスというのは少ないと思いますが、 たとえば ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "BrosersModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "CommonModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "、あるいは Angular Material の NgModule などに providers として登録されているサービスが Tree-Shaking 可能になれば、 アプリケーションから参照している部分だけのコードをバンドルに含められるようになります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、アプリケーションコードにおいても AppModule に溢れかえる大量の providers 地獄を解決できるかもしれません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "かならず対応する必要はありませんが、シビアなバンドルサイズを要求されるプロダクトにとっては嬉しい新機能となるでしょう。",
          "annotations": {}
        }
      ]
    }
  ]
}
