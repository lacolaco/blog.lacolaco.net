{
  "pageId": "544a0dd6-6f0b-4c7d-ae3e-7f5ba21a6320",
  "lastEditedAt": "2023-12-30T10:09:00.000Z",
  "slug": "angular-atomic-design-and-ngmodule",
  "properties": {
    "title": "AngularにおけるAtomic DesignとNgModule",
    "date": "2019-07-11T00:00:00.000Z",
    "tags": ["Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular の UI コンポーネントにおける NgModule の粒度についての現在の考え。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これならうまくいくのではないかという仮説であり、何度か実践はしているが自信を持って正解であるとはまだ言えない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "結論",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次のようなディレクトリ構造と NgModule（ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "xxx.module.ts",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ）の配置になる。要点は以下の点。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "ライブラリ化できるのは Atoms と Molecules まで。Organisms はアプリケーション側の関心とする。",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Atoms も Molecules も個別 Module する。",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "  src\n  └ lib\n  　 ├ atoms\n  　 │ ├ button\n  　 │ │ ├ button.component.{ts,html,scss}\n  　 │ │ └ button.module.ts\n  　 │ └ input\n  　 │ 　 ├ input.component.{ts,html,scss}\n  　 │ 　 └ input.module.ts\n  　 ├ molecules\n  　 │ └ search-form\n  　 │ 　 ├ search-form.module.ts\n  　 │ 　 └ search-form.component.{ts,html,scss}\n  　 └ app\n  　 　 ├ app.module.ts\n  　 　 └ shared\n  　 　 　 └ header\n  　 　 　 　 ├ header.module.ts\n  　 　 　 　 └ header.component.{ts,html,scss}"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "ライブラリとアプリケーションの境界",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ライブラリとアプリケーションの境界は、アプリケーションが実現するユースケースに関心をもつかどうかで考えられる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Brad Frost の Atomic Design",
          "href": "http://bradfrost.com/blog/post/atomic-web-design/",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "に素直に従えば、Atoms は HTML 要素のようなプリミティブなもので、Molecules は Atoms をいくつか組み合わせた単一責任原則に従う UI パーツである。これらはコンテキストによらずどこでも使えるジェネリックな存在で、ライブラリ化する意味がある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "一方で Orgamisms より上の階層はアプリケーションのコンテキスト、ユースケース、ドメインに大いに影響を受ける。これはライブラリ化することに意味はなく、アプリケーションの中で定義されているべきものだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "乱暴ではあるし例外もあるが、アプリケーションの中で定義するのは Organisms 以上のものだけだと決めつけてもよいくらいだと考えている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Atoms と NgModule",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "NgModule 単位でのコード分割と Lazy Loading を考えれば、それぞれの NgModule にとって必要な Molecules だけを import するほうがいい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ButtonModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " や ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "LabelModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のように分割しよう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Molecules と NgModule",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Atoms と同様に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MoleculesModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は認められない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Organisms と NgModule",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "同じ理由で、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "OrgamismsModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " などもってのほかである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "アプリケーション側で定義されるが、複数の箇所で再利用されるものであればそれも ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "HeaderModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のように NgModule 化しておけばコード分割しやすくなる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "考察",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このような分割を置くと、あるコンポーネントを作るときに分類に悩むことが減る。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "はじめの問いは、「この UI パーツはアプリケーションのドメイン、ユースケースに依存するか」ということである。依存するならアプリケーション側であり、依存しないならライブラリ側である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そして次にライブラリ側であれば、それが独立して存在できるか、できないか、という問いになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここまで来るとだいぶ Atomic Design とはずれてくるので、いっそ Atomic Design からは離れて分類名を変えてしまってもいいだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "懸念事項",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Dialog や Table はコンテキストを持たないように思えるが存在としては Organisms であるようにも感じる。ライブラリ側の Organisms というのも存在するのか？",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "もはや Molecules には「Atoms ではない」という意味だけを与えてしまえば Molecules で吸収できる。 Compounds（化合物）という語彙を与えてもいいかもしれない。",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
