{
  "pageId": "69879d3d-0144-4aa2-9d3b-128b15689a53",
  "lastEditedAt": "2023-08-19T12:04:00.000Z",
  "slug": "inside-laco-feed",
  "properties": {
    "title": "ブックマークをSNSに投稿する #laco_feed を支える仕組み",
    "date": "2023-08-19T10:56:00.000Z",
    "tags": ["Cloudflare", "Notion", "日記"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Notion Web Clipper",
          "href": "https://www.notion.so/ja-jp/web-clipper",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " でブックマークしたURLを X (以下 Twitter) に自動投稿することを長らくやっている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://twitter.com/search?q=%23laco_feed&f=live",
          "href": "https://twitter.com/search?q=%23laco_feed&f=live",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これまでは自動化に Zapier を使って完結していたのだが、SaaSを使ってTwitterに自動投稿することが難しくなってきた。今年のはじめにはZapierのプレミアムプランが必要になったが、ついに8月末で完全に機能が消えることになった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://help.zapier.com/hc/en-us/articles/18657531069965/"
    },
    {
      "type": "tweet",
      "url": "https://twitter.com/laco2net/status/1692672853580407093"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "代わりのSaaSを探してみたがなかなか見つからなかったのと、Misskeyへのクロスポストを最近別の仕組みで実装していたのと統一して、ついでに Bluesky にもクロスポストしようということで、全部作ることにした。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "作ってみたら一日で出来上がったので、その記録。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "全体像",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "/images/inside-laco-feed/227fd8d6-d5f7-461b-a7ee-60a71489b525/PXL_20230819_1114158082.jpg",
      "caption": []
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Cloudflare Workers",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "主役。すべてここで動いている。しかも無料枠。",
                      "annotations": {}
                    }
                  ],
                  "children": []
                },
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "Cron Trigger機能で、5分ごとに実行することにしている",
                      "annotations": {}
                    }
                  ],
                  "children": []
                },
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "各種APIの秘密鍵やトークンは全部 Cloudflare Worker 側に保存して暗号化したものを流し込んでいる",
                      "annotations": {}
                    }
                  ],
                  "children": [
                    {
                      "type": "bulleted_list",
                      "items": [
                        {
                          "type": "bulleted_list_item",
                          "text": [
                            {
                              "type": "text",
                              "text": "https://developers.cloudflare.com/workers/configuration/environment-variables/#add-secrets-to-your-project",
                              "href": "https://developers.cloudflare.com/workers/configuration/environment-variables/#add-secrets-to-your-project",
                              "annotations": {}
                            }
                          ],
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Notion",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "ブックマークしたURLはここに保存されている。",
                      "annotations": {}
                    }
                  ],
                  "children": []
                },
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "Cloudflare WorkersからNotion APIを呼び出して使用する",
                      "annotations": {}
                    }
                  ],
                  "children": []
                },
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "クロスポスト処理が済んだアイテムはNotion DBの方に処理済みフラグを書き込んで、複数回処理されないようにしている",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "クロスポスト先",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "Misskey API",
                      "annotations": {}
                    }
                  ],
                  "children": []
                },
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "Bluesky (AT Protocol)",
                      "annotations": {}
                    }
                  ],
                  "children": []
                },
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "Twitter API v2 (無料プラン)",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "別にOSSとして使えるとは思っていないが、隠す理由が特にないので公開レポジトリにした。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/lacolaco/feed2social"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "クロスポスト実装",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Misskey",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Misskey のAPIは、ActivityPubのメンタルモデルがだいたいわかっていれば、あとはエンドポイントごとのドキュメントを読めば特に困ることはない。Misskey APIの認証はシークレットトークンをリクエストボディの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "i",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " フィールドにセットすればよい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://misskey-hub.net/docs/api/endpoints/notes/create.html"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "/**\n * Post a message to Misskey.\n *\n * @see https://misskey-hub.net/docs/api/endpoints/notes/create.html\n */\nexport async function createMisskeyNote(item: FeedItem, authToken: string) {\n  const text = `🔖 \"${item.title}\" ${item.url} #laco_feed`;\n  await fetch('https://misskey.io/api/notes/create', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ text: text, i: authToken }),\n  });\n}"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Bluesky (AT Protocol)",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Bluesky の機能はBlueskyが準拠しているAT Protocolによって呼び出せる。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@atproto/api",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " パッケージを使えば特に困ることはない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "認証については、Blueskyの設定画面で発行できる “App Password” を使い、パスワード認証を行う。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "参考にした記事: ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://www.memory-lovers.blog/entry/2023/07/09/152224"
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { BskyAgent, RichText } from '@atproto/api';\n\nconst bsky = new BskyAgent({ service: 'https://bsky.social' });\n\n/**\n * Post a message to Bluesky.\n */\nexport async function createBlueskyPost(item: FeedItem, identifier: string, password: string) {\n  await bsky.login({ identifier, password });\n\n  const text = `🔖 \"${item.title}\" ${item.url}`;\n\n  const rt = new RichText({ text });\n  await rt.detectFacets(bsky);\n\n  await bsky.post({ text: rt.text, facets: rt.facets });\n}"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Twitter ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "かなり苦戦した。ふつうの Node.js サーバーだったらもっと簡単だったが、Cloudflare Workersのエッジ環境であることで、クロスポスト先の中で一番OSSも豊富なはずのTwitter APIだが、全然先人の実装を利用できなかった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "投稿の文字列長を調整するのはazuさんの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "tweet-truncator",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を使わせてもらった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/azu/tweet-truncator"
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import encBase64 from 'crypto-js/enc-base64';\nimport hmacSha1 from 'crypto-js/hmac-sha1';\nimport OAuth from 'oauth-1.0a';\nimport { truncate } from 'tweet-truncator';\n\n/**\n * Post a message to Twitter.\n *\n * @see https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n */\nexport async function createTwitterPost(\n  item: FeedItem,\n  credentials: { consumerKey: string; consumerSecret: string; accessToken: string; accessSecret: string },\n) {\n  const text = truncate(\n    { title: item.title, url: item.url, tags: ['#laco_feed'] },\n    {\n      defaultPrefix: '🔖',\n      template: '\"%title%\" %url% %tags%',\n      truncatedOrder: ['title'],\n    },\n  );\n\n  const req: OAuth.RequestOptions = {\n    url: 'https://api.twitter.com/2/tweets',\n    method: 'POST',\n    data: { text },\n    includeBodyHash: true, // v1.1における `include_entities` に相当\n  };\n\n  const oauth = new OAuth({\n    consumer: { key: credentials.consumerKey, secret: credentials.consumerSecret },\n    signature_method: 'HMAC-SHA1',\n    hash_function(base_string, key) {\n      return hmacSha1(base_string, key).toString(encBase64);\n    },\n  });\n\n  const oauthHeader = oauth.toHeader(oauth.authorize(req, { key: credentials.accessToken, secret: credentials.accessSecret }));\n  const resp = await fetch(req.url, {\n    method: req.method,\n    headers: {\n      'Content-Type': 'application/json',\n      ...oauthHeader,\n    },\n    body: JSON.stringify(req.data),\n  });\n\n  if (!resp.ok) {\n    const body = await resp.text();\n    console.error(body);\n    throw new Error(`failed to post to Twitter`);\n  }\n}"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Cloudflare Workers では ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "node:crypto",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が使えない問題",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Twitter API v2にリクエストを送るにあたり、OAuth 1.0aに準拠する必要があったが、これに手こずった。なぜかというと、npmに上がっている多くのTwitter APIクライアント実装や、OAuth 1.0実装の多くがNode.jsの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "crypto",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " モジュールに依存しているからだ。具体的には署名を作成する際のハッシュ形式が ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "HMAC-SHA1",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " なので、その実装に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "crypto.createHmac",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が使われているわけだが、これが Cloudflare Workers にはない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Cloudflare Workers には ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "node_compat",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という機能があり、Node.js APIをポリフィルしてくれるのだが、残念ながら ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "crypto.createHmac",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は含まれていなかった。Cloudflare Workersは WebCrypto APIのサポートはあるのだが、このAPIでは HMAC-SHA1 形式でハッシュ生成 (digest) することはできなさそうだった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://developers.cloudflare.com/workers/runtime-apis/nodejs/"
    },
    {
      "type": "link_preview",
      "url": "https://developers.cloudflare.com/workers/runtime-apis/web-crypto/#supported-algorithms"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "結局どうしたかというと、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "oauth-1.0a",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " というライブラリと、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "crypto-js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " というライブラリの合わせ技で解決できた。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://www.npmjs.com/package/oauth-1.0a"
    },
    {
      "type": "link_preview",
      "url": "https://www.npmjs.com/package/crypto-js"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "oauth-1.0a",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は OAuth 1.0aのヘッダ生成や署名の実装をしているが、ハッシュ関数部分だけ外から注入するように設計されている。なので、このライブラリは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "crypto",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に依存しておらず Worker でも使える。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "あとは HMAC-SHA1 形式のハッシュ生成ができる実装があればよいので、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "crypto-js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " からその部分を借りた。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "crypto-js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は Node.js でも browser でも使える、ということは当然 Node.js の標準モジュールには依存していないのである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "所感",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "自分で作れば無料！",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "どれもカテゴリとしては近いWebサービスなのに、認証方法もAPIのデザインも全然違うのでクロスポスト実装すると多様性が感じられる。",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
