{
  "pageId": "f1218e5c-5190-4cf5-b6e1-c27896a9862a",
  "lastEditedAt": "2023-05-21T05:16:00.000Z",
  "slug": "angular-single-state-stream-pattern",
  "properties": {
    "title": "AngularコンポーネントにおけるSingle State Streamパターン",
    "date": "2019-07-11T00:00:00.000Z",
    "tags": ["tech", "Angular", "設計"]
  },
  "content": [
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Single State Stream パターン",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これはAsync Pipeを活用したリアクティブなAngularコンポーネントを作る上で、汎用性の高い実装パターンである。 テンプレートでレンダリングする",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "状態",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "を",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "単一",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ストリーム",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "として扱うため、私はこれを ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Single State Stream",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "パターンと名付けた。Sが3つで覚えやすい。 過去にも何度か発表で触れているが、改めて言語化して誰からも参照可能な状態にしておく。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "同じようなアイデアはng-conf 2019でDeborah Kurataさんも軽く紹介している。こちらでは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "vm$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という名前で複数のストリームを合成しているが、ng-conf後にDeborahさんに話したところこれはSingle State Streamパターンと全く同じものだった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "youtube",
      "videoId": "Z76QlSpYcck"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ngConf 2019: Data Composition",
          "href": "https://docs.google.com/presentation/d/11tlfhUoyZ6WG7-UyYE3YsfiaZcy7ijPO6hA4CFKaCn8/preview?slide=id.g550602cfc5_2_141",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Code Example",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コードを見て理解するのが一番早い。次の例ではコンポーネントが直接BehaviorSubjectで状態を管理しているが、これはSingle State Streamパターンをわかりやすく説明するためである。まともなアプリケーションであれば適切に状態管理のサービスに移譲する。そのパターンのコード例は後述する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "type AppComponentState = {\n  user: User | null;\n  userFetching: boolean;\n}\n\nconst initialState: AppComponentState = {\n    user: null,\n    userFetching: false,\n};\n\n@Component({\n  template: `\n<ng-container *ngIf=\"state$ | async as state\">\n\n    <ng-container *ngIf=\"state.userFetching; else showUser\">\n        <loading-spinner></loading-spinner>\n    </ng-container>\n\n    <ng-template #showUser>\n        <user-display [user]=\"state.user\"></user-display>\n    </ng-template>\n\n</ng-container>\n  `\n})\nexport class AppComponent {\n  readonly state$ = new BehaviorSubject<AppComponentState>(initialState);\n\n    fetchUser() {\n        this.setState({ user: null, userFetching: true });\n\n        this.userService.fetchUser().subscribe(user => {\n            this.setState({ user, userFetching: false });\n        }, error => {\n            this.setState({ user: null, userFetching: false });\n        });\n    }\n\n  setState(state: AppComponentState) {\n        this.state$.next(state);\n    }\n}"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "ComponentStateと ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state$",
          "annotations": {
            "code": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そのコンポーネントのテンプレートに必要な状態を定義した型を作る。上記の例では ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppComponentState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 型。この型のObservableをコンポーネントに ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プロパティとして宣言する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "単一のストリームにすることにより、ある時点での複数の非同期的な値の組み合わせをスナップショット化できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " をテンプレートの最上位で ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state$ | async as state",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " することでその内部のテンプレートに同期的な ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を注入できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この実装パターンは、テンプレート全体をひとつのStatelessな関数のように捉えることができるところが良い。いわばReactの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "render",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数のように、引数として ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が与えられることでその状態に対応したビューを描画する。いわゆる ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UI = f(State)",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 的なアーキテクチャと相性がいい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "// 擬似的な再現コード\nconst AppComponent = (state: AppComponentState) => {\n    if (state.userFetching) {\n        return <loading-spinner />;\n    } else {\n        return <user-display user={state.user} />;\n    }\n};"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Storeサービスとの併用",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "上述の例ではコンポーネントが直接BehaviorSubjectを管理していたが、NgRxのStoreのような状態管理レイヤーのサービスと併用すると次のような実装パターンになる。テンプレートはまったく変わらず、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の作り方が変わるだけである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "type AppComponentState = {\n  user: User | null;\n  userFetching: boolean;\n}\n\n@Component({\n  template: `\n<ng-container *ngIf=\"state$ | async as state\">\n\n    <ng-container *ngIf=\"state.userFetching; else showUser\">\n        <loading-spinner></loading-spinner>\n    </ng-container>\n\n    <ng-template #showUser>\n        <user-display [user]=\"state.user\"></user-display>\n    </ng-template>\n\n</ng-container>\n  `\n})\nexport class AppComponent {\n  readonly state$: Observable<AppComponentState>;\n\n    constructor(private store: Store<AppState>) {\n        // ComponentStateへのマッピング\n        this.state$ = this.store.select(state => ({\n            user: state.user.value,\n            userFetching: state.user.fetching,\n        }));\n    }\n\n    fetchUser() {\n        this.store.dispatch(startUserFetching());\n\n        this.userService.fetchUser().subscribe(user => {\n            this.store.dispatch(finishUserFetching(user));\n        }, error => {\n            this.store.dispatch(finishUserFetching(null));\n        });\n    }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "あるいは、単一データストアではなく分散型の場合は、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "combineLatest",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を使った形にもできる。（この例では不自然だが）もし ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "user$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "userFetching$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を別々に管理しているなら次の例のように合成すれば、これもテンプレートには全く影響がない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "type AppComponentState = {\n  user: User | null;\n  userFetching: boolean;\n}\n\n@Component({\n  template: `\n<ng-container *ngIf=\"state$ | async as state\">\n\n    <ng-container *ngIf=\"state.userFetching; else showUser\">\n        <loading-spinner></loading-spinner>\n    </ng-container>\n\n    <ng-template #showUser>\n        <user-display [user]=\"state.user\"></user-display>\n    </ng-template>\n\n</ng-container>\n  `\n})\nexport class AppComponent {\n  readonly state$: Observable<AppComponentState>;\n\n    constructor() {\n        this.state$ = combineLatest(\n            [user$, userFetching$],\n            ([user, userFetching]) => ({ user, userFetching }), // Destructuring\n        );\n    }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここまで見たように、Single State Streamパターンではコンポーネントとテンプレートの間に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が挟まることである種のクッションとして働き、アプリケーションの状態管理がどのように変わっても、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のインターフェースさえ維持されていればコンポーネントのレンダリングには影響を与えないようになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "言い換えれば、どのようなアプリケーションのアーキテクチャにおいてもSingle State Streamパターンは適合する。特に、Container / Presentational のようなコンポーネント設計をしている場合には、Containerコンポーネントにとてもよくマッチする。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、コンポーネントをテストするときにも ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の値を更新するだけでよいので、テンプレートのレンダリング結果をユニットテストしやすい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Single State Streamパターンのデメリット",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ComponentStateが複雑になる、つまり ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のプロパティが増えてくると少し問題が出てくる。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の値が変わるたびにテンプレート全体の評価が行われるため、互いに関連性の少ないプロパティが増えてくると無駄な計算処理が増えてしまう。 この問題は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@Input",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で値を受け取る側のコンポーネントのChange Detection Strategyを ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "OnPush",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " にすることで大幅に緩和できる。Async Pipeがある部分だけはどうしようもないが、それぞれの子コンポーネントの先が再評価されなければパフォーマンスにはほぼ影響はない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "下記の例では、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "[state.foo](http://state.foo)",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " だけが変化した場合でも ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " オブジェクトの値が変われば当然 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ng-container",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 内の再評価が行われる。OnPushを使わなければ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "[state.bar](http://state.bar)",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に変化がなくても ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<bar-display>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<baz-display>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " までもが一緒に再評価されてしまうが、OnPushを使えば ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state.bar",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が変わらない限り ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<bar-display>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は再評価されない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<ng-container *ngIf=\"state$ | async as state\">\n\n    <foo-display [value]=\"state.foo\"></foo-display>\n\n    <bar-display [value]=\"state.bar\"></bar-display>\n\n    <baz-display [value]=\"state.baz\"></baz-display>\n\n</ng-container>"
    }
  ]
}
