{
  "pageId": "bc3234bd-380a-4b3b-9f5a-d78c9b784cbe",
  "lastEditedAt": "2023-05-21T03:14:00.000Z",
  "slug": "merge-graphql-schemas",
  "properties": {
    "title": "merge-graphql-schemasを使ってGraphQLのスキーマファイルを結合する",
    "date": "2018-02-18T00:00:00.000Z",
    "tags": ["tech", "GraphQL"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "GraphQL Schemaをファイル分割してドキュメンテーションする",
          "href": "../modular-graphql-schema-documentation/",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "^の続きです。 前回は glob と fs を使って",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "schema/**/*.gql",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ファイルを結合し、graphdoc を使ってドキュメンテーションページを生成する記事を投稿しました。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "まったく同じ目的のために ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "merge-graphql-schemas",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という npm パッケージがあったので、これを使ってドキュメンテーションのビルドスクリプトを改良しました。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "パッケージのインストール",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "前回の状態から、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "glob",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "をアンインストールして、代わりに",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "merge-graphql-schemas",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "をインストールします。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "$ yarn remove glob\n$ yarn add --dev merge-graphql-schemas"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "schema.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の変更",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "前回は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "schema.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "からエクスポートした文字列配列をスキーマとして graphdoc に読み込ませましたが、 今回は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "schema.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を実行することで静的な",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "schema.gql",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ファイルを書き出し、これを graphdoc に渡します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "結合されたスキーマが静的ファイルとして存在することで、他の GraphQL 周辺ツール（コード生成など）への連携が容易になります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "schema.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は次のように書きました。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "fileLoader",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "mergeTypes",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "merge-graphql-schemas",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "パッケージから提供される関数です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "最終的に結合された文字列が",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "schema.gql",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ファイルに書き出されます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "やっていることは前回とだいたい同じですが、この関数でマージされたスキーマは内部でスキーマ単位にソートされていて、ファイル名ではなく",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "type",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "interface",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の名前でソートされているようです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "const path = require(\"path\");\nconst fs = require(\"fs\");\nconst { fileLoader, mergeTypes } = require(\"merge-graphql-schemas\");\n\nconst typesArray = fileLoader(\"schema/**/*.{gql,graphql}\", {\n  recursive: true\n});\n\nconst mergedSchema = mergeTypes(typesArray);\n\nfs.writeFileSync(\"schema.gql\", mergedSchema, { encoding: \"utf8\" });"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "こんな感じで、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "schema",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "から順番に何らかのルールでソートされています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ntype Query {\n  # Return the hero by episode.\n  hero(episode: Episode): Character\n  # Return the Human by ID.\n  human(id: ID!): Human\n  # Return the Droid by ID.\n  droid(id: ID!): Droid\n}\n\ntype Mutation {\n  # Save the favorite episode.\n  favorite(episode: Episode!): Episode\n}\n\n# A character in the Star Wars Trilogy\ninterface Character {\n  id: ID!\n  name: String\n  friends: [Character]\n  appearsIn: [Episode]\n  secretBackstory: String\n}\n..."
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "graphdoc でスキーマを読み込む",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "package.json",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "build",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "スクリプトを次のように変更します。事前に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "schema.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を実行し、吐き出されたファイルを",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "graphdoc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に渡します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "  \"scripts\": {\n    \"build\": \"node schema.js && graphdoc -s schema.gql -o docs -f\"\n  },"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これで元どおりドキュメンテーションが生成されます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "divider"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "schema.gql",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を静的に吐き出して Git 管理に含めておくと、このリポジトリを外部から参照することで簡単に GraphQL のスキーマが得られるので、 クライアントサイドとサーバーサイドそれぞれから参照して利用するのに便利です。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": ".gql",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ファイルなので実装の言語も問いません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この方法で作成したスキーマから TypeScript の型定義を生成してクライアントサイドで利用するのを仕事で試しているので、いい感じに知見が溜まったらまた記事を書きます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "だんだん API 仕様中心開発っぽくなってきたぞ！さらばバックエンド実装にブロックされるフロントエンド開発！",
          "annotations": {}
        }
      ]
    }
  ]
}
