{
  "pageId": "b01d0937-931d-4a74-8ff3-1a416346feab",
  "lastEditedAt": "2023-12-30T09:58:00.000Z",
  "slug": "angular-input-transforms-for-arrays-in-query-params",
  "locale": "ja",
  "properties": {
    "title": "Angular: 配列クエリパラメータのためのInput Transforms",
    "date": "2023-12-04T12:24:00.000Z",
    "category": "Tech",
    "tags": ["Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular v16で導入されたInput Transformsは、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@Input({ transform: transformFn })",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " というように関数を渡すことでインプットプロパティに値がセットされるときの変換処理を宣言できる。典型的なユースケースは、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<button disable>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のようにHTML標準のブール値属性の挙動を模倣したディレクティブやコンポーネントを作成するときにブール値に変換する用途だろう。また、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<img width=\"16\">",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のように数値を受け取る属性も、HTML属性としての振る舞いを模倣するなら文字列から変換することになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Accepting data with input properties • Angular",
          "href": "https://angular.dev/guide/components/inputs#input-transforms",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import {Component, Input, booleanAttribute, numberAttribute} from '@angular/core';\n@Component({...})\nexport class CustomSlider {\n  @Input({transform: booleanAttribute}) disabled = false;\n  @Input({transform: numberAttribute}) number = 0;\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この機能と、同じくAngular v16で導入されたRouterのComponent Input Bindingを併用することで、配列型のデータをクエリパラメータに変換するユースケースが扱いやすくなる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "クエリパラメータ内の配列",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "配列型をクエリパラメータとして表現する形式にはさまざまなパターンがある",
          "href": "https://medium.com/raml-api/arrays-in-query-params-33189628fa68",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "が、Routerの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "navigate()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " メソッドや ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "RouterLink",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で配列型の値をクエリパラメータに指定すると、Angularは同じキーのパラメータを複数回繰り返す ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "key=param1&key=param2",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という形式に変換する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": false,
      "path": "angular-input-transforms-for-arrays-in-query-params/3c6255ea-b6c7-4055-8126-638d2819f0c3/015dec69-c0ca-442b-b996-074e05b2c79a.png",
      "caption": ""
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, RouterLink],\n  template: `\n    <router-outlet />\n    <ul>\n      <li><a routerLink=\"\" [queryParams]=\"{query: null}\" >no query</a></li>\n      <li><a routerLink=\"\" [queryParams]=\"{query: 1}\" >query=1</a></li>\n      <li><a routerLink=\"\" [queryParams]=\"{query: [1]}\" >query=[1]</a></li>\n      <li><a routerLink=\"\" [queryParams]=\"{query: [1,2]}\" >query=[1,2]</a></li>\n    </ul>\n  `,\n})\nexport class App {}\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: Page,\n  },\n];\n\nbootstrapApplication(App, {\n  providers: [provideRouter(routes, withComponentInputBinding())],\n});"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "クエリパラメータに配列型を書き込むのは簡単だが、逆にクエリパラメータから読み取るのは少し工夫が必要になる。なぜかというと、この形式では ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "query=1",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " だけが存在する場合に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "それがもともと配列であったかどうかという情報が失われる",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "からだ。つまり、配列ではない値 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "{ query: 1 }",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と長さ1の配列 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "{ query: [1] }",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " から出力されるクエリパラメータがどちらも同じ結果になってしまうのだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": false,
      "path": "angular-input-transforms-for-arrays-in-query-params/3c6255ea-b6c7-4055-8126-638d2819f0c3/55d5cf5a-3d15-4ba9-87c3-b13dfcc64bde.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このことを念頭に入れておかないと、次のようなナイーブな実装はすぐに実行時エラーを投げるだろう。 Routerの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "withComponentInputBinding()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " オプションによって次の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "query",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " インプットプロパティにはクエリパラメータの値がセットされるが、クエリパラメータに書き込むときに配列だったとしても長さが1であれば単なる文字列になってしまい、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "query.join()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " メソッドは文字列に存在しないためエラーになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  standalone: true,\n  imports: [JsonPipe],\n  template: `\n  <div>query={{ query.join(', ') }}</div>\n  `,\n})\nexport class Page {\n  @Input()\n  query: string[] = [];\n}"
    },
    {
      "type": "image",
      "external": false,
      "path": "angular-input-transforms-for-arrays-in-query-params/3c6255ea-b6c7-4055-8126-638d2819f0c3/47675ee9-41e1-42f9-bded-c27ba802b63a.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、当然だがクエリパラメータがない場合も想定する必要があるため、この ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "query",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " インプットプロパティの本当の型は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "string[] | string | undefined",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " である。しかし誰もこんな型のインプットプロパティを扱いたくはない。そこで冒頭で触れたInput Transformsを使おう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ちなみに、オブジェクトとクエリパラメータを相互に変換する振る舞いは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UrlSerializer",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を独自に拡張することで変更できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://angular.io/api/router/UrlSerializer"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "配列への正規化",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Input Transformsを使い、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "query",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " インプットプロパティを常に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "string[]",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 型として扱えるように正規化することができる。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "normalizeQuery",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という関数でその変換処理を行うとすると、コンポーネント側は次のように書ける。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "normalizeQuery",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "string[] | string | undefined",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の引数を受け取って ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "string[]",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を返す関数ならどんな実装でも問題ない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "function normalizeQuery(value: string | string[] | undefined): string[] {\n  if (!value) {\n    return [];\n  }\n  if (Array.isArray(value)) {\n    return value;\n  }\n  return [value];\n}\n\n@Component({...})\nexport class Page {\n  @Input({ transform: normalizeQuery })\n  query: string[] = [];\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "実際に動作するサンプルコードをStackblitzで公開しているので、試してみてほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "stackblitz",
      "url": "https://stackblitz.com/edit/angular-xjw1sl?ctl=1&embed=1&file=src/main.ts"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "長さ1の配列をクエリパラメータにセットすると、Routerはそれを配列としてパースできない。",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "クエリパラメータが存在しないことも考慮して正規化をする必要がある。",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "RouterのComponent Input BindingとInput Transformsを使うと、正規化された値を直接インプットプロパティで受け取ることができる。",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
