{
  "pageId": "eb5832c4-1909-4ad1-9bfa-d5ed2f86a16b",
  "lastEditedAt": "2023-06-03T11:23:00.000Z",
  "slug": "nx-dockerize-angular-nest-app",
  "properties": {
    "title": "Nx: Angular+Nest.jsアプリをDockerビルドする",
    "date": "2020-04-29T00:00:00.000Z",
    "tags": ["tech", "Angular", "Nx"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "本稿では ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Nx",
          "href": "nx.dev",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " を使ったAngular+Nest.jsのmonorepoアプリケーションを単一のDockerイメージとしてデプロイ可能にする手順を記す。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "サンプルコードの最終的な状態は以下のリポジトリに公開している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/lacolaco/nx-angular-nest-docker-example",
          "href": "https://github.com/lacolaco/nx-angular-nest-docker-example",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "0. 背景",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "一般的にはSingle Page Applicationのクライアントとサーバーは別のコンテナとしてデプロイされNginxなどで静的ファイルへのリクエストとAPIリクエストを振り分けることが多いが、今回はあえて単一のDockerコンテナでHTTPサーバーを立ち上げ、そのサーバーから静的ファイルとしてクライアントをサーブする。 なぜかというと、今回は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Google Cloud Run",
          "href": "https://cloud.google.com/run?hl=ja",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "にアプリケーションをデプロイすることが目的だからだ。Cloud Runには単一のDockerfileからビルドされるイメージをデプロイできる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "利点としては、まず環境がCloud Runだけで完結すること。そしてクライアントとサーバーあわせたEnd-to-Endの整合性がとりやすいことがある。 欠点としては個別にデプロイできないことや静的ファイルに特化した配信戦略を取りにくいことだ。ただしCloud RunはFirebase Hostingと連携することでGoogleのCDN網を利用できるため、静的ファイルに適切なレスポンスヘッダをつければFirebase Hostingと同じCDNでのキャッシュが機能する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "1. workspaceの作成",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "まずはNxのworkspaceを作成する。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "create-nx-workspace",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " コマンドを使い、今回は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "angular-nest",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を選択するが、本稿の趣旨においては別に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "react-express",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " でも違いはない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "$ npx create-nx-workspace@latest angular-nest-docker-example`"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "2. outputPathの変更 (client, server)",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "angular-nest",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " テンプレートのデフォルトで生成されるプロジェクトは、クライアントサイドが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<application-name>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 、サーバーサイドが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "api",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " となっている。これをそれぞれ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "dist/apps/client",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "dist/apps/server",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " にビルド結果が出力されるようにする。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://img.esa.io/uploads/production/attachments/14362/2020/04/29/50720/b4788f7b-46f4-4f81-a245-2e21d073a9ef.png",
      "caption": ""
    },
    {
      "type": "image",
      "url": "https://img.esa.io/uploads/production/attachments/14362/2020/04/29/50720/ab9b76d1-9c44-4046-b035-14ff8552e70d.png",
      "caption": ""
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "3. ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@nestjs/serve-static",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の追加 (server)",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "クライアントサイドをビルドした生成物をNest.jsがサーブできるように、静的ファイル配信用のモジュールを追加する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "$ yarn add @nestjs/serve-static`"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "静的ファイルはさきほど変更したoutputPathのとおり、clientとserverが隣接するディレクトリになるため、ルートディレクトリには ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "../client",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を指定する。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "/api*",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " はAPIのエンドポイントにマッチするように除外しておく。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "import { Module } from '@nestjs/common';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport * as path from 'path';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [\n    ServeStaticModule.forRoot({\n      rootPath: path.join(__dirname, '..', 'client'),\n      exclude: ['/api*']\n    })\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\nexport class AppModule {}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "加えて、APIのエンドポイントが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "/api/hello",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " となるように ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "main.ts",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "app.controller.ts",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " も微修正する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://img.esa.io/uploads/production/attachments/14362/2020/04/29/50720/14911365-d4a5-45d3-a2fb-db9cb9af9aa3.png",
      "caption": ""
    },
    {
      "type": "image",
      "url": "https://img.esa.io/uploads/production/attachments/14362/2020/04/29/50720/551cf696-a389-4509-adde-96b69baa6435.png",
      "caption": ""
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "5. プロジェクト間依存関係の設定",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "サーバーサイドがクライアントサイドのビルド生成物を配信するということは、サーバーサイドからクライアントサイドへのビルド順番の依存関係があるということだ。このプロジェクト間の依存関係は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "nx.json",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で定義できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://img.esa.io/uploads/production/attachments/14362/2020/04/29/50720/4089b50f-d651-47f3-9a43-7888c00ef520.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "nx dep-graph",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " コマンドで依存関係を可視化すると以下のようになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://img.esa.io/uploads/production/attachments/14362/2020/04/29/50720/db993e3d-b3ac-4ee2-bb8e-fa01c2fb064f.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この状態になっていると、サーバーサイドをビルドする際に自動的にクライアントサイドのビルドを先に実行することができる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "$ nx build api --with-deps"
    },
    {
      "type": "image",
      "url": "https://img.esa.io/uploads/production/attachments/14362/2020/04/29/50720/a63eddd9-ca08-4b8b-af13-1aa8029bd80a.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これでmonorepo内の依存関係を解決した上で ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "dist",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ディレクトリに生成物を出力できるようになった。ためしに ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "dist/apps/server/main.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を実行すれば、AngularアプリケーションがNest.jsのAPIを実行するアプリケーションが起動できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "6. Dockerfileの作成",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Dockerfileを作ってデプロイ可能なイメージをビルドするが、その前にいくつか準備が必要になる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "まず、今のバージョン（Nx v9.2.3）の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "angular-nest",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で生成される ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "package.json",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " から、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "postinstall",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngcc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の実行スクリプトを削除する。これがあるとDockerfile内でモジュールをインストールしたときに不要な処理が実行される。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://img.esa.io/uploads/production/attachments/14362/2020/04/29/50720/e16b8950-ff65-4705-982f-124bb24fe7eb.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次に、サーバーの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "main.ts",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が使用する環境変数を ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "port",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " から ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "PORT",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に変更する。どちらでもよいが一般的に大文字のほうを使うため変更した。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://img.esa.io/uploads/production/attachments/14362/2020/04/29/50720/907fd1e3-f772-4575-bf11-4a5a68b20930.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そしてDockerfileは次のような形にした。Nxのビルドはサーバーサイドもバンドルするため、本当はDockerfileでは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "node_modules",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のインストールをしたくないのだが、Nest.jsが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "tslib",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が見つからずエラーになってしまうため仕方なくインストールしている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "FROM node:12WORKDIR /appCOPY package.json yarn.lock ./RUN yarn install --production# add appCOPY ./dist/ ./# start appCMD node apps/server/main.js"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "あとは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "docker build .",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " でビルドし、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "docker run",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " コマンドで実行できることを確認する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://img.esa.io/uploads/production/attachments/14362/2020/04/29/50720/94340e50-27ee-4c6f-9dd8-96697ae808db.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これでCloud Runにデプロイ可能な状態となった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "課題",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Dockerfileで node_modulesをインストールするなら、最初からNest.jsのビルドでバンドルをしないようにしたほうがイメージサイズが減るのではないか",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "Nest.jsである必要もないので面倒そうならexpressに換装してもよさそう",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
