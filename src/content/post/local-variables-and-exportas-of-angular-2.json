{
  "pageId": "5d985bb5-3b53-41d8-b097-d2f5cf8ddb57",
  "lastEditedAt": "2023-06-03T11:23:00.000Z",
  "slug": "local-variables-and-exportas-of-angular-2",
  "properties": {
    "title": "Angular 2のローカル変数とexportAs",
    "date": "2016-04-11T00:00:00.000Z",
    "tags": ["tech", "Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 2には",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "local variables",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "(ローカル変数)という機能があります。 公式のチュートリアルやデベロッパーガイドを読んでいると突然登場してみなさんを惑わしているかもしれません。 しかし、この機能はAngular 2を使いこなす上でとても重要なものなので、ぜひ知っておきましょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "ローカル変数と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "#",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "シンタックス",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ローカル変数とは、コンポーネントのテンプレート中で定義して使用できる変数のことです。 ローカル変数には原則として、ローカル変数を定義した要素のインスタンスが代入されます。 ローカル変数の定義は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "#",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "シンタックスを使います。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次の例では、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "input",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素をローカル変数",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "i",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "として定義し、 ボタンをクリックするときに",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "input",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素の値をコンポーネントに渡しています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'my-app',\n  template: `\n    <input type=\"text\" #i>\n    <button (click)=\"submit(i.value)\">submit</button>\n    <p>\n      {{ value }}\n    </p>\n  `\n})\nexport class App {\n  value: string;\n  \n  submit(value: string) {\n    this.value = value;\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここでローカル変数",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "i",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "HTMLInputElement",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のインスタンスになっています。 ローカル変数を使うと、データバインディングを行うことなく、要素が持つプロパティや属性を直接使うことができます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "var-*",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "シンタックス",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "#",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "シンタックスは簡単に書けて便利ですが、通常だと",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "#",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "記号はHTMLの中で使うことができないため、 Angular以外の何らかのツールを使おうとするとエラーを引き起こすことがあります。 そこで正常なHTMLとしての体裁を守ったままローカル変数を定義する方法として、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "var-*",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "シンタックスも用意されています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "var-*",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "シンタックスを使って先程のテンプレートを書き直すと次のようになります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'my-app',\n  template: `\n    <input type=\"text\" var-i>\n    <button (click)=\"submit(i.value)\">submit</button>\n    <p>\n      {{ value }}\n    </p>\n  `\n})"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "ローカル変数とフォーム",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 2のローカル変数は、HTML要素のインスタンスを簡単に得ることができるので、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "form",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "video",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素といった、メソッドを持つ複雑な要素と併用することでとても便利になります。 公式のチートシートには",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "video",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素をローカル変数に代入して",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "play()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドを使っている例が紹介されています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<video #movieplayer ...>\n  <button (click)=\"movieplayer.play()\">\n</video>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "同じように",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "form",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素をローカル変数に代入して便利に使ってみましょう！ 次の例では",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "form",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素をローカル変数",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "f",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に代入し、ボタンのクリックイベントで",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "reset()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドを呼び出しています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'my-app',\n  template: `\n    <form #f>\n      <input type=\"text\">\n      <button (click)=\"f.reset()\">reset</button>\n    </form>\n  `\n})\nexport class App {\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "一切スクリプトを書かずにフォームのリセットが実装できました！ 初めは見慣れない",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "#",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "記号に戸惑うかもしれませんが、実はとても簡単で便利なものだということがわかってきましたか？",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "exportAs",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "属性",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここまでのローカル変数は定義された要素のインスタンスを引き出すだけでしたが、 ローカル変数は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "exportAs",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "という機能によってさらに強力な機能になります。さっそく見ていきましょう！",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "exportAs",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "属性はディレクティブのメタデータの1つで、 ローカル変数にHTML要素ではなくディレクティブのインスタンスを代入させたいときに使います。 Angular 2に組み込まれている",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "exportAs",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を活用しているいいサンプルです。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブのセレクタは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<form>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に一致するようになっていて、 HTML標準の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "form",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素が自動的に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブで拡張されています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Directive({\n  selector: 'form:not([ngNoForm]):not([ngFormModel]),ngForm,[ngForm]',\n  bindings: [formDirectiveProvider],\n  host: {\n    '(submit)': 'onSubmit()',\n  },\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm'\n})"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "angular/ng_form.ts at master · angular/angular",
          "href": "https://github.com/angular/angular/blob/master/modules%2Fangular2%2Fsrc%2Fcommon%2Fforms%2Fdirectives%2Fng_form.ts#L80-L88",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここで、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "exportAs: 'ngForm'",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "というメタデータの設定に注目してください。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "form",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素に一致しますが、ただ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<form #f>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のようにローカル変数を定義しても代入されるのは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "HTMLFormElement",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のインスタンスだけです。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "form",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素に隠れている",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブのインスタンスを得るには、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<form #f=\"ngForm\">",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "という定義を行います。 つまり、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "exportAs",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で指定された名前をキーに、ディレクティブのインスタンスを得ることができるのです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のインスタンスを使うと、フォームの操作がとても簡単になります。次の例ではフォームに入力された値をJSONオブジェクトとして取り出して表示しています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'my-app',\n  template: `\n    <form #f #ngf=\"ngForm\" (ngSubmit)=\"submit(ngf.value)\">\n      <input type=\"text\" ngControl=\"name\">\n      \n      <button type=\"submit\">submit</button>\n      <button (click)=\"f.reset()\">reset</button>\n    </form>\n    <p>{{ value | json }}</p>\n  `,\n  directives: []\n})\nexport class App {\n  value: any;\n  \n  submit(value: any) {\n    this.value = value;\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ローカル変数",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "f",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は何も値を与えていないので、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "form",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素のインスタンスになりますが、 ローカル変数",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngf",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "をキーに",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブのインスタンスが代入されます。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngForm",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブはフォーム全体の値をオブジェクトとして扱える",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "value",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティを持っているので、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngSubmit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "イベントでコンポーネントに値を渡しています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このように、テンプレート中でディレクティブのメソッドやプロパティにアクセスできるのがローカル変数と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "exportAs",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の力です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "exportAs",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使ってみよう",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "もちろん自分で作るディレクティブにも",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "exportAs",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使うことができます。 最後に自作ディレクティブをローカル変数として扱う例を紹介します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "MyDiv",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "div",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素に一致するセレクタと、自身の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "text-transform",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "スタイルを切り替えるメソッドを持っています。 そしてインスタンスを",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "myDiv",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "として公開しています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Directive({\n  selector: \"div\",\n  exportAs: \"myDiv\"\n})\nclass MyDiv {\n  \n  constructor(private element: ElementRef, private renderer: Renderer) {\n  }\n  \n  toUpper() {\n    return this.renderer.setElementStyle(this.element.nativeElement, \"text-transform\", \"uppercase\");\n  }\n  \n  toLower() {\n    return this.renderer.setElementStyle(this.element.nativeElement, \"text-transform\", \"lowercase\");\n  }\n  \n  reset() {\n    return this.renderer.setElementStyle(this.element.nativeElement, \"text-transform\", \"\");\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これをコンポーネントから使うと、次のようになります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'my-app',\n  template: `\n    <div #d=\"myDiv\">Angular 2</div>\n    <button (click)=\"d.toUpper()\">toUpper</button>\n    <button (click)=\"d.toLower()\">toLower</button>\n    <button (click)=\"d.reset()\">Reset</button>\n  `,\n  directives: [MyDiv]\n})\nexport class App {\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "こちら",
          "href": "http://plnkr.co/edit/xDSVImO4wbFYLGIqViFO?p=preview",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " で実際に動くサンプルを見ることができます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 2のローカル変数について基礎的な部分を紹介し、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "exportAs",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を活用することで機能的なディレクティブを作れることがわかってもらえたと思います。 ローカル変数を使うとコンポーネントのコード量を減らし、テンプレート内で直感的にHTML要素やディレクティブのインスタンスを扱うことができます。 ぜひ活用してみてください。",
          "annotations": {}
        }
      ]
    }
  ]
}
