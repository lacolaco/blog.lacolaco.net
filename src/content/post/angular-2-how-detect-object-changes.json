{
  "pageId": "5004a8f6-78b3-4281-9b4a-f575cdb1871b",
  "lastEditedAt": "2023-12-30T10:11:00.000Z",
  "slug": "angular-2-how-detect-object-changes",
  "properties": {
    "title": "Angular2はいかにしてオブジェクトの変更を監視しているのか",
    "date": "2016-01-15T00:00:00.000Z",
    "tags": ["Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今回は Angular2 がいかにしてオブジェクトの変更を監視し、データバインディングを解決しているのかを解き明かします。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "結論",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この部分",
          "href": "https://github.com/angular/angular/blob/7ae23adaff2990cf6022af9792c449730d451d1d/modules/angular2/src/core/application_ref.ts#L374",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "でループと tick 処理を実装していた。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "ObservableWrapper.subscribe(this._zone.onTurnDone, _ => {\n  this._zone.run(() => {\n    this.tick();\n  });\n});"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "調査開始",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular2 は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "$apply",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "がないのにどうやってオブジェクトの変更をビューに反映しているんだろう？という疑問から調査を開始。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そもそも、Component のプロパティに変更を加えたときに何かイベントが発生しているわけではない（object.Observe も Proxies も使っていない)ので、何かしらのタイミングで別のメソッドから変更があるかどうかをチェックしているはず。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ということで変更を検知する処理を探索、AbstractChangeDetector に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "detectChanges",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドを発見。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/angular/angular/blob/fcc7ce225ec6b6abc8935c2a024941ee53dce1e6/modules/angular2/src/core/change_detection/abstract_change_detector.ts#L76",
          "href": "https://github.com/angular/angular/blob/fcc7ce225ec6b6abc8935c2a024941ee53dce1e6/modules/angular2/src/core/change_detection/abstract_change_detector.ts#L76",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "  detectChanges(): void { this.runDetectChanges(false); }"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このメソッドが呼ばれると、ChangeDetector が保存している状態と現在の状態を比較して、変更点をリストアップするらしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次にこの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "detectChanges",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が呼ばれている部分を探す。発見。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/angular/angular/blob/7ae23adaff2990cf6022af9792c449730d451d1d/modules/angular2/src/core/application_ref.ts#L471",
          "href": "https://github.com/angular/angular/blob/7ae23adaff2990cf6022af9792c449730d451d1d/modules/angular2/src/core/application_ref.ts#L471",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "  tick(): void {\n    if (this._runningTick) {\n      throw new BaseException(\"ApplicationRef.tick is called recursively\");\n    }\n\n    var s = ApplicationRef_._tickScope();\n    try {\n      this._runningTick = true;\n      this._changeDetectorRefs.forEach((detector) => detector.detectChanges());\n      if (this._enforceNoNewChanges) {\n        this._changeDetectorRefs.forEach((detector) => detector.checkNoChanges());\n      }\n    } finally {\n      this._runningTick = false;\n      wtfLeave(s);\n    }\n  }"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ApplicationRef_",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "クラスの tick()メソッドの中で呼ばれていた。ざっと上から処理を追うと、",
          "annotations": {}
        }
      ]
    },
    {
      "type": "numbered_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "tick が入れ子になっていないかのチェック（1ApplicationRef につき同時に走る tick は 1 つ）",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "_tickScope",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "の呼び出し。中はプロファイリング用の処理だった。無視して OK",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "tick 処理を開始。フラグを立てる",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "ApplicationRef が持っている ChangeDetector すべてに",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "detectChanges",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "を実行",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "_enforceNoNewChanges",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "が true ならすべての ChangeDetector を変更がなかったものとする（",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "ngAfter**",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "系のライフサイクルが発生しないっぽい）",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "tick 処理を終了。フラグを下ろす",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "プロファイリングを終了する。無視して OK",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "アプリケーション全体のデータバインディングを解決するメソッドが分かった。これが AngularJS の$digest ループ相当のものらしい。あとはこれが呼ばれている場所がわかればいい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "というわけで tick()を呼び出している部分を探索、発見。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/angular/angular/blob/7ae23adaff2990cf6022af9792c449730d451d1d/modules/angular2/src/core/application_ref.ts#L374",
          "href": "https://github.com/angular/angular/blob/7ae23adaff2990cf6022af9792c449730d451d1d/modules/angular2/src/core/application_ref.ts#L374",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "constructor(private _platform: PlatformRef_, private _zone: NgZone, private _injector: Injector) {\n    super();\n    if (isPresent(this._zone)) {\n      ObservableWrapper.subscribe(this._zone.onTurnDone,\n                                  (_) => { this._zone.run(() => { this.tick(); }); });\n    }\n    this._enforceNoNewChanges = assertionsEnabled();\n  }"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ApplicationRef_",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のコンストラクタである。bootstrap 関数によってアプリケーションの開始時に一度だけ呼ばれる部分。当たり前といえば当たり前である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "とはいえ初見ではこれが tick ループの実装だとはわからないと思うので、ひとつずつ解説する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "ObservableWrapper.subscribe",
          "annotations": {
            "code": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ObservableWrapper の実装はこれ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "class ObservableWrapper",
          "href": "https://github.com/angular/angular/blob/fcc7ce225ec6b6abc8935c2a024941ee53dce1e6/modules/angular2/src/facade/async.ts#L26",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "RxJS の Observable をラップし、EventEmitter と協調するための Angular2 用の非同期処理用便利クラスである。Observable の処理を Wrapper の static メソッドで行うことができるので RxJS を隠蔽できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "subscribe",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドは、第 1 引数に渡された EventEmitter のイベントが発行されるたびに第 2 引数の関数が実行される。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "this._zone.onTurnDown",
          "annotations": {
            "code": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "subscribe の第 1 引数に渡されたこれは前述のとおり EventEmitter である。つまり、このイベントが発火されるたびに第 2 引数の処理が走る。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "this._zone",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の型は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NgZone",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "だが、これは Zone.js の Zone を拡張した Angular2 用の Zone である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "class NgZone",
          "href": "https://github.com/angular/angular/blob/fcc7ce225ec6b6abc8935c2a024941ee53dce1e6/modules/angular2/src/core/zone/ng_zone.ts#L92",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "どのように拡張しているかというと、 Zone の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "run",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が実行されるたびに自身の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "onTurnStart",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を発火し、処理が終了すると",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "onTurnDone",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を発火するようになっている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このソース",
          "href": "https://github.com/angular/angular/blob/fcc7ce225ec6b6abc8935c2a024941ee53dce1e6/modules/angular2/src/core/zone/ng_zone.ts#L352",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "にある",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "_notifyOnTurnStart",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "_notifyOnTurnDone",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "がそれである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "this._zone.run(() => { this.tick(); }",
          "annotations": {
            "code": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これは ApplicationRef が持っている Zone 中で tick 処理を行っているだけである。Zone については本稿では扱わないが、複数の非同期処理をグループ化し、コンテキストを共有したもののように思ってもらえればよい。同じ Zone 内で起きたエラーを一括でハンドルしたり、非同期のスタックトレースを取得できたりする。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "angular/zone.js: Implements Zones for JavaScript",
          "href": "https://github.com/angular/zone.js/",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これですべての謎が解けた。まとめると以下のようになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "numbered_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "ApplicationRef が作成される（bootstrap 関数の中で作られる）",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Application の NgZone が作成され、tick ループが作られる",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "各 Component が自身の ChangeDetector を Application に登録する（これはコンポーネントツリー構築時にされている）",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "tick が呼ばれる",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "すべての ChangeDetector が変更チェックし、データバインディングを解決する",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "tick 処理が終わると",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "onTurnDone",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "イベントが発火する",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "onTurnDone",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "イベントを受けて tick を実行する",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "4 に戻る",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "イベントドリブンな再帰ループ？とでも言うのだろうか。ともかくこういう仕組みで動いている。setInterval とかではない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "所感",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "RxJS と Zone.js との合わせ技だが、わかってしまえばシンプルだった。ちなみに処理の追跡は全部 GitHub 上で出来たので楽だった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Zone.js についてはまた後日記事を書こうと思う。",
          "annotations": {}
        }
      ]
    }
  ]
}
