{
  "pageId": "c0a2a317-2b8f-47ef-821d-9ef5e602c5f9",
  "lastEditedAt": "2023-06-03T13:04:00.000Z",
  "slug": "angular-signals-component-design-patterns",
  "properties": {
    "title": "SignalベースのAngularコンポーネント設計パターン",
    "date": "2023-06-03T00:00:00.000Z",
    "tags": ["tech", "Angular", "状態管理", "Signals", "設計"],
    "canonicalUrl": "https://zenn.dev/lacolaco/articles/angular-signals-component-design-patterns"
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この記事ではAngular v16で導入された Signals を前提としたコンポーネント設計のパターンをいくつかまとめる。単純な責任を持つコンポーネントからはじめ、だんだんと複雑な責任に関わるコンポーネントに発展させていく。ちょうど一年前に書いたAngularアプリケーションの状態管理パターンについての記事の、Signals による改訂版にもなっている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://blog.lacolaco.net/2022/05/angular-state-management-patterns/"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "なお、この記事中での各コンポーネント実装パターンの名称は特に定まったものではなく、この記事中での参照の一貫性のためだけに名付けている。あまり名称にこだわらずに読んでほしいし、もし参考にして実装しようとする際には、アプリケーションに適した命名を各自であらためて検討してほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、この記事のサンプルコードはAngular v16.0時点でのAPIに準拠している。今後Angular SignalsのAPIが拡充してくると細かい実装レベルでは違いが出てくるが、大枠の設計はそれほど変わらないだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "1. ステートレスコンポーネント",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "もっとも基本的なパターンである ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ステートレスコンポーネント",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " は、あらゆる振る舞いを親コンポーネントからのインプットに依存し、親コンポーネントへのアウトプットによってアプリケーションに作用するものだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<div>\n  <button (click)=\"increment.emit()\">+</button>\n  <button (click)=\"decrement.emit()\">-</button>\n  <button (click)=\"reset.emit()\">reset</button>\n</div>\n<p>Count: {{ count }}</p>"
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: 'app-stateless-counter',\n  templateUrl: './stateless.component.html',\n  styleUrls: ['./stateless.component.css'],\n})\nexport class StatelessCounterComponent {\n  @Input() count = 0;\n\n  @Output() increment = new EventEmitter<void>();\n  @Output() decrement = new EventEmitter<void>();\n  @Output() reset = new EventEmitter<void>();\n}"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "このパターンの特徴",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネント内部に状態を持たない",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "依存するものも副作用もなく、再利用性がきわめて高い",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "入力によってのみ振る舞いが変わるためユニットテストを書きやすい",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "このパターンのユースケース例",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "ほとんどのUI構築を目的としたコンポーネント",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "2. ステートフルコンポーネント",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ステートフルコンポーネント",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "は、自身の振る舞いを左右する状態を自身で保持し、管理するものだ。ステートフルコンポーネントは多くの場合、ステートレスコンポーネントにインプットを与え、アウトプットを受け取って状態を更新することになるが、必ずしもそうでなくてもよい。しかし、あくまでも自律した振る舞いは自身の内部に閉じており、それ以外の副作用は持たない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular Signalsによってリアクティブな状態管理をRxJSやObservable、外部ライブラリなどを使わずに実現できるようになった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<app-stateless-counter \n  [count]=\"count()\" \n  (increment)=\"increment()\"\n  (decrement)=\"decrement()\"\n  (reset)=\"reset()\"\n/>"
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { ChangeDetectionStrategy, Component, signal } from '@angular/core';\nimport { StatelessCounterComponent } from '../stateless/stateless.component';\n\n@Component({\n  selector: 'app-simple-stateful-counter',\n  standalone: true,\n  imports: [StatelessCounterComponent],\n  templateUrl: './simple-stateful.component.html',\n  styleUrls: ['./simple-stateful.component.css'],\n})\nexport class SimpleStatefulCounterComponent {\n  count = signal(0);\n\n  increment() {\n    this.count.update((count) => count + 1);\n  }\n\n  decrement() {\n    this.count.update((count) => count - 1);\n  }\n\n  reset() {\n    this.count.set(0);\n  }\n}"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "このパターンの特徴",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネント内部に状態を持つ",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "状態のライフサイクルを意識する必要がある",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "依存するものがなく外部への副作用もないため再利用性が高い",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "コンポーネントのユニットテストを書きやすい",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "このパターンのユースケース例",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "単純かつ自身に閉じた状態を持つUIコンポーネント",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "メニューやダイアログの開閉状態など",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "3. Simple PDS",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Simple PDS",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "（",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Presentation-Domain Separation",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": ") パターンは、ステートフルコンポーネントにビジネスロジックを加えたものだ。いわゆるコンテナコンポーネントと呼ばれる類のコンポーネントはこれと似た構造になる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://martinfowler.com/bliki/PresentationDomainSeparation.html"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このパターンではPDS原則に従い、コンポーネントと密接なビジネスロジックをローカルサービス (ここでは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ユースケース",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "と呼ぶ）に分離し、コンポーネントからメソッドを呼び出す。ユースケースクラスにはHTTP通信やアプリケーションのドメインロジックなどが記述される。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Injectable()\nexport class UserListUsecase {\n  #http = inject(HttpClient);\n\n  async getUsers(): Promise<User[]> {\n    return lastValueFrom(\n      this.#http.get<User[]>('https://jsonplaceholder.typicode.com/users')\n    );\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "HTMLテンプレートはステートフルコンポーネントと同じくステートレスコンポーネントを呼び出す場合もあれば、直接ビューを記述してもよい。そこは大した論点ではない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<ul>\n  <li *ngFor=\"let user of users()\">\n    <span>#{{ user.id }}: {{ user.name }}</span>\n  </li>\n</ul>"
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { UserListUsecase } from './usecase';\n\n@Component({\n  selector: 'app-simple-pds-user-list',\n  standalone: true,\n  imports: [CommonModule],\n  providers: [UserListUsecase],\n  templateUrl: './simple-pds.component.html',\n  styleUrls: ['./simple-pds.component.css'],\n})\nexport class SimplePdsUserListComponent implements OnInit {\n  usecase = inject(UserListUsecase);\n\n  users = signal<User[]>([]);\n\n  ngOnInit() {\n    this.usecase.getUsers().then((users) => {\n      this.users.set(users);\n    });\n  }\n}"
    },
    {
      "type": "image",
      "url": "/images/angular-signals-component-design-patterns/4b8207c2-8347-4723-a9f3-7508c872c062/simple-pds.png",
      "caption": "Simple PDS Component"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "このパターンの特徴",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネント内部に状態を持つ",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネントはUIに関する責任を持ち、それ以外の責任を外部に委譲する",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "依存性の注入により、コンポーネントとユースケースは疎結合である",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "ユースケースクラスのインスタンスをテストダブルに差し替えてテストできる",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "このパターンのユースケース例",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "比較的シンプルな、管理する状態のスケールが小さいページのRouted Component",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "UIとビジネスロジックを併せ持ったコンテナコンポーネント",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "4. PDS+CQS",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Simple PDSパターンではコンポーネントが状態管理の責任を持っているが、状態の操作が複雑化すると、コンポーネントの責務が肥大化する。そのため、Simple PDSパターンが適用できるのは状態管理の複雑さが十分に単純である場合、たとえばHTTP通信で取得したデータを保持しておくだけのような場合である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "状態の更新にロジックが関与し、状態遷移の整合性について複雑性がある場合は、さらにコンポーネントから責任を切り出すモチベーションが生まれる。その解決策のひとつが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "PDS+CQS",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " (",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Presentation Domain Separation + Command Query Separation)",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " パターンである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "PDS+CQS パターンの主要な構成要素は、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ステート",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "・",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ユースケース",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "・",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "コンテナコンポーネント",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "の3つである。状態管理の責任をプレゼンテーション側からドメイン側のステートに移した上で、コンポーネントとステートの間のデータの流れは、ユースケースによって状態の更新を行うコマンドと状態の読み取りを行うクエリに分離される。この3つの構成要素と2つの分離原則の関係を図示すると次のようになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "/images/angular-signals-component-design-patterns/36d4d687-5e55-4d2d-809d-0c5e006b2159/pds-cqs.png",
      "caption": "PDS+CQS Component"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このパターンが適用されるコンポーネントはアプリケーションの中で多くないし、あまり増やすべきではない。主にページ単位の状態を扱うことになる Routed Component や、クライアントサイドでの状態の操作が多い複雑なUIを構築するコンポーネントに適している。このパターンでは対象範囲の状態管理を一箇所に集約してカプセル化するため、UIを構成するほとんどのコンポーネントをステートレスコンポーネントとして実装できることが利点である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "PDS+CQSサンプル: TodoList ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このパターンの実装例として、簡単なTODOリストを作ってみよう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "SignalState ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "まずは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SignalState<T>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " というインターフェースの導入を検討する。このインターフェースは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "asReadonly()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " メソッドを持ち、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ReadonlyState<T>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を返す。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ReadonlyState<T>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は与えられた型を読み取り専用の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Signal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 型に変換した型だ。 （書き込み可能なSignalは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "WritableSignal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 型に限られる）",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "// signal-state.ts\nexport interface SignalState<T> {\n  asReadonly(): ReadonlyState<T>;\n}\n\nexport type ReadonlyState<T> = T extends object\n  ? {\n      [K in keyof T]: Signal<T[K]>;\n    }\n  : Signal<T>;"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "State/Usecase",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このインターフェースを実装したステートクラス ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "TodoListState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は次のようになる。このステートクラスの責任は、状態の保持とその更新手続きのカプセル化である。クラスフィールドは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "signal()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " または ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "computed()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で作成された Signal オブジェクトであり、Signal の値を更新するメソッドが定義されている。そして ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "asReadonly()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " メソッドで読み取り専用の状態オブジェクトを返す。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "// todo-list.state.ts\nimport { computed, signal } from '@angular/core';\nimport { SignalState } from '../shared/signal-state';\nimport { Todo } from './todo';\n\nexport type State = {\n  todos: Todo[];\n  incompletedTodos: Todo[];\n  completedTodos: Todo[];\n};\n\nexport class TodoListState implements SignalState<State> {\n  todos = signal<Todo[]>([\n    {\n      id: 1,\n      title: 'Learn Signals',\n      completed: false,\n    },\n  ]);\n\n  completedTodos = computed(() => {\n    return this.todos().filter((todo) => todo.completed);\n  });\n  incompletedTodos = computed(() => {\n    return this.todos().filter((todo) => !todo.completed);\n  });\n\n\taddTodo(title: string): void {\n    this.todos.update((todos) => [\n      {\n        id: todos.length + 1,\n        title,\n        completed: false,\n      },\n      ...todos,\n    ]);\n  }\n\n  setCompleted(id: Todo['id'], completed: boolean) {\n    this.todos.mutate((todos) => {\n      const item = todos.find((todo) => todo.id === id);\n      if (item) {\n        item.completed = completed;\n      }\n    });\n  }\n\n  asReadonly() {\n    return {\n      todos: this.todos.asReadonly(),\n      completedTodos: this.completedTodos,\n      incompletedTodos: this.incompletedTodos,\n    };\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次にユースケースクラスを実装する。CQS原則に従い、ユースケースクラスが持つインターフェースはコマンド（更新）とクエリ（問い合わせ）のどちらかに区別される。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://martinfowler.com/bliki/CommandQuerySeparation.html"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ユースケースクラス ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "TodoListUsecase",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "#state",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プライベートフィールドに ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "TodoListState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のインスタンスを持ち、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " パブリックフィールドに ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "TodoListState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "asReadonly()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " メソッドの戻り値を持つ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "// todo-list.usecase.ts\nimport { TodoListState } from './state';\nimport { Todo } from './todo';\n\n@Injectable()\nexport class TodoListUsecase {\n  #state = new TodoListState();\n\n  state = this.#state.asReadonly();\n\n  addTodo(title: string) {\n    this.#state.addTodo(title);\n  }\n\n  setTodoCompleted(id: Todo['id'], completed: boolean) {\n    this.#state.setCompleted(id, completed);\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そして、コンテナコンポーネントは依存性の注入によってユースケースクラスのインスタンスにアクセスする。Simple PDS パターンと違い、状態を更新するための処理を自身で持たず、ユースケースクラスが公開するメソッド（コマンド）を呼び出す。CQS原則に従い、メソッドは戻り値を持たず、コマンドの作用はユースケースが公開するクエリである ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " オブジェクトを介して伝えられる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コンテナコンポーネントはステートクラスの存在を直接知ることはなく、ユースケースクラスだけに依存する。状態管理についてはユースケースクラスが提供する ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " フィールドだけを知っており、その裏の実体については隠蔽されている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<app-todo-list-view \n  [items]=\"usecase.state.todos()\"\n  (changeCompleted)=\"usecase.setTodoCompleted($event.id, $event.completed)\" />"
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { TodoListUsecase } from './usecase';\nimport { TodoListViewComponent } from './views/todo-list-view/todo-list-view.component';\n\n@Component({\n  selector: 'app-pds-cqs-todo-list',\n  standalone: true,\n  imports: [CommonModule, TodoListViewComponent],\n  providers: [TodoListUsecase],\n  templateUrl: './pds-cqs.component.html',\n  styleUrls: ['./pds-cqs.component.css'],\n})\nexport class PdsCqsTodoListComponent {\n  usecase = inject(TodoListUsecase);\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "実装の詳細は動作するサンプルを見てほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "stackblitz",
      "url": "https://stackblitz.com/edit/stackblitz-starters-jcdjgn?ctl=1&embed=1&file=src/pds-cqs/pds-cqs.component.ts"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今回紹介したコンポーネント設計パターンにおける責任についてまとめると次のようになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "table",
      "rows": [
        [
          [
            {
              "type": "text",
              "text": "パターン",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "UI構築",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "状態管理",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "ビジネスロジック",
              "annotations": {}
            }
          ]
        ],
        [
          [
            {
              "type": "text",
              "text": "ステートレスコンポーネント",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "コンポーネント",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "なし",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "なし",
              "annotations": {}
            }
          ]
        ],
        [
          [
            {
              "type": "text",
              "text": "ステートフルコンポーネント",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "コンポーネント",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "コンポーネント",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "なし",
              "annotations": {}
            }
          ]
        ],
        [
          [
            {
              "type": "text",
              "text": "Simple PDS",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "コンポーネント",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "コンポーネント",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "ユースケース",
              "annotations": {}
            }
          ]
        ],
        [
          [
            {
              "type": "text",
              "text": "PDS+CQS",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "コンポーネント",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "ステート",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "ユースケース",
              "annotations": {}
            }
          ]
        ]
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "どのパターンにもそれに適した場面があり、目的に合わせて組み合わせて使うものである。ただし、アプリケーションの全体を通して、複雑なコンポーネントよりも単純なパターンのコンポーネントのほうが多くの割合を占めるようにするべきだ。そうすることでアプリケーションの大部分をユニットテストしやすい状態に保つことができる。",
          "annotations": {}
        }
      ]
    }
  ]
}
