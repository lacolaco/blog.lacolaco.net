{
  "pageId": "fc06702a-e32a-483e-a546-4ed5b9c3b702",
  "lastEditedAt": "2024-02-24T05:25:00.000Z",
  "slug": "angular-model-inputs",
  "locale": "ja",
  "properties": {
    "title": "Angular: Model Inputsで何が変わるのか",
    "date": "2024-02-24T03:18:00.000Z",
    "category": "Tech",
    "tags": ["Angular", "Signals"],
    "canonicalUrl": "https://zenn.dev/lacolaco/articles/angular-model-inputs"
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular v17.2にて、新しいSignal関連APIの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Model Inputs",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "が実装された。これはv17.0で実装されたSignal Inputsをベースにして拡張されたものだ。Model Inputsにより、これまで以上に幅広いユースケースでSignalベースのコンポーネントが作りやすくなった。この記事ではModel Inputsが開発者体験に与える具体的な影響をかいつまんで紹介する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Signal Inputsについての解説は以前に書いたため、先に読んでいることを前提とする。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://zenn.dev/lacolaco/articles/angular-signal-inputs"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Model Inputsとは",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Model InputsはSignals RFCのSignal-based Componentsのセクションで提案されている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/angular/angular/discussions/49682"
    },
    {
      "type": "quote",
      "text": [
        {
          "type": "text",
          "text": "Signal-based components additionally have access to a new type of input, ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "model inputs",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": ".",
          "annotations": {}
        }
      ]
    },
    {
      "type": "quote",
      "text": [
        {
          "type": "text",
          "text": "The ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "model",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " function defines a special kind of input that establishes a contract between parent component and child component. A model input gives you a ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "WritableSignal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ", which propagates its value back to the source. This lets you create two-way bindings without any additional requirements.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Model Inputsの機能は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "model",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数で提供される。これはSignal Inputの特殊なバージョンで、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "input()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で作られたSignal Inputが読み取り専用なのに対して、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "model()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で作れるModel Inputは書き込み可能な",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "WritableSignal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "になる。このSignalの値が変更されたとき、自動的にその変更をコンポーネントのアウトプットとして出力できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NameInputComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を例にしよう。このコンポーネントは親コンポーネントから入力値を受け取る",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "value",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "インプットを持っている。これは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "model()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で作られたModel Inputなので親から値を受け取るだけでなく、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NameInputComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "自身が値を更新できる。この例ではテキストフィールドの入力値を",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "value",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "フィールドに反映している。実は、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "v17.2からは双方向バインディングに",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "WritableSignal",
          "annotations": {
            "bold": true,
            "code": true
          }
        },
        {
          "type": "text",
          "text": "をそのまま渡すこともできるようになった",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "。そのため、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "[(ngModel)]",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "にModel Inputのフィールドを渡すだけで、値の書き込みとユーザー入力からの反映を実現できる。双方向どちらに向けても変更の伝播のためのコードは一切必要ない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { Component, model } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'name-input',\n  standalone: true,\n  imports: [FormsModule],\n  template: `\n    <label>Full Name: </label>\n    <input type=\"text\" name=\"fullname\" [(ngModel)]=\"value\" >\n  `,\n})\nexport class NameInputComponent {\n  value = model(''); // Define a model input\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "親コンポーネントから見ると、Model Inputsはそのプロパティに対応する",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "**Change",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "アウトプットを内部的に生成している。この例の場合、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "value",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "インプットに対応した",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "valueChange",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "アウトプットが存在しているとみなされ、Model Inputの値が更新されると",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "valueChange",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で購読可能なイベントが発行される。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "したがって、親コンポーネントは次のように双方向バインディングの構文",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "[(value)]",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使える。また、親コンポーネントが",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "WritableSignal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で値を持っていれば、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Signal-to-Signalの双方向バインディング",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "によって、親子コンポーネント間で値が同期される。もちろん",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "[value]",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "(valueChange)",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を別々に使うこともできる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [NameInputComponent],\n  template: `\n\t\t<!-- one-way binding -->\n    <name-input [value]=\"name\" /> \n\n\t\t<!-- one-way listening -->\n    <name-input (valueChange)=\"onChange($event)\" /> \n\n\t\t<!-- 2-way binding -->\n    <name-input [(value)]=\"name\" /> \n\n\t\t<!-- signal-to-signal 2-way binding -->\n    <name-input [(value)]=\"nameSignal\" />\n  `,\n})\nexport class App {\n  name = 'Angular';\n  nameSignal = signal('Angular');\n}"
    },
    {
      "type": "stackblitz",
      "url": "https://stackblitz.com/edit/angular-rmu4sg?ctl=1&embed=1&file=src/main.ts"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Model Inputsで何が変わるのか",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Model InputsはSignal Inputsの拡張版であるため、Signal Inputsが持つ利点はすべてModel Inputsにも共通する。それに加えて、Model Inputsによって次のような点で開発者体験に影響を与えるだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "双方向バインディングサポートのためのアウトプット宣言が不要になる",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "自作のコンポーネントのプロパティで双方向バインディングをサポートするためには",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "foo",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "インプットと",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "fooChange",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "アウトプットの両方を宣言しておく必要があった。単純にクラスフィールドが2つ必要で面倒だということもあるが、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "フィールド名の暗黙的なルール",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "によって実現する機能なので、もしインプットかアウトプットのどちらかだけをリネームしてしまったら親コンポーネント側のテンプレートがコンパイルエラーになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Model Inputsであれば開発者が宣言するのは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "model()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数で生成されるフィールドひとつだけなので、コードの量が減るだけでなく、アプリケーションをより安定したものにできる。たまたま名前が一致して双方向バインディングが可能になっていたわけではなく、そのために宣言されているプロパティであるという意図を明確にできる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "変更通知のタイミングを考えなくてよい",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "親からインプットで与えられた値と、自身が更新する値の両方によって状態が更新されるようなケースでは、状態の変更を通知するタイミングや条件を誤ると状態が不整合になる。たとえば値が更新されたときに親コンポーネントやサービスなどに変更を通知するケースを考えよう。同期的なフィールドで状態を管理していると「",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "値が変更されたとき",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "」というイベントが無いため、リアクティブな宣言的記述はできない。状態を変更しうるすべての場所に変更通知用の処理を追記することになり、当然書き漏れる可能性が高い。RxJSのBehaviorSubjectなどを使って宣言的な記述をできるようにしているケースも多いが、Signalと比較すれば実現したいことに対して複雑すぎるアプローチだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Model Inputsであれば値を更新するだけでそのSignalを購読している別の派生SignalやEffectだけでなく親コンポーネントへのアウトプットにも自動的に通知されるため、通知が漏れる心配はない。特に、親コンポーネントでもSignalで状態を管理しており、Signal-to-Signalの双方向バインディングを使う場合は、複数のコンポーネント間で簡単に状態が同期される。状態の伝播に失敗してアプリケーションの一部分が不整合に陥ることは減るだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、テキストフィールドのようなフォーム要素を内包するコンポーネントは、変更検知戦略をOnPushにしている場合にコンポーネント内部での状態の更新によって変更検知がトリガーされないことで、明示的な",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "markForCheck",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を行っているケースもあるだろう。そういったテクニックも、Signalであれば不要になる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Model Inputsの導入により、より多くのユースケースにおいてコンポーネント内の状態をSignalに置き換えられるようになった。同時に実装された双方向バインディングのSignalサポートは特に画期的で、これまでとは違うレベルでのコンポーネント間の状態の同期を可能にするだろう。Input Signalsとあわせてぜひ取り入れていきたい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "参考リンク",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://netbasal.com/angulars-model-function-explored-a-comprehensive-overview-4481d023c822"
    },
    {
      "type": "link_preview",
      "url": "https://angular.io/api/core/model"
    }
  ]
}
