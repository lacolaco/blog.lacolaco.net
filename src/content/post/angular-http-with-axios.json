{
  "pageId": "e6735cdf-159e-4c34-be00-a20927cdb7a1",
  "lastEditedAt": "2023-05-21T05:38:00.000Z",
  "slug": "angular-http-with-axios",
  "properties": {
    "title": "Angularとaxiosを使ったHTTP通信",
    "date": "2018-04-20T00:00:00.000Z",
    "tags": ["tech", "Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "題して「頼りすぎない Angular」ということで、Angular の層をなるべく",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "薄く",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": "アプリケーションを作るにはどうすればいいかというのを考えるシリーズです。 Angular 良さそうなんだけどロックインされて捨てにくそう、という人々向けに、コードのモジュール性とフレームワーク非依存性を重視した実装パターンを試行錯誤します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "第一回目は Angular の HttpClient を覚えずに、人気の npm モジュールである ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "axios",
          "href": "https://github.com/axios/axios",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " を使って Angular アプリで Ajax する例を紹介します。 axios は TypeScript の型定義を同梱していて、インターセプターなど Angular の HttpClient と同じような機能が揃っています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Live Example",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今回の完成形はこちらです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://stackblitz.com/edit/angular-with-axios",
          "href": "https://stackblitz.com/edit/angular-with-axios",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Random User Generator",
          "href": "https://randomuser.me/",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "からユーザー情報の JSON を取得し、画面に表示するアプリケーションです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "HttpClient",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "さて今回は Angular 公式の HttpClient モジュールを使わずフレームワーク非依存の axios を使って HttpClient を作ります。 次のようなファイルでアプリケーション用のカスタムインスタンスを生成して export します。 今回は何もしませんが実際はデフォルトのヘッダを追加したりインターセプターを追加したりいろいろすると思います。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import axios from \"axios\";\n\nconst instance = axios.create();\n\nexport default instance;"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "UserRepository",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次に、作成した HttpClient を使って API 呼び出しを行うためのサービスクラスを作ります。 単純に import して使うだけです",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { Injectable } from \"@angular/core\";\nimport httpClient from \"../infrastructure/http-client\";\n\n@Injectable()\nexport class UserRepository {\n  async random() {\n    const { data } = await httpClient.get(\"https://randomuser.me/api/\");\n    const {\n      results: [user]\n    } = data;\n    return user;\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "作成したサービスクラスを AppModule に登録します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { NgModule } from \"@angular/core\";\nimport { BrowserModule } from \"@angular/platform-browser\";\n\nimport { AppComponent } from \"./app.component\";\nimport { UserRepository } from \"./repository/user\";\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent],\n  providers: [UserRepository]\n})\nexport class AppModule {}"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "AppComponent",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "最後にコンポーネントからサービスを利用します。ここは Angular の DI を使います。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { Component } from \"@angular/core\";\nimport { UserRepository } from \"./repository/user\";\n\n@Component({\n  selector: \"my-app\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"]\n})\nexport class AppComponent {\n  user: User | null = null;\n\n  constructor(private userRepo: UserRepository) {}\n\n  ngOnInit() {\n    this.fetchUser();\n  }\n\n  async changeUser() {\n    this.user = null;\n    await this.fetchUser();\n  }\n\n  private async fetchUser() {\n    this.user = await this.userRepo.random();\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "テンプレートでは名前と写真を表示して、ボタンを押すと",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "changeUser()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドをトリガーするようにしています。これで完成です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<h2>Angular with axios</h2><ng-container *ngIf=\"user as user\">  <h2>{{ user.name.first + ' ' + user.name.last | titlecase }}</h2>  <img src=\"{{user.picture.large}}\" /></ng-container><button (click)=\"changeUser()\">Change User</button>"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "テストと DI",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "サービスクラスの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UserRepository",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "では直接",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "httpClient",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を import して参照しましたが、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "では DI 経由で",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UserRepository",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を参照しました。 この違いは、ユニットテストをどう書くかという観点で分かれています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "axios は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "moxios",
          "href": "https://github.com/axios/moxios",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "というパッケージを使うことで簡単に axios のインスタンスをモック化できます。 そのため、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "httpClient",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の初期化のテストにおいても、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UserRepositry",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の振る舞いのテストにおいても、DI は必要ありません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "しかし",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "から",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UserRepository",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を直接参照すると、簡単にはモックできません。 なのでテスト時に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UserRepository",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のモックを提供できるように DI 経由で参照しています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "利点・欠点",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "利点",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "axios は有名で人気なライブラリなので学習しやすい",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "HttpClient 部分は Angular じゃなくても使える",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "欠点",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "RxJS の恩恵を受けられない",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "遅延実行",
                      "annotations": {}
                    }
                  ],
                  "children": []
                },
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "複数値の返却",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "RxJS の恩恵については、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UserRepository",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の層で",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "fromPromise",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数などを使って",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Observable",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を返すようにすれば少しだけ解決します。 しかし Flux 的な設計をするとなると Observable なのはストアだけで良くて、fetch 自体は単発で終わるほうが扱いやすいので特に欠点ではない気もしています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Angular の HttpClient は必須ではない",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "axios のようなライブラリを使ってフレームワーク非依存の独自 HttpClient を作れる",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "DI するかどうかはテストしやすさを考える",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次回は未定です。",
          "annotations": {}
        }
      ]
    }
  ]
}
