{
  "pageId": "e6e80b9f-4a39-4d25-905f-4b4711f09f37",
  "lastEditedAt": "2023-12-30T10:01:00.000Z",
  "slug": "angular-signal-equal-option",
  "locale": "ja",
  "properties": {
    "title": "Angular Signalの等値判定をカスタマイズする ",
    "date": "2023-08-09T04:05:00.000Z",
    "category": "Tech",
    "tags": ["Angular", "Signals"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "AngularのSignalには ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "equal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " オプションがあり、Signalの等値判定をカスタマイズできる。プリミティブ値ではないオブジェクトや配列などをSignalで管理する場合には、このオプションを設定する場面が増える。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Signalはいつ変更を通知するか",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Signalが保持するオブジェクトの変更を通知するタイミングは、以下のものが挙げられる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Signal#set",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " メソッドでセットされた値が、保存されている値と",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "等値でない",
              "annotations": {
                "bold": true
              }
            },
            {
              "type": "text",
              "text": "とき",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Signal#update",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " メソッドでセットされた値が、保存されている値と",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "等値でない",
              "annotations": {
                "bold": true
              }
            },
            {
              "type": "text",
              "text": "とき",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Signal#mutate",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " メソッドが呼び出されたあと",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "computed",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " 関数の算出関数が返す値が、保存されている値と",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "等値でない",
              "annotations": {
                "bold": true
              }
            },
            {
              "type": "text",
              "text": "とき",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "const name = signal('Alice');\n\nname.set('Alice'); // 新しくセットされた値が、保存されている値と等値である\nname.set('Bob'); // 新しくセットされた値が、保存されている値と等値でない\n\nname.update(value => 'Alice'); // 新しくセットされた値が、保存されている値と等値である\nname.update(value => 'Bob'); // 新しくセットされた値が、保存されている値と等値でない\n\nconst message = computed(() => {\n  return `Hello, ${name()}`; // nameが更新されたときに算出結果が変わる\n});"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Signal#mutate",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " メソッドはミュータブルなオブジェクトを操作するためのAPIであり、メソッドを呼び出すと必ず派生するSignalへ通知が行われる。「オブジェクトの参照は同じだけど、内包する値が変わったようだから、各自再チェックをしてください」ということだ。あまり多用したいメソッドではない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Signalの等値判定",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "さて上記にまとめたように、変更が通知されるかどうかを決定しているのは、新しい値が保存されている値と等値であるかという判定に基づいている。Angular Signal のデフォルトの等値判定は以下のロジックで計算される。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "/**\n * The default equality function used for `signal` and `computed`, which treats objects and arrays\n * as never equal, and all other primitive values using identity semantics.\n *\n * This allows signals to hold non-primitive values (arrays, objects, other collections) and still\n * propagate change notification upon explicit mutation without identity change.\n *\n * @developerPreview\n */\nexport function defaultEquals<T>(a: T, b: T) {\n  // `Object.is` compares two values using identity semantics which is desired behavior for\n  // primitive values. If `Object.is` determines two values to be equal we need to make sure that\n  // those don't represent objects (we want to make sure that 2 objects are always considered\n  // \"unequal\"). The null check is needed for the special case of JavaScript reporting null values\n  // as objects (`typeof null === 'object'`).\n  return (a === null || typeof a !== 'object') && Object.is(a, b);\n}"
    },
    {
      "type": "link_preview",
      "url": "https://github.com/angular/angular/blob/16.1.8/packages/core/src/signals/src/api.ts#L77-L93"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "基本的には ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Object.is",
          "href": "http://object.is/",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数で等値だと判定される値は等値だとされるが、例外がある。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "typeof",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 演算子が ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "object",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を返すような値は、それが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "null",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " でない場合には常に非等値であると判定されようになっている。つまり、Signal でプリミティブではない値を保持させた場合には、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "set",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " や ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "update",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " メソッドであっても内部の等値判定は常にfalseであり、そのSignalに依存する派生Signalに変更が通知される。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/is"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "JavaScriptではオブジェクト自身が等値判定のロジックを提供してくれない以上、フレームワーク側はあらゆるオブジェクトに通用するジェネリックな等値判定を持つしかない。（Javaの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "equals",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " メソッドのようなものがあれば違っただろうが）",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "参照が同じであっても内部の値が変わっている可能性を考慮すれば、変更しているはずなのに必要な通知がなされないことよりも、不要な通知がなされる可能性があるほうが、デフォルトの挙動としては安全である。この戦略はAngularコンポーネントの変更検知と同じである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "const user = signal({name: 'Alice'});\n\nuser.set(user()); // 同じオブジェクトだが、非等値であるとされる\nuser.update(value => value); // 同じオブジェクトだが、非等値であるとされる\nuser.mutate(value => value); // 同じオブジェクトだが、非等値であるとされる"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ただしこれはフレームワーク側の戦略であって、それぞれのオブジェクトの詳細を知っている開発者は、デフォルトではなくそれぞれのオブジェクト固有の等値判定ロジックをSignalに設定することができる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "たとえば次の例では、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "posX",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "posY",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の座標値を持つ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Point",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 型の値をSignalで管理するにあたって、オブジェクトの参照にかかわらず座標が同じなら等値であるというロジックを ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "equal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " オプションで定義している。等値関数だけでエクスポートしてもよいが、Signalオブジェクトの作成自体を ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "createXXXSignal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という形でラップしてしまうのが使いやすいだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { signal } from '@angular/core';\n\nexport type Point = {\n  posX: number;\n  posY: number;\n};\n\nexport function createPointSignal(initialValue?: Point) {\n  return signal<Point>(initialValue ?? { posX: 0, posY: 0 }, {\n    equal: (a, b) => a.posX === b.posX && a.posY === b.posY,\n  });\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "こうすることで、オブジェクトの参照が変わっていても座標が同じなら変更通知を行わないようにできる。派生するSignalで再計算される回数が減るため、パフォーマンスに負荷をかけにくくなる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Signalで保持されている座標に応じてCanvasに点を打つサンプルアプリを作ってみたが、この例では同じ座標が繰り返し入力されることが少ないので、あまり効果の実感は得られない。雰囲気だけ感じてほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "stackblitz",
      "url": "https://stackblitz.com/edit/angular-jatgsy?ctl=1&embed=1&file=src/main.ts"
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
