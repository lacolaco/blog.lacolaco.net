{
  "pageId": "12d3521b-014a-80f3-95ff-d9c289dd689e",
  "lastEditedAt": "2024-10-28T14:22:00.000Z",
  "slug": "angular-v19-linked-signal",
  "locale": "ja",
  "properties": {
    "title": "Angular v19: linkedSignal() の解説",
    "date": "2024-10-28T14:10:00.000Z",
    "category": "Tech",
    "tags": ["Angular", "Signals"],
    "canonicalUrl": "https://zenn.dev/lacolaco/articles/angular-v19-linked-signal"
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この記事ではAngular v19で新たに追加されるSignal関連の実験的API ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "linkedSignal()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " について解説する。なお、書いている時点で最新の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "v19.0.0-next.11",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " をベースにしているため、正式リリースまでに変更される可能性はある。また、そもそも実験的APIなのでリリース後にも変更されている可能性はあることに注意してほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "linkedSignal()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " とは何か？",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "linkedSignal()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を一言で説明すると、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "computed()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "signal()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を足して2で割ったようなものだ。言い換えれば、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "signal()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のように書き換え可能な",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "WritableSignal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "型でありつつ、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "computed()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のように別のシグナルの変更から派生した値を生成できる性質もある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "具体的なコード例で考えてみよう。ユーザーがセレクトボックスからアイテムを選択できるUIがあり、どのアイテムが選択されたのかを状態として保持する必要があるとする。次の例では ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "FavoriteFoodSelector",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " コンポーネントが、親コンポーネントからインプットとして与えられる",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "options",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "シグナルの値（選択候補）をセレクトボックスに表示している。そして、選択中の値を",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "selectedFood",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "シグナルで管理している。セレクトボックスからアイテムが選択されると、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "selectFood",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドを通じて値が更新される。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "const initialOptions = ['apple', 'banana', 'cheese'];\n\n@Component({\n  selector: 'app-favorite-food-selector',\n  template: `\n  <select #select [value]=\"selectedFood()\" (change)=\"selectFood(select.value)\">\n    <option value=\"\">--</option>\n    @for(option of options(); track option) {\n      <option [value]=\"option\">{{ option }}</option>\n    }\n  </select>\n  @if(selectedFood()) {\n    <p>{{ selectedFood() }} is selected</p>\n  } @else {\n    <p>Select your favorite food </p>\n  }\n  `,\n})\nexport class FavoriteFoodSelector {\n  options = input(initialOptions);\n  \n  selectedFood = /* ??? */\n  \n  selectFood(food: string) {\n    this.selectedFood.set(food); \n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "さて、このような実装で、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "selectedFood",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "シグナルはどのように作成できるだろうか。単純に考えれば、次のように",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "signal()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "によって書き換え可能な",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "WritableSignal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を作ることになるだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export class FavoriteFoodSelector {\n  options = input(initialOptions);\n  \n  selectedFood = signal<string|null>(null);\n  \n  selectFood(food: string) {\n    this.selectedFood.set(food); \n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ただし、ここで追加の要件がある。親コンポーネントから渡される",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "options",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が更新されたら、その時点で選択中の値は破棄して未選択状態にリセットしなければならないとしよう。どうすればそれが実現できるだろうか？まずは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使う方法が思い浮かぶかもしれない。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "options",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の値が変わったことをトリガーにして非同期的にリセットする方法だ。だがこの方法には問題があることは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "以前書いた記事で説明している",
          "href": "https://zenn.dev/lacolaco/articles/angular-v19-effect-changes",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export class FavoriteFoodSelector {\n  options = input(initialOptions);\n  \n  selectedFood = signal<string|null>(null);\n  \n  constructor() {\n\t  effect(() => {\n\t    this.options(); // 変更の購読のためのgetter呼び出し\n\t    this.selectedFood.set(null);\n\t  })\n  }\n  \n  selectFood(food: string) {\n    this.selectedFood.set(food); \n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "したがって、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使わずに",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "computed()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使った書き方によって実現するのが、v18までのプラクティスである。しかしこのシグナルを返すシグナルという方法はパターンとして知っていないと普通は思いつかないと思われるし、知っていたとしても複雑で直感的ではない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export class FavoriteFoodSelector {\n  options = input(initialOptions);\n  \n  selectedFood = computed(() => {\n\t  this.options(); // 変更の購読のためのgetter呼び出し\n\t  return signal<string|null>(null);\n  });\n\n  selectFood(food: string) {\n    this.selectedFood().set(food); \n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "前置きが長くなったが、ここで",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "linkedSignal()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が登場する。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "linkedSignal()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "はこの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "computed()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使って派生的に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "WritableSignal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を生成するパターンを標準化したAPIである。つまり、上記の例は次のように書き換えられる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export class FavoriteFoodSelector {\n  options = input(initialOptions);\n  \n  selectedFood = linkedSignal({\n    source: this.options,\n    computation: (): string | null => null, // Unselect on input change\n  });\n  \n  selectFood(food: string) {\n    this.selectedFood.set(food); // Linked signal is writable\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "linkedSignal()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は引数にオブジェクトを受け取る。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "source",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "フィールドはそのシグナルが派生元として依存する上流のシグナルを渡す。そして",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "computation",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "フィールドには",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "source",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のシグナルに変更があったときに値を生成する算出式を渡す。この場合だと",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "options",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "シグナルが変更されると、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "computation",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数を呼び出した結果として値がnullにリセットされることになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "一見すると",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "computed()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と同じように感じるが、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "linkedSignal()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が返すのは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "WritableSignal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "である。つまり、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "selectFood()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドで値を更新できる。普段は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "signal()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で生成された普通の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "WriableSignal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "として振る舞いつつ、上流のシグナルが変更されたときには自動計算によって値が更新されるわけである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "上述のように、あるコンポーネント内部の状態値が、コンポーネント内部での変更だけでなく上位の状態にも影響を受けて変更されるのであれば、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "linkedSignal()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "がマッチするだろう。上流から与えられた初期値に対して、ユーザー操作により変更が加えられるようなケースでは、これまでの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "signal()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "computed()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "よりもかなり簡潔な記述ができるようになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "linkedSignal()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "は、",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "signal()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "と",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "computed()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "の特性を組み合わせた新しいAPIである。",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "書き換え可能な",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "WritableSignal",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "でありながら、他のシグナルの変更から派生した値を生成できる。",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネント内部の状態が、内部での変更と上位の状態両方の影響を受ける場合に特に有用。",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "従来の",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "signal()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "と",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "computed()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "の組み合わせよりも、より簡潔で直感的な記述が可能。",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "実験的APIであるため、正式リリース前後で変更される可能性がある点に注意が必要。",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/angular/angular/pull/58189",
          "href": "https://github.com/angular/angular/pull/58189",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今回のサンプルコードはStackblitzに置いてあるので自由に使ってほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "stackblitz",
      "url": "https://stackblitz.com/edit/stackblitz-starters-fmerva?ctl=1&embed=1&file=src%2Fmain.ts"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
