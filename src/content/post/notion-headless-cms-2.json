{
  "pageId": "4047b3f1-3e88-4bca-b275-7dd81a6eef99",
  "lastEditedAt": "2023-12-27T07:22:00.000Z",
  "slug": "notion-headless-cms-2",
  "properties": {
    "title": "NotionヘッドレスCMS化記録 (2) ページプロパティの読み取りとMarkdown生成",
    "date": "2022-02-13T23:59:00.000Z",
    "tags": ["Notion", "Markdown", "Blog Dev"]
  },
  "content": [
    {
      "type": "link_preview",
      "url": "https://blog.lacolaco.net/2022/02/notion-headless-cms-1/"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "前回に引き続き、今回はNotion APIで取得したページのデータから記事のMarkdownファイルを生成するまでに苦労した点を書いていきたい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "ページプロパティの読み取り",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "前回は Notion 公式のJavaScript向けクライアントライブラリ（以下 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@notionhq/client",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ") を使ってページやブロックのデータを取得した。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/makenotion/notion-sdk-js",
          "href": "https://github.com/makenotion/notion-sdk-js",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "最終的に Hugo で記事としてビルド可能なMarkdownファイルを生成するためには、記事のタイトルやタグなどを保持する Frontmatter 情報と、記事の本文の情報の両方を Notion のページから読み取って変換しなければならない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "しかしこれも思いどおりにはいかず、いくつかの工夫が必要だった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "ページプロパティオブジェクトのキーがIDじゃない",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "前回の記事で ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "PageObject",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 型が ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "properties",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " フィールドを持つように型を定義したが、このフィールドで提供されるページプロパティ情報がなかなか扱いづらいデータモデルだった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Notion のページプロパティはページに紐付けられるメタ情報のセットで、次の画像のようなプロパティ名と値のKey-Valueマップのデータである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": false,
      "url": "/src/content/images/notion-headless-cms-2/3c6255ea-b6c7-4055-8126-638d2819f0c3/a91ff2bf-6fba-4f51-a2f8-780243849007.png",
      "caption": [
        {
          "type": "text",
          "text": "ページプロパティ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "問題はこのプロパティ情報を格納した ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "PageObject",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "properties",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " オブジェクトが、自由記述のプロパティ表示名をキーとして、プロパティ固有のIDが値側に格納されていることである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "  properties: Record<string, {\n      type: \"title\";\n      title: Array<RichTextItemResponse>;\n      id: string;\n  } | {\n      type: \"rich_text\";\n      rich_text: Array<RichTextItemResponse>;\n      id: string;\n  } | ...\n  }>;"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Notion の GUI 上ではいつでもプロパティ表示名を変更できるため、キー側をもとに特定のプロパティを探索するのは堅牢性に欠ける。まずはプロパティのIDをキーにしたマップオブジェクトに詰め替えることから始めることになった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "const properties = Object.fromEntries(\n  Object.values(page.properties).map((prop) => [prop.id, prop])\n);"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "プロパティの型をプロパティタイプから推論する",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Notion のページプロパティはいくつものデータ型をサポートしており、プロパティオブジェクトの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "type",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " フィールドからその種別を特定できる。逆にいえば、プロパティIDで取得しただけではすべてのデータ型のUnion型になっているためそれぞれのデータ型固有のフィールドにアクセスできない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そこで、プロパティのマップオブジェクトからデータ型を指定しつつ特定のプロパティを取り出すために、次のようなユーティリティ関数を作成した。IDとデータ型が一致すればそのプロパティを返し、一致しなければ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "null",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を返す。そして取り出したプロパティは Type Guard によりデータ型が確定する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export function createPagePropertyMap(page: PageObject) {\n  const properties = Object.fromEntries(\n    Object.values(page.properties).map((prop) => [prop.id, prop])\n  );\n  return {\n    get<PropType extends string>(id: string, type: PropType) {\n      const prop = properties[id];\n      if (!prop || !matchPropertyType(prop, type)) {\n        return null;\n      }\n      return prop;\n    },\n  } as const;\n}\n\nfunction matchPropertyType<PropType extends string, Prop extends { type: string }>(\n  property: Prop,\n  type: PropType,\n): property is MatchType<Prop, { type: PropType }> {\n  return property.type === type;\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このユーティリティを使ってページプロパティ情報からブログ記事のメタデータとなる Frontmatter 情報が作成できるようになった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "async renderPost(post: NotionPost, options: { forceUpdate?: boolean } = {}) {\n  const { created_time: remoteCreatedAt, last_edited_time: remoteUpdatedAt, archived } = post;\n  if (archived) {\n    return;\n  }\n  const props = createPagePropertyMap(post);\n  const title = props.get('title', 'title')?.title[0]?.plain_text;\n  const slug = props.get('Y~YJ', 'rich_text')?.rich_text[0]?.plain_text ?? null;\n  const tags = props.get('v%5EIo', 'multi_select')?.multi_select.map((node) => node.name) ?? [];\n  const publishable = props.get('vssQ', 'checkbox')?.checkbox ?? false;\n  if (title == null || slug == null) {\n    console.warn(`title or slug is null: ${JSON.stringify(post, null, 2)}`);\n    return;\n  }\n\tconst frontmatter = renderFrontmatter({\n    title,\n    date: remoteCreatedAt,\n    updated_at: remoteUpdatedAt,\n    tags,\n    draft: !publishable,\n    source: post.url,\n  });\n\t// ...\n}\n\nexport function renderFrontmatter(params: Record<string, unknown>): string {\n  const frontmatter = yaml.dump(params, { forceQuotes: true });\n  return [`---`, frontmatter, `---`].join('\\n');\n}"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Markdownファイルの生成",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ページのブロックデータをもとにMarkdown文字列へ変換し、記事ファイルとして書き込むのはそれほど苦労しなかったが、注意するポイントはあった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "ファイルアップロードの画像ブロックはURLが失効する",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Notion の画像ブロックは外部URLを指定するものと、Notionへ直接画像をアップロードして埋め込むものと2種類あるが、ファイルアップロードによる画像ブロックはURLが一定時間で失効する。そのため、ブログ記事として永続化させるためにはURLが生きているうちに画像をダウンロードし、レポジトリ内へ保存したうえで相対パスによって参照することになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "const renderer: BlockObjectRendererMap = {\n\t// ...\n  image: async (block) => {\n    switch (block.image.type) {\n      case 'external':\n        return `![${block.image.caption}](${block.image.external.url})\\n\\n`;\n      case 'file':\n        // 画像をDLしてローカルファイルの相対パスを返す\n        const imagePath = await externalImageResolver(block.image.file.url);\n        return `![${block.image.caption}](/img/${imagePath})\\n\\n`;\n    }\n  },\n  // ...\n} as const;"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "ネストしたリストは子ブロック扱い",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "前回の記事でも触れたが、箇条書きリスト、番号付きリストはネストさせると子ブロックを持つようになる。ネストの深さに応じてインデントされるように、前回保持させた ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "depth",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " フィールドを使う。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "    bulleted_list_item: (block) => {\n      const indent = '\\t'.repeat(block.depth);\n      const text = renderRichTextArray(block.bulleted_list_item.text);\n      return `${indent}- ${text}\\n`;\n    },\n    numbered_list_item: (block) => {\n      const indent = '\\t'.repeat(block.depth);\n      const text = renderRichTextArray(block.numbered_list_item.text);\n      return `${indent}1. ${text}\\n`;\n    },"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "リッチテキストの変換",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Notion のテキストはほとんどのブロックでリッチテキストとして表現され、文字装飾が可能だ。すべての装飾をMarkdownへ変換しても保持するのは大変なので、ブログ記事として必要なものに絞って変換した。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "annotations",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のそれぞれのフラグは排他ではなくすべての組み合わせがありえるため、優先順をつけて再帰的に処理することとした。ブログ側ではインラインコードの装飾は除去し、Markdown側で2文字のマーカーが必要なものから順番に処理する。リンクや改行の処理は最後になるようにした。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "type RichTextObject = {\n  plain_text: string;\n  href: string | null;\n  annotations: {\n    bold: boolean;\n    italic: boolean;\n    strikethrough: boolean;\n    underline: boolean;\n    code: boolean;\n  };\n};\n\nfunction renderRichTextArray(array: RichTextObject[]): string {\n  return array.map(renderRichText).join('');\n}\n\nfunction renderRichText(richText: RichTextObject): string {\n  const { plain_text, href, annotations } = richText;\n  if (annotations.code) {\n    return `\\`${plain_text}\\``;\n  }\n  if (annotations.bold) {\n    return renderRichText({\n      ...richText,\n      plain_text: `**${plain_text}**`,\n      annotations: { ...annotations, bold: false },\n    });\n  }\n  if (annotations.italic) {\n    const mark = plain_text.startsWith('*') ? '_' : '*';\n    return renderRichText({\n      ...richText,\n      plain_text: `${mark}${plain_text}${mark}`,\n      annotations: { ...annotations, italic: false },\n    });\n  }\n  if (annotations.strikethrough) {\n    return renderRichText({\n      ...richText,\n      plain_text: `~~${plain_text}~~`,\n      annotations: { ...annotations, strikethrough: false },\n    });\n  }\n  if (annotations.underline) {\n    return renderRichText({\n      ...richText,\n      plain_text: `__${plain_text}__`,\n      annotations: { ...annotations, underline: false },\n    });\n  }\n  if (href) {\n    return renderRichText({ ...richText, plain_text: `[${plain_text}](${href})`, href: null });\n  }\n  if (plain_text.includes('\\n')) {\n    return plain_text.replace(/\\n/g, '  \\n');\n  }\n  return plain_text;\n}"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ・次回予告",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "こうして Notion APIから取得したページデータをもとにMarkdownファイルを生成することができた。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次回は、この記事生成を含むデプロイフローが Notion で記事を書いたあと自動的に実行されるようにするための、GitHub Actionsのワークフローについて書く。",
          "annotations": {}
        }
      ]
    }
  ]
}
