{
  "pageId": "9de77b78-554f-4e23-b970-c8ff5a57d2ce",
  "lastEditedAt": "2023-12-30T10:01:00.000Z",
  "slug": "angular-signals-and-component-communication",
  "properties": {
    "title": "Angular Signalsとコンポーネント間通信",
    "date": "2023-08-02T03:02:00.000Z",
    "tags": ["Angular", "Signals"],
    "canonicalUrl": "https://zenn.dev/lacolaco/articles/angular-signals-and-component-communication"
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angularアプリケーションの実装でSignalsを使う場面が増えたので、コンポーネント間の通信において手に馴染む実装パターンがわかってきた。それをいくつかメモしておく。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Plain Input/Output ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "子コンポーネントのほうは何の変哲もない、普通のInput/Outputを持っている。親はInput/Outputに対するバインディングにSignalを直接割り当てる。いままでのAngularと大きく変わらないSignalの使い方だと思われる。これだと単に親コンポーネントの状態管理がRxJSのSubjectからSignalに置き換わっただけだという感触。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: 'app-sushi-selector',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  template: `\n    <select [ngModel]=\"value\" (ngModelChange)=\"valueChange.emit($event)\">\n      <option *ngFor=\"let option of sushiOptions\" [ngValue]=\"option\">\n        {{ option }}\n      </option>\n    </select>\n  `,\n})\nexport class SushiSelectorComponent {\n  @Input() value: SushiType = 'tuna';\n  @Output() valueChange = new EventEmitter<SushiType>();\n\n  readonly sushiOptions = sushiOptions;\n}\n\n@Component({\n  selector: 'my-app',\n  standalone: true,\n  imports: [CommonModule, SushiSelectorComponent],\n  template: `\n    <app-sushi-selector \n      [value]=\"$selectedSushi()\" \n      (valueChange)=\"$selectedSushi.set($event)\"\n    /> \n    <p> Selected Sushi: {{ $selectedSushi() }} </p>\n  `,\n})\nexport class App {\n  readonly $selectedSushi = signal<SushiType>('tuna');\n}"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "stackblitz",
      "url": "https://stackblitz.com/edit/angular-yscmpy?ctl=1&embed=1&file=src/main.ts"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ところで、Signalの変数名に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プレフィックスをつけるアイデアは以下の記事を真似してみている。記号的に SignalのSに似てもいるので、悪くないように思うが別になくても困りはしない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://dev.to/oz/application-state-management-with-angular-signals-1371"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Signalized Input/Output ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "子コンポーネントの内部でもSignalを使うパターンとして、まずはInput/Outputのインターフェースはそのままに、内部の状態保持をSignalizeしたもの。クラスフィールドとして ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "$value",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " Signalを持ち、InputはこのSignalへの入力に、OutputはこのSignalからの出力に接続する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "親コンポーネントとのインターフェースにだけプレーンなオブジェクトを使い、内部ではすべてSignalを中心に実装する。これは現段階のSignals APIで可能なアプローチの中ではけっこう気に入っている。Signalをどう使ったらいいか迷っている人はとりあえず真似してみてもよいと思う。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: 'app-sushi-selector',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  template: `\n    <select [ngModel]=\"$value()\" (ngModelChange)=\"$value.set($event)\">\n      <option *ngFor=\"let option of sushiOptions\" [ngValue]=\"option\">\n        {{ option }}\n      </option>\n    </select>\n  `,\n})\nexport class SushiSelectorComponent {\n  protected readonly $value = signal<SushiType>('tuna');\n\n  @Input() set value(v: SushiType) {\n    this.$value.set(v);\n  }\n  @Output() valueChange = toObservable(this.$value);\n\n  readonly sushiOptions = sushiOptions;\n}"
    },
    {
      "type": "stackblitz",
      "url": "https://stackblitz.com/edit/angular-xymevb?ctl=1&embed=1&file=src/main.ts"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Direct Signal Input",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "最後のパターンは、親コンポーネントが持っているSignalオブジェクトをそのままInputとして渡すアプローチで、たしかにこれは簡潔さでいえばもっとも簡潔になる。SignalというオブジェクトそのものがInputとOutputの機能を持っているわけなので、わざわざコンポーネントにOutputを定義しなくても子がSignalの値を更新すれば親はその通知を受けられるというわけである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これは簡潔ではあるものの、まだ積極的に取り入れるには早いように思う。メンタルモデルとして、AngularコンポーネントのInputというのはこれまで値渡しであることがほぼ常であり、子から親へのメッセージはイベントによって表現されてきた。その定石を崩し、Inputに渡したSignalの中身が子によって書き換えられると親のほうに直接逆流するようになるのは、リアクティブプログラミングとしては直感的だが、状態の変更経路が予測しづらくなる点に注意が必要だ。正直まだおすすめできない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: 'app-sushi-selector',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  template: `\n    <select [ngModel]=\"$value()\" (ngModelChange)=\"$value.set($event)\">\n      <option *ngFor=\"let option of sushiOptions\" [ngValue]=\"option\">\n        {{ option }}\n      </option>\n    </select>\n  `,\n})\nexport class SushiSelectorComponent {\n  @Input() $value: WritableSignal<SushiType> = signal('tuna');\n\n  readonly sushiOptions = sushiOptions;\n}\n\n@Component({\n  selector: 'my-app',\n  standalone: true,\n  imports: [CommonModule, SushiSelectorComponent],\n  template: `\n    <app-sushi-selector \n      [$value]=\"$selectedSushi\" \n    /> \n    <p> Selected Sushi: {{ $selectedSushi() }} </p>\n  `,\n})\nexport class App {\n  readonly $selectedSushi = signal<SushiType>('tuna');\n}"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "stackblitz",
      "url": "https://stackblitz.com/edit/angular-2fgxwr?ctl=1&embed=1&file=src/main.ts"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "こうなってくるとそのInputがSignalの参照を要求し、親子間で直接的なデータの同期をするためのものであることを示すのに ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プレフィックスは役立ちそうな予感はする。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ちなみにこのような双方向バインディングについては ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "model",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " APIで検討されているため、このメンタルモデルに慣れておくと将来的にはSignalをより使いこなす準備とも言えるかもしれない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/angular/angular/discussions/49682",
          "href": "https://github.com/angular/angular/discussions/49682",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
