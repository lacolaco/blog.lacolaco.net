{
  "pageId": "02ff5a35-36af-4d69-9609-1ea3f818ad95",
  "lastEditedAt": "2023-06-03T11:23:00.000Z",
  "slug": "angular-inputs-stream-pattern",
  "properties": {
    "title": "Angular: Input を Observable で扱えるようにする Inputs Stream パターン",
    "date": "2023-02-14T00:40:00.000Z",
    "tags": ["Angular", "tech", "rxjs", "rx-angular"],
    "canonicalUrl": "https://zenn.dev/lacolaco/articles/angular-inputs-stream-pattern"
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular コンポーネントへのインプット ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@Input()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に渡される値の変化を、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Observable",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で扱いたいことは少なくない。今回は最近試していて手触りがよい ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@rx-angular/state",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を使ったインプットの Observable化を紹介する。このパターンを “Inputs Stream” パターンと名付けたい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "stackblitz",
      "url": "https://stackblitz.com/edit/angular-ivy-3cvcwd?ctl=1&embed=1&file=src/app/app.component.html"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "基本方針",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このパターンは次の基本方針から構成される。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネントのインプットをsetterメソッドで実装する",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "setterメソッドは渡された値をコンポーネント内部の",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "インプットストア",
              "annotations": {
                "bold": true
              }
            },
            {
              "type": "text",
              "text": "に格納する",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネントのロジックやテンプレートに使う値は、インプットストアを購読することでリアクティブに取り出す",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "inputs: RxState<Inputs>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今回は例として ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@rx-angular/state",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を使ったインプットストアの実装を示している。単に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "new RxState()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " しているだけなので特筆することはない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "private readonly inputs = new RxState<{ name: string }>();"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Input setter",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "こちらもインプットストアの値を更新しているだけで特別なことはしていない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Input()\nset name(value: string) {\n  this.inputs.set({ name: value });\n}"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Use inputs",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このパターンの利点はインプットの変更を ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Observable",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で購読できることにあるから、そのように使わないともったいない。同期的に扱うならそもそもこのパターンが不要である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今回の例はぶっちゃけ同期的でもいい例だが、たとえば ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "message",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の構築に非同期APIの呼び出しが必要なケースなどをイメージするとよい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "ngOnInit() {\n  // initial state\n  this.state.set({ message: '' });\n  // bind inputs stream to component state stream\n  this.state.connect(\n    'message',\n    this.inputs.select('name').pipe(\n      map((name) => `Hello ${name}!`),\n    ),\n  );\n}"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Pros / Cons",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Inputs Streamパターンの利点はざっくり以下の点が思いつく。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネントが同期的に直接持つフィールドを減らせる",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "つまり、なんらかの入力を受けてリアクティブに連動しない状態値を減らせる",
                      "annotations": {}
                    }
                  ],
                  "children": []
                },
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "結果、同じ情報のアプリケーション内での多重管理が起きにくくなる",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "ほとんどのコンポーネントが持つフィールドがパターン化される",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "コンポーネントごとのインプットの差はインプットストアの型の違いに落とし込まれる",
                      "annotations": {}
                    }
                  ],
                  "children": []
                },
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "どのコンポーネントにも同じ名前で同じ使われ方のインプットストアがあるという状態",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "他の RxJS ベースのライブラリとのやりとりに変換作業が不要になる",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "一方で、欠点として以下の点も思いつく。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "当然だが、 ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "Observable",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " が苦手なら難しい",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "自前で ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "BehaviorSubject",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " など使ってインプットストアを実装してもいいが、汎用性をもたせようとすると結構大変なので現実的には何らかのライブラリに頼ることになる",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "今回は ",
                      "annotations": {}
                    },
                    {
                      "type": "text",
                      "text": "@rx-angular/state",
                      "annotations": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " を使ったが、当然他のものでもなんでもよい",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "とはいえ慣れるとコンポーネントの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "this.xxx",
          "href": "http://this.xxx",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に直接保持する状態がなくなることで振る舞いの予測可能性があがり、テストもしやすいように感じているので、ぜひおすすめしたい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今回のサンプルもそうだが、コンポーネントが状態値を単一のストリームでテンプレートに渡す Single State Stream パターンとの相性もよいので、こちらも改めて紹介しておきたい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://blog.lacolaco.net/2019/07/angular-single-state-stream-pattern/"
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
