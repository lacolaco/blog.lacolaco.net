{
  "pageId": "4b13c6c0-76da-42c3-81d1-81affb15f518",
  "lastEditedAt": "2023-12-30T10:01:00.000Z",
  "slug": "angular-host-element-with-tailwindcss-classes",
  "properties": {
    "title": "Angular: ホスト要素にTailwindCSSのクラスを付与する",
    "date": "2023-09-06T03:58:00.000Z",
    "tags": ["Angular", "tailwindcss"],
    "canonicalUrl": "https://zenn.dev/lacolaco/articles/angular-host-element-with-tailwindcss-classes"
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular アプリケーションで TailwindCSS を使っているとき、コンポーネントやディレクティブのホスト要素にスタイルを付与するのが書きにくくて困っていた。コンポーネントHTML内の子要素については ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "class",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 属性にクラスを追加するだけなので、VSCodeの TailwindCSS IntelliSenseが期待通りに機能するが、ホスト要素にクラスを付与するAPIはHTMLの外なので、入力補完の効かない自由文字列で記述しなければならなかったからだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss"
    },
    {
      "type": "image",
      "external": false,
      "url": "/src/content/images/angular-host-element-with-tailwindcss-classes/3c6255ea-b6c7-4055-8126-638d2819f0c3/5391c161-d5f9-4447-b38b-5ff29f5d786a.png",
      "caption": "hostメタデータのclassプロパティはTailwindCSS Extensionにクラスを記述する場所だと認識されていない"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "TailwindCSS のユーティリティファーストは入力補完があってはじめてまともに実用性があるアプローチだと考えているので、この使いにくさはAngularアプリケーションでTailwindCSSを使う上で悩みのタネだった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これはどうにかできないかと長らく思っていたのだが、あらためてExtensionの設定項目を眺めてみると ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "classRegex",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という設定があった。実はけっこう前から追加されているらしく、これを使えば任意の正規表現にヒットする行でIntelliSenseを有効にできる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://zenn.dev/shon0/articles/2aa72060fb824d"
    },
    {
      "type": "link_preview",
      "url": "https://github.com/tailwindlabs/tailwindcss/issues/7553"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そういうわけで、次のようにVSCodeの設定を記述した。 このJSONは個人設定に書いてもいいが、チーム開発なら ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": ".vscode/settings.json",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に書いておけば個別の設定なしに自動的に適用できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "json",
      "filename": "",
      "text": "{\n    \"tailwindCSS.experimental.classRegex\": [\n        \"class\\\\:\\\\s*[\\\"'`]([^\\\"'`]*).*?[\\\"'`]\"\n    ]\n}"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "結果、無事にコンポーネントの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "host.class",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プロパティでもTailwindCSSのクラス入力補完が使えるようになった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": false,
      "url": "/src/content/images/angular-host-element-with-tailwindcss-classes/3c6255ea-b6c7-4055-8126-638d2819f0c3/b91070c2-7095-4738-b736-4c57828d7c62.png",
      "caption": "classプロパティの中で TailwildCSS の入力補完が効くようになった"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "スタンドアローンコンポーネントで書くようになってから、テンプレートHTMLはインラインで書くことが増えたが、CSSもインラインで書くのにこの点だけがネックだったので、それが解決して嬉しい。",
          "annotations": {}
        }
      ]
    }
  ]
}
