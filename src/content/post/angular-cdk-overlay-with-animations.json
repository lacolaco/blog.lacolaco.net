{
  "pageId": "1913521b-014a-80f0-9c8a-f2b4dde093d1",
  "lastEditedAt": "2025-02-05T02:50:00.000Z",
  "slug": "angular-cdk-overlay-with-animations",
  "locale": "ja",
  "properties": {
    "title": "Angular: CDK Overlay でフェードアウトするポップアップを作る",
    "date": "2025-02-05T02:34:00.000Z",
    "category": "Tech",
    "tags": ["Angular", "Angular CDK", "CSS"],
    "canonicalUrl": "https://zenn.dev/lacolaco/articles/angular-cdk-overlay-with-animations"
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular CDK の Overlay APIは非常に便利で、ポップアップのように画面の中でレイヤーが一段上のオーバーレイ表示を簡単に実現できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://material.angular.io/cdk/overlay/overview"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このOverlayを使ったことがある開発者なら一度はぶつかったことのある壁といえば、オーバーレイに表示したコンポーネントが閉じるときにどうやってアニメーションするかだろう。たとえば、ユーザーになにかのメッセージを一定時間だけ表示してフェードアウトする、いわゆるトーストメッセージというやつを作ってみよう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": false,
      "path": "angular-cdk-overlay-with-animations/3c6255ea-b6c7-4055-8126-638d2819f0c3/8a472097-9cb7-43ee-ab5c-b1a18cb1a7c3.gif",
      "caption": "テキストを表示して一定時間後にフェードアウトするトーストメッセージ"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "トーストとして表示されるビューを",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ToastContainer",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "コンポーネントとし、素朴にCDK Overlayを使うと次のようなコードになる。動的に生成したコンポーネントはそれを破棄するのも開発者の責任である。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "overlay.dispose()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を呼び出すことでオーバーレイとその上に表示されていたコンポーネントがすべて破棄される。これでトーストが一定時間後に消えるようになった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  template: `\n    <div>{{message()}}</div>\n  `,\n  styles: `\n  :host {\n    display: block;\n    padding: 16px;\n    border-radius: 8px;\n    background-color: lightblue;\n  }\n  `,\n})\nexport class ToastContainer {\n  readonly message = input('');\n}\n\n@Component({\n  selector: 'app-root',\n  template: `\n  <h1>Toast Demo</h1>\n\n  <button (click)=\"openToast()\">open toast</button>\n  `,\n})\nexport class App {\n  readonly #cdkOverlay = inject(Overlay);\n\n  openToast() {\n    const overlay = this.#cdkOverlay.create({\n      positionStrategy: this.#cdkOverlay\n        .position()\n        .global()\n        .centerHorizontally()\n        .centerVertically(),\n    });\n    const toast = overlay.attach(new ComponentPortal(ToastContainer));\n    // set toast message\n    toast.setInput('message', 'Hello Angular!');\n    // show toast for 2000ms\n    setTimeout(() => {\n      overlay.dispose();\n    }, 2000);\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "さて、ここでトーストが消えるときにフェードアウトアニメーションを挟むとする。トーストとして表示するのは2000msだが、そこでオーバーレイを消してしまうとアニメーションするまえにコンポーネントが消えてしまう。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "アニメーションの完了を待ってからオーバーレイを破棄する",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "にはどうするといいだろうか。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今回紹介するのは CSS Animations APIの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "animationend",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " イベントを使ったアプローチである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://developer.mozilla.org/ja/docs/Web/API/Element/animationend_event"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "その名前のとおり、CSSアニメーションが終了したときにJavaScriptを実行できる機能で、当然Angularのコンポーネントでも使用できる。このイベントを使い、ToastContainerが呼び出し元に対してトーストの退出が終わったことを通知できるようにしよう。この方法は、Angular Materialで同様のUIを提供しているSnackBar APIの実装をベースにしている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://material.angular.io/components/snack-bar/overview"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "registerOnCompleteExit",
          "annotations": {
            "code": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "まずは呼び出し元との間のインターフェースを作成する。アニメーションが終了してトーストが完全に消えたときに呼び出されるコールバック関数を、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "registerOnCompleteExit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "というメソッドで登録できるようにしておこう。この命名はAngularの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ControlValueAccessor",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で定義されている",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "registerOnChange",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を意識して似せている。また、トーストの退出アニメーションを開始するための",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "exit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドも用意する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "呼び出し元では、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "registerOnCompleteExit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドに渡すコールバック関数でオーバーレイの破棄を行うようにしておき、トーストの表示時間が経ったあとに",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "exit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドを呼び出している。これでインターフェースは揃った。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export class ToastContainer {\n\t//...\n\n  #onCompleteExit?: () => void;\n\n  registerOnCompleteExit(fn: () => void) {\n    this.#onCompleteExit = fn;\n  }\n  \n  exit() {\n    // todo\n  }\n}\n\nexport class App {\n  readonly #cdkOverlay = inject(Overlay);\n\n  openToast() {\n    //...\n    // clean up the overlay on toast exit\n    toast.instance.registerOnCompleteExit(() => {\n      overlay.dispose();\n    });\n    // show toast for 2000ms\n    setTimeout(() => {\n      toast.instance.exit();\n    }, 2000);\n  }\n}"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "animationend",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "残りはToastContainerの実装である。やることは2つある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "exit",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "メソッドが呼び出されたらフェードアウトアニメーションを開始する",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "フェードアウトアニメーションが完了したら登録されたコールバック関数を呼び出して通知する",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "まずはアニメーションを開始させる仕組みを作ろう。使うのはCSSとSignal、クラスバインディングだけでいい。内部的に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "animationState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "フィールドを持ち、初期値を設定しておく。exitメソッドが呼び出されたらこの値が",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "exit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に変更する。あとは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "animationState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の値に連動して",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "toast-container-exit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "クラスをコンポーネントのホスト要素に付与し、このクラスを使ってCSSアニメーションを書けばよい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "\n@Component({\n  styles: `\n  :host {\n    opacity: 1;\n  }\n\n  :host(.toast-container-exit) {\n    animation: toast-exit 500ms linear forwards;\n  }\n   \n  @keyframes toast-exit {\n    from {\n      opacity: 1;\n    }\n\n    to {\n      opacity: 0;\n    }\n  }\n  `,\n  host: {\n    '[class.toast-container-exit]': \"animationState() === 'exit'\",\n  },\n})\nexport class ToastContainer {\n  protected readonly animationState = signal<'visible' | 'exit'>('visible');\n\n  exit() {\n    this.animationState.set('exit');\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "続いて、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "toast-exit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "アニメーションが終わったときに",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "animationend",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "イベントを受け取る。アニメーションが実行されるホスト要素に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "animationend",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "イベントバインディングを追加し、コンポーネントの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "onAnimationEnd",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドを呼び出す。その中で最初に受け取っていた退出完了時のコールバック関数を呼び出せば完成だ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  host: {\n    '[class.toast-container-exit]': \"animationState() === 'exit'\",\n    '(animationend)': 'onAnimationEnd($event)',\n  },\n})\nexport class ToastContainer {\n  //...\n\n  #onCompleteExit?: () => void;\n\n  protected onAnimationEnd($event: AnimationEvent) {\n    this.#onCompleteExit?.();\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "実装の細かい部分はStackblitzのサンプルコードを見てほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "stackblitz",
      "url": "https://stackblitz.com/edit/stackblitz-starters-jtn3rbyy?ctl=1&embed=1&file=src%2Fmain.ts"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Why not ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@angular/animations",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ?",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今回の方法ではCSSアニメーションを使っているが、Angularフレームワークにはアニメーション機能を提供するAPIもある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://angular.jp/guide/animations"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular Materialでも少し前まではSnackBarなどのアニメーションにAngular Animations APIを使っていた。しかしv19に入ったあたりからその使用箇所をCSSアニメーションに置き換えている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/angular/components/pull/30381"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そしてとうとうすべてのコンポーネントでAngular Animationsを使っていない状態となり、Angular Materialの依存関係から完全に消えることになった。Animations依存だったAPIはv19系で非推奨となり、v21で削除される見込みだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/angular/components/pull/30446"
    },
    {
      "type": "link_preview",
      "url": "https://github.com/angular/components/pull/30435"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "なぜこのような書き換えを行ったのか、背景のすべてはわからないが、少なくともそのひとつはAngular Animations APIが抱えるメモリリーク問題である。Angular Materialの中でアニメーションを多用する",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MatSort",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "コンポーネントにはメモリリークの問題が指摘されていた。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/angular/angular/issues/54149"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これ以外にもMatSortには多くのアニメーション実装の複雑さに起因する問題があり、MatSortのアニメーション実装をシンプルにする修正が入った。これがこの脱Angular Animationsの端緒であった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/angular/components/pull/30057"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "こうした状況を踏まえて、今後は可能ならCSSアニメーションによる実装を選択するのが安心だろう。Web標準の機能でシンプルに解決できるならわざわざフレームワークのAPIを間に挟む必要はない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Angular CDKのOverlayを使ったポップアップUIにフェードアウトアニメーションを実装する方法を紹介した",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "CSSアニメーションと animationend イベントを組み合わせることで、アニメーション完了を待ってからオーバーレイを破棄する実装が可能",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Angular MaterialのSnackBarと同様のアプローチを採用し、シンプルで信頼性の高い実装を実現できた",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
