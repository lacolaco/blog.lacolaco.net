{
  "pageId": "5ae80d32-0b24-4a6b-b01b-7ffa6feb932a",
  "lastEditedAt": "2023-12-30T10:11:00.000Z",
  "slug": "platform-prividers-of-angular-2",
  "properties": {
    "title": "Angular 2のPlatform Provider",
    "date": "2016-04-22T00:00:00.000Z",
    "tags": ["Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 2のDependency Injection(DI)は主にサービスクラスのインスタンスを注入するのに用いられますが、 実は他にも便利な使い方がいくつかあります。 今回はその中から ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "PLATFORM_DIRECTIVES",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "PLATFORM_PIPES",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の使い方を紹介します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Angular 2のProviderと",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "multi",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "オプション",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "まずはじめに、Angular 2のProviderの仕組みについておさらいしましょう。 もしAngular 2のDIがさっぱりわからない方は、先に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Angular2のDIを知る",
          "href": "http://qiita.com/laco0416/items/61eed550d1f6070b36ab",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " を読むといいかもしれません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 2のDIは基本的に、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "トークン",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " に対して値をセットします。 TypeScriptでは「型ベースのDI」とよく言われますが、これは型(型アノテーションに使われているクラス)がトークンになっています。 このトークンはクラスじゃなくてもよくて、文字列でも何でも、オブジェクトであれば何でも許容されます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "providers: [\n    MyClass, // 自動的にMyClassがインスタンス化される\n    new Provider(MyClass, {useClass: MyClass}), // 上と同義\n    new Provider(\"myValue\", {useValue: \"value\"}, // 文字列をトークンにする \n]"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 2では、トークンを定数として提供して、ユーザーが値を自由にセットできるようにしているものがいくつかあります。 代表的なのは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "APP_BASE_HREF",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "です。これはAngular 2の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Location",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "がベースパスとして使うバスを設定するためのトークンです",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "new Provider(APP_BASE_HREF, {useValue: \"/basepath/\"})"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "さらにもう一つ重要なのは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "＠Component",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "bootstrap",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "でProviderが要求される場面では、Providerの配列を渡せるということです。 配列を渡した場合は内部で自動的に展開されるので、複数のProviderが依存しあっている場合に1つの配列にまとめることができます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "const MY_PROVIDERS = [\n    MyClassA,\n    new Provider(MyClassB, {useValue: new MyClassB(\"initial\")}),\n    new Provider(MyClassC, {\n        useFactory: (myClassA: MyClassA, myClassB: myClassB) => {\n            myClassA.init();\n            return new MyClassC(myClassA, myClassB);\n        },\n        deps: [MyClassA, MyClassB]\n    }\n]\n\n...\n\nproviders: [\n     MY_PROVIDERS\n]"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "multi",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " オプション",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "さて、Angular 2のDIの基礎を振り返ったところで、ここから先の話で必要になるのが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "multi",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "オプションです。 Providerは、同じトークンに対して2回値をセットすると、先にProvideした方は上書きされてしまいます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "[\n    MyClass,\n    new Provider(MyClass, {useClass: MockMyClass}) // 上書きする\n]"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "multi",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "オプションは、同じトークンに対して複数のProvideを行うときに、上書きではなく ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "追加",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " を行います。 次の例では、複数のクラスをまとめるトークンを作り、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "multi",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で追加しています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "[\n    new Provider(MY_PROVIDERS, {useClass: MyClassA, multi: true}),\n    new Provider(MY_PROVIDERS, {useClass: MyClassB, multi: true}),\n    new Provider(MY_PROVIDERS, {useClass: MyClassC, multi: true}),\n]"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このオプションを使うことで、配列をInjectしたい場合にその要素を動的に追加することができます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "PLATFORM_DIRECTIVES",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " トークン",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "というわけで、ようやく本題に入れます！ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "PLATFORM_DIRECTIVES",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "トークンは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "multi",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "オプションでProviderを追加されることを想定してAngular 2が提供しているものです。 その名の通り、プラットフォーム全体で使えるディレクティブを提供するトークンです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "PLATFORM_DIRECTIVES - ts",
          "href": "https://angular.io/docs/ts/latest/api/core/PLATFORM_DIRECTIVES-let.html",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "例えば、アプリケーション全体で使うモーダルのコンポーネント ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ModalComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を作ったとしましょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n    selector: \"my-modal\",\n    template: `...`\n})\nclass ModalComponent {\n    ...\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このコンポーネントを別のコンポーネントから使うには、使う側のコンポーネントの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "directives",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " にクラスを指定しないといけません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n    selector: \"my-app\",\n    template: \"<my-model></my-model>\",\n    directives: [ModalComponent]\n})\nclass AppComponent {\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ModalComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を他にも多くのコンポーネントから呼び出す時、毎回",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "directives",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を設定するのは面倒ですね？ そんな時に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "PLATFORM_DIRECTIVES",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の出番です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "PLATFORM_DIRECTIVES",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ModalComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を追加することで、プラットフォームの共通ディレクティブであるとして自動的に解決してくれるようになります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "new Provider(PLATFORM_DIRECTIVES, {useValue: [ModalComponent], multi: true})"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "もっとも便利なユースケースは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ROUTER_DIRECTIVES",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "でしょう。 angular2/routerが提供している",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "routerLink",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<router-outlet>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "をコンポーネントから使うには、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "directives: [ROUTER_DIRECTIVES]",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という記述が必要です。 ここで",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "PLATFORM_DIRECTIVES",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使うと、アプリケーション全体でどこでも使えるようになります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "new Provider(PLATFORM_DIRECTIVES, {useValue: ROUTER_DIRECTIVES, multi: true})"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "汎用的なコンポーネントやディレクティブを作った時には、ぜひ活用してみてください。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "PLATFORM_PIPES",
          "annotations": {
            "code": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここまで理解した方ならもう説明の必要はないでしょう。名前の通り、プラットフォーム全体で使えるパイプを定義できるトークンです。 汎用的なパイプを作った時に活用すると、毎回 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "pipes: [MyPipe]",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を書く必要はありません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "PLATFORM_PIPES - ts",
          "href": "https://angular.io/docs/ts/latest/api/compiler/PLATFORM_PIPES-let.html",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "new Provider(PLATFORM_PIPES, {useValue: [MyPipe], multi:true});"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "おまけ: ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "OpaqueToken",
          "annotations": {
            "code": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "もし ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "PLATFORM_DIRECTIVES",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "PLATFORM_PIPES",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "というトークンがどうやって作られいるのか気になった方は、無事にAngular 2中級者への階段を踏み出しています！ これらは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "OpaqueToken",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " というクラスのインスタンスになっています。 このクラスは、Providerのトークンとして使いやすいインスタンスを提供してくれます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "OpaqueToken - ts",
          "href": "https://angular.io/docs/ts/latest/api/core/OpaqueToken-class.html",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "var t = new OpaqueToken(\"value\");\nvar injector = Injector.resolveAndCreate([\n  provide(t, {useValue: \"bindingValue\"})\n]);\nexpect(injector.get(t)).toEqual(\"bindingValue\");"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "定数として",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "OpaqueToken",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のインスタンスを作っておいてアプリケーションで使うようにすると、柔軟なDIを行うことができるでしょう！",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "PLATFORM_DIRECTIVES",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "PLATFORM_PIPES",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使うと、 汎用的なコンポーネントやディレクティブ、パイプを毎回宣言することなく、どこでも使えるようになります。 アプリケーションが大きくなってきたらぜひ活用してみてください。",
          "annotations": {}
        }
      ]
    }
  ]
}
