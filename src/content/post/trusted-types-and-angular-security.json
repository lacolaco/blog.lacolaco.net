{
  "pageId": "7de35a8f-b66b-43c2-ac9a-f009f211efd1",
  "lastEditedAt": "2023-12-30T10:09:00.000Z",
  "slug": "trusted-types-and-angular-security",
  "locale": "ja",
  "properties": {
    "title": "DOMのXSSを防ぐTrusted TypesとAngularのセキュリティ機構",
    "date": "2019-05-13T00:00:00.000Z",
    "category": "Tech",
    "tags": ["Angular", "Trusted Types", "Web", "Security"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Trusted Types",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " とは、現在 Chrome で実験的に実装され始めている新しいセキュリティポリシーの提案である。このポリシーにより、DOM 操作を経由した XSS から Web ページを保護できるようになる。仕様そのものやユースケースについては以下の記事がおすすめであるため、まずはじめに読んでほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "安全な文字列であると型で検証する Trusted Types について | blog.jxck.io",
          "href": "https://blog.jxck.io/entries/2019-01-27/trusted-types.html",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Trusted Types help prevent Cross-Site Scripting | Web | Google Developers",
          "href": "https://developers.google.com/web/updates/2019/02/trusted-types",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Trusted Types が新しい Web 標準として採用され、多くのブラウザで実装されるまでにはまだまだ時間がかかるだろうし、そもそも標準化されない可能性も当然ある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "標準化されるのは嬉しいが、それを待たずとも利用しているフレームワークがセキュリティ対策を行っているのであれば、今のところはそれらのベストプラクティスに従っておくのがいいだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この記事では Angular の HTML テンプレートにおける組み込みの XSS 防止機能の紹介と、Trusted Types と比較した共通点、相違点を解説する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Angular の DOM-based XSS 対策",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular はコンポーネントの定義の HTML テンプレートを使用し、HTML 要素のプロパティや属性、クラス、スタイルなどに動的なデータをバインディングできる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "DOM-based XSS のもっとも基本的な攻撃といえば、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "innerHTML",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に代入される HTML 文字列に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<script>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " タグを混入させ、任意の JavaScript を実行させるものだ。他にも ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<img onerror=\"...\">",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " や ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<a href=\"javascript:...\">",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " など、多くの場所で攻撃者が任意のコードを実行できる箇所がある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular は、それらの攻撃が ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "データバインディングを介して",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " 行われることを禁止する。XSS への対策として、Angular はデフォルトですべての入力を ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "信頼できない値",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " として扱う。 プロパティ、属性、スタイル、クラスへのバインド、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "{{}}",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " による補間、これらを利用して DOM へ値を挿入する際、Angular は値の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "サニタイズとエスケープ",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " を自動的に行う。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "たとえば次のように、 動的な HTML 断片をテンプレートで挿入するケースを考える。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  template: `\n        <p>{{ htmlSnippet }}</p>\n        <p [innerHTML]=\"htmlSnippet\"></p>\n  `\n})\nclass SomeComponent {\n  htmlSnippet = `Template <script>alert(\"XSS\")</script> <b>Syntax</b>`;\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "まず 1 つ目の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<p>{{ htmlSnippet }}</p>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " については、そもそも DOM として挿入されることはない。Angular の補間構文 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "{{ data }}",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は常に文字列を HTML エスケープするため、どのような文字列を渡してもコードが実行されることはない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "2 つ目の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<p [innerHTML]=\"htmlSnippet\"></p>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<p>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " タグの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "innerHTML",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プロパティにデータを渡す。これが Angular のテンプレートで動的な HTML 文字列を展開する唯一の方法である。ただし、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "innerHTML",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プロパティへのバインディングは Angular により監視されていて、危険な文字列を検知するとその部分を除去、あるいは安全な文字列に置換する ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "サニタイズ処理",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " を自動的に行う。上記の例では、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<script>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " タグの部分だけが除去され、それ以外の部分はそのまま適用される。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": false,
      "path": "trusted-types-and-angular-security/3c6255ea-b6c7-4055-8126-638d2819f0c3/f2555a54-a6f2-412d-b094-e2e4479e086b.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "他にも ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<a [href]=\"...\">",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " や ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<img [src]=\"...\">",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " など、XSS の危険性のあるプロパティへのデータバインディングはすべて Angular により検査されているため、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "データバインディングによって DOM-based XSS が起こることは基本的にない",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "とはいえ、アプリケーションの要件によっては ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<script>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " タグを動的に挿入したいケースもあるし、常にサニタイズされてしまうのが困ることもある。そのようなときに使うのが Angular の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "DomSanitizer",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SecurityContext",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " である。これらは Trusted Types と非常によく似たアプローチを取っている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Angular に信頼できる値であることを伝える",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "先ほどの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<p [innerHTML]=\"htmlSnippet\"></p>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<script>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " タグを残すためには、開発者から Angular に対して ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "htmlSnippet",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は信頼できるということを伝える必要がある。そのために使われるのが組み込み API の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "DomSanitizer",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " だ。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "bypassSecurityTrustHtml",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " メソッドはその名の通り信頼できる HTML についてセキュリティ検査をバイパスする。HTML 文字列を渡し、その戻り値を ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "innerHTML",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " へバインディングすれば、任意の HTML を自由に挿入できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "import { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  template: `\n        <p>{{ htmlSnippet }}</p>\n        <p [innerHTML]=\"htmlSnippet\"></p>\n  `\n})\nclass SomeComponent {\n  constructor(private sanitizer: DomSanitizer) {}\n\n  htmlSnippet = this.sanitizer.bypassSecurityTrustHtml(`Template <script>alert(\"XSS\")</script> <b>Syntax</b>`);\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "HTML 以外にも ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "bypassSecurityTrustURL",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " や ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "bypassSecurityTrustStyle",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " などが用意されている。詳しくは公式ドキュメンテーションを読んでほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 日本語ドキュメンテーション",
          "href": "https://angular.jp/guide/security#bypass-security-apis",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "DomSanitizer は何をしているのか",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "bypassSecurityTrustHtml",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " メソッドは次のようなシグネチャだ。文字列を受け取り、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SafeHtml",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 型のオブジェクトを返している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "bypassSecurityTrustHtml(value: string): SafeHtml;"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "innerHTML",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プロパティへのデータバインディングの流れはこうだ。Angular はまず ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "innerHTML",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プロパティへバインディングされた値の型をチェックする。値がもし文字列であれば未検査であるため、サニタイズする。一方、もし ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "SafeHtml",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 型であれば、検査済みであるとしてそのまま扱う。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "実は自動的に行われるサニタイズは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "DomSanitizer.sanitize()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " メソッドを呼び出している。そのため、テンプレート以外の場所で Angular と同じサニタイズをすることもできる。このとき、与えた文字列をサニタイズするうえで必要なのが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Security Context",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "同じ文字列でも、HTML として見るか、URL として見るか、その文脈によって検査する内容が変わる。テンプレートではどのプロパティにバインディングしているかによって自動的に Security Context が設定されるが、テンプレート外では開発者が設定する必要がある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "// HTML\nsanitizer.sanitize(SecurityContect.HTML, value)\n// URL (href)\nsanitizer.sanitize(SecurityContect.URL, value)\n// Resource URL (src)\nsanitizer.sanitize(SecurityContect.RESOURCE_URL, value)\n// Script (script src)\nsanitizer.sanitize(SecurityContect.SCRIPT, value)\n// Style\nsanitizer.sanitize(SecurityContect.STYLE, value)"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Trusted Types との比較",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Trusted Types",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " と Angular の Security Context はよく似ており、共に信頼できる値であることをオブジェクトの型で表現している。Trusted Types で現在定義されている型は次の 4 つである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "TrustedHTML",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "TrustedURL",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "TrustedScriptURL",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "TrustedScript",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "スタイルに関する型がない違いがあるが、CSS 中の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "url(...)",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のチェックは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "TrustedURL",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で行うのだろうか。だれか知っている人がいたら教えてほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Trusted Types が提供するのは型と型を使ったセキュリティポリシーだけであり、エスケープやサニタイズをどのように行うかは開発者に責任がある。ここが Angular のセキュリティ機構との大きな違いである。Angular は Chrome のセキュリティチームと連携しており、Google の XSS 対策ベストプラクティスが Angular の DomSanitizer に詰まっているとも言える。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "// https://blog.jxck.io/entries/2019-01-27/trusted-types.html#trusted-types より\nconst escapePolicy = TrustedTypes.createPolicy('application-policy', {\n  createHTML: (unsafe) => {\n    return unsafe\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#039;\")\n  }\n})\nconst trustedHTML = escapePolicy.createHTML('<img src=/ onerror=\"alert(10)\">')"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Angular で防げない脆弱性",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここまで紹介した Angular のセキュリティ機能は、あくまでも ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "テンプレート内のデータバインディングを介した脆弱性",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " に限られたものである。コンポーネントのクラスメソッドの中で直接 DOM 操作することについてはフレームワークではどうしようもない部分だ。逆にいえば、このようなケースにおいてもセキュリティを守るための仕組みが Trusted Types である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({...})\nclass SomeComponent {\n\n  insertHTML() {\n    this.elementRef.nativeElement.innerHTML = `...` // チェックされない\n  }\n}"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Trusted Types 標準化後の未来",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Trusted Types がもし標準化されれば、Angular のサニタイズ処理は内部で Trusted Types を使い、 DomSanitizer は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "TrustedHTML",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 型のオブジェクトを返せるようになるかもしれない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "現在の時点でかなり親和性の高いモデルであるため、Angular 側の API は一切変わらず、内部だけで独自の型から Trusted Types への切り替えが行われる可能性もあるだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "エスケープやサニタイズといった Web ブラウザでは面倒を見ない部分こそが Angular のようなフレームワークに期待されることになり、Trusted Types のビルトインポリシーを提供するようなこともありえそうだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ともかく、どちらかがあればどちらかが要らない、というものではないことだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Trusted Types という新しい Web 標準の仕様が提案されている",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Angular には組み込みの XSS 防止機構があり、Trusted Types と非常によく似ている",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Angular が防げるのはテンプレート内の脆弱性だけであり、DOM そのものの保護は Trusted Types が必要",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Trusted Types は既存の仕組みと競合するものではなく、フレームワークの内部で使われることも期待できる。",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
