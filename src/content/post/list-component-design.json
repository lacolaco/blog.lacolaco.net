{
  "pageId": "b0a11245-2091-4ae6-a17a-7291930e0970",
  "lastEditedAt": "2023-12-30T10:10:00.000Z",
  "slug": "list-component-design",
  "properties": {
    "title": "AngularにおけるListComponent/ListItemComponentの設計",
    "date": "2019-02-18T00:00:00.000Z",
    "tags": ["Angular", "設計"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "<ul>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<li>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のように、親子であることに意味がある密結合したコンポーネントを作るときのプラクティスについて。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "例として、 メニューを表示するための ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuListComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を考える。Input として表示するメニューの要素 ( ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuItem",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 型) の配列を受け取り、それを ngFor で表示するものだ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'menu-list',\n  template: `\n  <ng-container *ngFor=\"let item of items\">\n    <a class=\"menu-list-item\" [href]=\"item.url\">{{item.label}}</a>\n  </ng-container>\n  `,\n  styles: [`\n  :host { display: flex; flex-direction: column; }\n  .menu-list-item { flex: 0 0 25%; }\n  `]\n})\nexport class MenuListComponent {\n  @Input() items: MenuItem[];\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "使う側は次のようになる。シンプルに Input で渡しているだけだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'app-root',\n  template: `\n  <menu-list [items]=\"menuItems\"></menu-list>\n  `\n})\nexport class AppComponent {\n  menuItems = [\n    { url: '#foo', label: 'foo' },\n    { url: '#bar', label: 'bar' },\n  ];\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この設計には特筆するほどの欠点はないが、UI コンポーネントというのは得てしてある日突然にデザインや振る舞いに仕様変更が加わるものだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "例えば、「メニューの中でグループを 2 つに分けて、divider で区切って表示したい」とか「新登場の要素を先頭に表示してバッジを付けて強調したい」とか、思いつくことはたくさんある。それらを将来的に吸収できるコンポーネントかというと、問題がある。ngFor を ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuListComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に任せていることから、配列をどのように反復して表示するか、順序やグループ分けというものが UI コンポーネントである ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuListComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の責務になっている。つまり、UI とコンテンツの責務が混在している。これを解決するには、コンテンツの責務を切り出してあげるほかない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次のように、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<ng-content>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を使ってリストの中身を外からもらうようにする。 ngFor をおこなう=コンテンツの責務を持つのはアプリケーション側だ。ただし ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "menu-list-item",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " クラスの CSS を ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が持つのは UI の責務が漏れてしまうので、その責務を持つための ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuListItemComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を作成する必要がある。URL やラベルは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuListItemComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の Input として渡すことになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "<ng-content>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で渡される要素は Shadow DOM の外から与えられるので、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuListComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " から ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuListItemComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " へ子孫セレクタでのアクセスはできないことに注意が必要だ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'menu-list',\n  template: `<ng-content></ng-content>`,\n  styles: [`\n  :host { display: flex; flex-direction: column; }\n  `]\n})\nexport class MenuListComponent {}\n\n@Component({\n  selector: 'menu-list-item',\n  template: `<a [href]=\"url\">{{label}}</a>`,\n  styles: [`\n  :host { flex: 0 0 25%; }\n  `]\n})\nexport class MenuListItemComponent {\n  @Input() url: string;\n  @Input() label: string;\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "結果として、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は次のようになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'app-root',\n  template: `\n  <menu-list>\n    <menu-list-item *ngFor=\"let item of menuItems\" [url]=\"item.url\" [label]=\"item.label\"></menu-list-item>\n  </menu-list>\n  `\n})\nexport class AppComponent {\n  menuItems = [\n    { url: '#foo', label: 'foo' },\n    { url: '#bar', label: 'bar' },\n  ];\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "メニューのコンテンツについては、そのデータのすべての裁量をアプリケーション側で握れている。それでいながらリストの UI は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuListComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuListItemComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で担保できている。万が一配列が複数になろうとも、それは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 側で解決できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここで次の問題は、リストの UI を管理する CSS が 2 箇所に分散してしまっていることだ。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuListItemComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は、親の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuListComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が Flexbox であることに暗黙的に依存している。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuListComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "display: grid",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に変えるときに見落とす可能性が高い。そのため、できればリストの親子のスタイルは一か所に集まっていてほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここで便利なのが、Sass の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "mixin",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "include",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を使った手法だ。まずはリストの構造にかかわるスタイルを ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "menu-list-base.scss",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ファイルに記述する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@mixin menu-list() {\n  display: flex;\n  flex-direction: column;\n}\n\n@mixin menu-list-item() {\n  flex: 0 0 25%;\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次に、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuListComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuListItemComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のスタイルをそれぞれ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": ".scss",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ファイルに外部化し、それぞれから ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "menu-list-base.scss",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ファイルを参照する。そしてそれぞれの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": ":host",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " スタイルの中で対応する mixin を ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@include",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "// menu-list.component.scss\n@import \"menu-list-base\";\n\n:host {\n  @include menu-list();\n}\n\n// menu-list-item.component.scss\n@import \"menu-list-base\";\n\n:host {\n  @include menu-list-item();\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このようにすればリストの親子間で一貫する必要があるスタイルを 1 ファイルに集約しつつ、各コンポーネントのスタイルではそれ以外の関心に集中できる。たとえば ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MenuListItemComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の背景色やボーダーなどはリストには関係ないことなので ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "menu-list-item.component.scss",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に直接記述するほうがよい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "実際に動作するサンプルがこちらだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "angular-u3f21w - StackBlitz",
          "href": "https://stackblitz.com/edit/angular-u3f21w?file=src%2Fapp%2Fapp.component.html",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このように、親子の結合が強い UI 構造をコンポーネント化する際には Sass の mixin 機能を使うことでシンプルにスタイルを集約できる。Angular CLI であればデフォルトで Sass ファイルをサポートしているので準備はまったく不要だ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、UI を責務とするコンポーネントからはデータの構造やコンテンツへの関心を極力排除するほうが好ましい。UI コンポーネントはひたすら見た目とユーザーインタラクションに集中し、コンポジションによってコンテンツを表示しよう。UI コンポーネントというのは複数コンテキストで共有するのが前提なのだから、コンテキストには無関心でなければアプリケーション間の横のつながりを生んでしまうのだ。",
          "annotations": {}
        }
      ]
    }
  ]
}
