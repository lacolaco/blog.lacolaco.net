{
  "pageId": "49cd00ee-40f0-44ec-a73c-43f946510dff",
  "lastEditedAt": "2023-12-30T10:06:00.000Z",
  "slug": "angular-state-management-patterns",
  "locale": "ja",
  "properties": {
    "title": "Angularアプリケーションの状態管理パターン",
    "date": "2022-05-11T02:10:00.000Z",
    "category": "Tech",
    "tags": ["Angular", "状態管理"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angularアプリケーションの状態管理の方法はさまざまな実装がありえるが、その中でも典型的ないくつかのパターンを、それがどのようなニーズがあって選ばれるのかという考察を踏まえながら列挙する。パターンとその特徴を例示するのであって、それぞれのパターンにおける最良の実装を示すものでもないし、これらのパターンに該当しない実装を否定するものでもない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Standalone Componentsなど、Angularのメンタルモデルが変わっていく兆しを見せる今、これらをまとめておくことは諸々のAngularアプリケーションの状態管理のあり方を見直すきっかけになるのでないかと思う。特に、NgRxがデファクトスタンダードであり唯一の選択肢だと考えている人には、それが単にひとつの選択肢であることを思い出してもらえるのではないだろうか。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "コンポーネントクラスによる直接の状態管理",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "一番最初のパターンは、次の例のようにコンポーネントクラスが自身のクラスフィールドで状態管理をするものである。状態管理のあり方としてはもっとも素朴で、単純なパターンである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  template: `<p> {{ message }} </p>`\n})\nexport class MyComponent {\n  message: string;\n\n  updateMessage(message: string) {\n    this.message = message;\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このパターンは、Angularのコンポーネントのもっとも原始的な姿であって、あらゆるAngularアプリケーションはこのパターンからスタートするといってもいい。言いかえれば、このパターンから外れた状態管理というのは、なんらかのニーズがあってリファクタリングされたものである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "コンポーネントクラスによるリアクティブな状態管理",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "最初のパターンに次のようなニーズが生まれると、次の段階にリファクタリングされると考えられる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネントが管理する状態が増えたため、コンポーネントクラスの複雑化に対処したい",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "コンポーネントクラスのコード削減",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "手続き的なコードをリアクティブに書きたい",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "イベントドリブンに処理を行うことで非同期処理との親和性を高める",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このパターンは、最初のパターンと同じくコンポーネントクラスのフィールドとして状態管理するが、その管理がリアクティブな形式に沿っている点が違っている。次のような実装を想像してほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { createStore } from 'awesome-state-management-library';\n\nconst store = createStore({ message: '' });\n\n@Component({\n  template: `<p> {{ message$ | async }} </p>`\n})\nexport class MyComponent {\n  readonly message$: Observable<string> = store.select(state => state.message);\n\n  updateMessage(message: string) {\n    store.setState({ message });\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "createStore",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " はなんらかの状態管理用のユーティリティであり、その詳細はここではどうでもよい。ポイントは次の3点である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "管理される状態は、そのコンポーネントに固有の状態である",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネントは状態管理の詳細な実装を知らない",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "管理された状態は ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "Observable",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " としてコンポーネントに公開されている",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "コンポーネントローカルなサービスによる状態管理",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コンポーネントクラスによる状態管理からコンポーネントローカルなサービスによる状態管理に移行するニーズは次のようなことが考えられる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "子コンポーネントとの間で状態を共有するのを便利にしたい",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "コンポーネントクラスの状態はInputを介して伝播させるしかない",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "複雑な状態管理についての保守性を改善したい",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "コンポーネントと独立して状態管理だけをテストできない",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コンポーネントローカルなサービスとは、コンポーネントの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "providers",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " によって提供され、そのコンポーネントないし子孫コンポーネントでのみ利用可能であるようなサービスを指す。Facade パターンと呼ばれることもある。次のような実装を想像してほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "// my-component-store.ts\nimport { createStore } from 'awesome-state-management-library';\n\nconst store = createStore({ message: '' });\n\n@Injectable()\nexport class MyComponentStore {\n  readonly message$ = store.select(state => state.message);\n\n  updateMessage(message: string) {\n    this.store.setState({ message });\n  }\n}\n\n// my-component.ts\nimport { MyComponentStore } from './my-component-store'; \n\n@Component({\n  template: `<p> {{ message$ | async }} </p>`,\n  providers: [MyComponentStore]\n})\nexport class MyComponent {\n  readonly message$: Observable<string> = this.store.message$;\n\n  constructor(private store: MyComponentStore) {}\n\n  updateMessage(message: string) {\n    this.store.updateMessage(message);\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コンポーネントクラスによる状態管理から変わったポイントは次の2点である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "状態管理の実装の詳細はサービスクラスに移されている",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネントクラスは状態管理の実装に関心を持たない",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "状態管理のコードが別のクラスに移動しただけのようにも見えるが、これによって状態管理に関するコードだけをテストすることが簡単になる。コンポーネントにはさまざまな関心が絡みついているため、コンポーネントのテストよりも、状態管理だけの特化したサービスをテストするほうがはるかに単純である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、サービスとして利用できるようにしたことで、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MyComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " だけでなくその子孫コンポーネントにおいても依存オブジェクトとしてインジェクトできるようになる。親コンポーネントが管理する状態を子孫コンポーネントからも参照したい場合には、テンプレート上でInputのバケツリレーで値を渡すよりも、このようにサービスクラスにしてしまうほうが便利な場合もある。ただしその場合は、子コンポーネントのテストにおいても状態管理サービスの依存解決が必要になるため、ユニットテストの単純さを優先する場合は Input で状態を受け取る選択肢も変わらず有用である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "シングルトンサービスによる状態管理",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コンポーネントローカルなサービスによる状態管理からシングルトンサービスによる状態管理に移行するニーズには次のようなことが考えられる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "親子関係にない離れたコンポーネントとの間で状態を共有したい",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネントよりも長いライフサイクルで状態を保持したい",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "シングルトンサービスとは、典型的には ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@Injectable({ providedIn 'root' })",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で提供されるような、コンポーネントの親子関係などにかかわらず同一のインスタンスにアクセスできるようなサービスである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { AppStore } from '../app-store';\n\n@Component({\n  template: `<p> {{ message$ | async }} </p>`\n})\nexport class MyComponent {\n  readonly message$: Observable<string> \n    = this.appStore.select(state => state.message);\n\n  constructor(private appStore: AppStore) {}\n\n  updateMessage(message: string) {\n    this.appStore.setState({ message });\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "状態管理を担うサービスクラスがシングルトンになったことで、大きく変わるのは次のポイントである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "状態管理サービスは、特定のコンポーネントへの",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "関心を持たない",
              "annotations": {
                "bold": true
              }
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "状態のライフサイクルはコンポーネントのライフサイクルと",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "一致しない",
              "annotations": {
                "bold": true
              }
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "シングルトンサービスによる状態管理はライフサイクルがコンポーネントよりも長いため、コンポーネントは状態の初期化やリセットなど、いわば ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "『状態の状態』",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " を気にしなければならない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、このパターンでは、「コンポーネントの状態」ではなく「アプリケーションの状態」を個々のコンポーネントが利用することになる。したがって、アプリケーションの状態の中には、コンポーネントごとに要・不要が異なる値が含まれるし、その値も特定のコンポーネントのために用意されているわけではない。よって、状態を利用するコンポーネントの側では、必要な状態を「取り出し」「整える」工程が必要になる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "状態管理ユーティリティの実装について",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここまでの例で登場した ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "createStore",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ユーティリティは、さまざまな実装例が考えられる。たとえば簡素ではあるが、次のようにRxJSだけで実装することもできる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { BehaviorSubject } from 'rxjs'; \n\nexport function createStore(initialState) {\n  const subject = new BehaviorSubject(initialState);\n  return {\n    select: (fn) => subject.pipe(map(fn)),\n    setState: (state) => subject.next(state),\n  };\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "もちろんライブラリを使ってもいい。このようなStoreオブジェクトの生成は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@ngrx/component-store",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " をはじめとして多くのライブラリがサポートしている。フレームワークを問わずに利用できるライブラリがあれば、そのライブラリを組み込んで実装することに制約はない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "https://ngrx.io/guide/component-store",
              "href": "https://ngrx.io/guide/component-store",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "https://datorama.github.io/akita/docs/angular/local-state",
              "href": "https://datorama.github.io/akita/docs/angular/local-state",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "https://ngneat.github.io/elf/",
              "href": "https://ngneat.github.io/elf/",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "https://rematchjs.org/",
              "href": "https://rematchjs.org/",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "一方で、シングルトンサービスによる状態管理をサポートするライブラリは、Dependency Injection 関連の振る舞いを含める必要があるため、Angularに依存したライブラリになる。このパターンを実装する上で代表的なライブラリは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@ngrx/store",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " や ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@ngxs/store",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 、Akitaなどだ。だが、シングルトンサービスによる状態管理であったとしても、サービスの実装までライブラリに任せるか、サービスは自前で用意して上述したような状態管理の核となる部分だけライブラリに任せるかは、アプリケーションごとに判断できる部分だ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "https://ngrx.io/guide/store",
              "href": "https://ngrx.io/guide/store",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "https://rx-angular.io/web/state/general/overview",
              "href": "https://rx-angular.io/web/state/general/overview",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "https://www.ngxs.io/",
              "href": "https://www.ngxs.io/",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "https://datorama.github.io/akita/docs/store",
              "href": "https://datorama.github.io/akita/docs/store",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この記事で述べたことの要点をまとめると次の点である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "原始状態ではコンポーネントが持つ状態管理の役割は、諸々のニーズに沿って段階的にコンポーネントから距離を取るようにリファクタリングされる",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネントがクラスフィールドで状態管理するパターンから、シングルトンサービスで状態管理するパターンまでの間にも、いくつかのグラデーションが考えられる。コンポーネントローカルなサービスによる状態管理は、一般的なニーズの多くを解決できる",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "シングルトンサービスによるアプリケーショングローバルな状態管理は、これまでAngularアプリケーション開発のトレンドの中でメジャーな選択肢であったが、コンポーネントローカルな状態管理のあり方に注目が集まっている。Angular v14で導入されるStandalone Componentsはそのようなコンポーネント中心の設計を後押しするだろう",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
