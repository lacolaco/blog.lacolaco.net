{
  "pageId": "b5de8f33-06b2-4e58-bb12-009345948aa7",
  "lastEditedAt": "2023-06-03T11:23:00.000Z",
  "slug": "why-angularjs-needs-http-service",
  "properties": {
    "title": "なぜAngularJSに$httpが必要だったのか（あるいはAngular HttpClientの価値について）",
    "date": "2018-04-20T00:00:00.000Z",
    "tags": ["tech", "Angular", "AngularJS"]
  },
  "content": [
    {
      "type": "link_preview",
      "url": "https://lacolaco.hatenablog.com/entry/2018/04/20/080000"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "「レールに乗っておいたほうがいいんじゃないの？」という声もあるとおもうので、 そもそもなぜ Angular は HTTP クライアント機能をスタックとして提供しているのか、というところについて。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "AngularJS には",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "$http",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が必要だった",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "遡って AngularJS の話をすると、AngularJS にも組み込みの HTTP クライアント機能があり、その API 名からよく",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "$http",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と呼ばれています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://docs.angularjs.org/api/ng/service/$http",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "現在ではこんな感じの API になっています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "javascript",
      "filename": "",
      "text": "// Simple GET request example:\n$http({\n  method: \"GET\",\n  url: \"/someUrl\"\n}).then(\n  function successCallback(response) {\n    // this callback will be called asynchronously\n    // when the response is available\n  },\n  function errorCallback(response) {\n    // called asynchronously if an error occurs\n    // or server returns response with an error status.\n  }\n);"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この機能が AngularJS に必要だった理由は以下のダイジェストループによるものが大きいです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "AngularJS のダイジェストループ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "AngularJS は内部のダイジェストループが繰り返し実行されることでコントローラーの変更がビューに反映されます。 一般に HTTP のレスポンスが返ってきたあとにはコントローラーの状態が変わり、取得した値を表示することになるので、 HTTP クライアントが AngularJS のダイジェストループをトリガーできる必要がありました。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "必要がありました、とはいえ、AngularJS に詳しければ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "$scope.$applyAsync",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "使えばいいじゃん、というのはありますし、それは正しいです。 しかし XHR が発火するさまざまなイベントのなかで適切にダイジェストループを回すのは難しく、 ダイジェストループのオーバーヘッドは大きいのでうまく出来ないとパフォーマンスが悪化する危険性もあります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "なので、簡単に使えるようにするために、AngularJS のコアと密接な HTTP クライアントが必要でした。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "jQuery の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "$.ajax",
          "annotations": {
            "code": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "当時主流だった ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "$.ajax",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と似た API を持つことで、導入の障壁を下げる狙いもあったかもしれません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Angular の HttpClient はなんのためにあるのか",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そうした AngularJS の背景をもとに、今の Angular の HttpClient にはどういった価値があるのかを改めて考えることができます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Change Detection と Zone.js",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular にはダイジェストループはなく、ランタイムで発生するほぼすべての非同期処理は Zone.js によって捕捉され、Angular の変更検知システムへディスパッチされます。 XHR を使おうと、Fetch API を使おうと、非同期処理の終了後にはデータバインディングに基づいてビューが更新されます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "つまり、ビュー描画システムとしての Angular と、Angular の HTTP クライアントは完全に分離可能だということです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "RxJS 親和性",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ではなぜ Angular の HTTP クライアントが存在するのか、それは Promise ではなく Observable ベースの HTTP クライアントを導入するためです。 Angular はコアの非同期処理から周辺モジュールまで、多くの非同期処理を RxJS の Observable ベースで実装しています。 そのため、HTTP クライアントの API も Observable を返すように実装されていたほうが、アプリケーション全体で RxJS の恩恵を受けることができます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "RxJS に精通し、使いこなせる開発者にとっては、非常に強力な武器になる API なのは間違いないです。 そして XHR の各種イベントをわかりやすい API として RxJS で実装するのは骨が折れるので、この部分が Angular 公式に提供されていることが最大の価値です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "フルスタックの信頼性",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "フルスタックであることでモジュール選択のコストをさげることが目的の場合には迷わず選択できる公式パッケージには大きな意味があるでしょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "いつ Angular HttpClient を使わないのか",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "想像するに次のような場面でサードパーティや独自実装の HTTP クライアントを採用するモチベーションがあると思います。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "RxJS の学習コストを下げたい",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "JavaScript 自体の練度が低い場合、Promise もわからない状態で Observable に手を出すのはハードルが高いでしょう",
                      "annotations": {}
                    }
                  ],
                  "children": []
                },
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "あるいは RxJS をアプリケーションコードでは書きたくないという好みの問題もありでしょう",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "すでにサードパーティ HTTP クライアントの知見を持っており、流用できる",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "お気に入りのものがあればそれを使ってよいと思います。",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "AngularJS の",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "$http",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "と Angular の HttpClient は立場が違う",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "$http",
                      "annotations": {
                        "code": true
                      }
                    },
                    {
                      "type": "text",
                      "text": " はどうしても必要だった",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "RxJS とどう付き合うかで考えるとよい",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "お気に入りのライブラリがあるならそれを使って楽しく開発するのがよい",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
