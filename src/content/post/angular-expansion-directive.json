{
  "pageId": "5cd15f39-e63e-48b7-828e-af1224f8d884",
  "lastEditedAt": "2023-12-18T12:41:00.000Z",
  "slug": "angular-expansion-directive",
  "locale": "ja",
  "properties": {
    "title": "Angular: CSS Gridを使ったExpansionディレクティブの実装",
    "date": "2023-12-18T12:24:00.000Z",
    "tags": ["Angular", "CSS"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "要素の高さを0から自動計算されたサイズとの間でアニメーションするのは一筋縄ではいかないものだったが、つい最近のブラウザのアップデートによってCSS Gridを使ったアプローチが可能になったらしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://dev.to/francescovetere/css-trick-transition-from-height-0-to-auto-21de"
    },
    {
      "type": "link_preview",
      "url": "https://coliss.com/articles/build-websites/operation/css/css-transition-from-height-0-to-auto.html"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この方法をAngularアプリケーションの中で使いやすいパーツとしてディレクティブを実装してみたのが次のサンプルコードだ。実際に動作するので試してもらいたい。もし自身のプロジェクトに取り入れたいと思ったら自由にしてもらって構わない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "stackblitz",
      "url": "https://stackblitz.com/edit/angular-kyt4lx?ctl=1&embed=1&file=src/main.ts"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Expandable",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ディレクティブ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Expandable",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ディレクティブは、ディレクティブが付与されたホスト要素にスタイルを付与する。冒頭の記事で紹介されているように、エキスパンションパネルのコンテナとなる要素には ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "display: grid",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "grid-template-rows",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を記述し、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "transition-property: grid-template-rows",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " でグリッド構造の変更をアニメーション可能にする。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "duration",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " や ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "timing-function",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は何でもよい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ディレクティブを使ってスタイルを付与する場合は、ホストバインディングで ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "style",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プロパティへオブジェクトを渡してあげればよい。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngStyle",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " や ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "style.xxx",
          "href": "http://style.xxx/",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " といった機能を使わなくとも、まとめてスタイルを付与できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Directive({\n  selector: '[expandable]',\n  standalone: true,\n})\nexport class Expandable {\n  @Input({ alias: 'expandable' })\n  isExpanded = false;\n\n  @HostBinding('style')\n  get styles() {\n    return {\n      display: 'grid',\n      'transition-property': 'grid-template-rows',\n      'transition-duration': '250ms',\n      'transition-timing-function': 'ease',\n      'grid-template-rows': this.isExpanded ? '1fr' : '0fr',\n    };\n  }\n}"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "使い方",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Expandable",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ディレクティブを任意のコンテナ要素に付与し、その直下の子要素に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "overflow: hidden",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " スタイルを付与する。こうすることでグリッドの高さが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "0fr",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " になったときに溢れる部分が非表示になる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [Expandable],\n  template: `\n    <h1>Expansion with grid-template-rows</h1>\n    \n    <button (click)=\"toggle()\">toggle</button>\n    <div [expandable]=\"isExpanded()\" style=\"border: 1px solid black;\">\n      <div style=\"overflow: hidden;\">\n        <p>\n        Lorem ipsum dolor sit amet, ...\n        </p>\n      </div>\n    </div>\n  `,\n})\nexport class App {\n  isExpanded = signal(false);\n\n  toggle() {\n    this.isExpanded.update((v) => !v);\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "所感",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular には独自のアニメーション機能もあるが、このエキスパンションパネルのユースケースではCSSだけで十分だと思う。非常に汎用性の高い仕組みだし実装も難しくないので、積極的に使っていきたいテクニックだと感じた。（そもそも ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "height: auto",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " でアニメーションできればそれに越したことはないのだが。）",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
