{
  "pageId": "41e326de-5455-488c-b731-732e45de6e0e",
  "lastEditedAt": "2023-09-23T00:33:00.000Z",
  "slug": "discord-bot-cfworkers-hono",
  "properties": {
    "title": "Cloudflare Workers + HonoでDiscord botを作る際のポイント",
    "date": "2023-09-22T23:17:00.000Z",
    "tags": ["雑記", "Discord", "Cloudflare", "Hono"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "タイトルの通り。普通にNode.jsのWebサーバーを立てて実装するときとは違う注意点がいくつかあった。当然制約が強い環境ではあるが、それを差し引いてもCloudflare + Honoは開発・運用しやすいので、結果的には満足している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ちなみに、公式ドキュメントでもCloudflare WorkersでのBotの作り方のガイドはあるが、これはExpress前提なので、Honoユーザーはいろいろと読み替える必要がある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://discord.com/developers/docs/tutorials/hosting-on-cloudflare-workers",
          "href": "https://discord.com/developers/docs/tutorials/hosting-on-cloudflare-workers",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "discord.js は使えない",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Discord botをJavaScriptで実装しようと思ったら普通 discord.js を使うが、このライブラリは現状Node.jsランタイムに強く依存しているため、Cloudflare WorkersではNode.js互換モードでも使えない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/discordjs/discord.js"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ではどうするかというと、2つ使えるライブラリがある。ひとつは、discord.jsのベースになっているdiscord-api-typesパッケージ。これはその名の通りDiscord APIのTypeScript型定義だけが提供されている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/discordjs/discord-api-types/"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "もうひとつはdiscord-interactions-jsパッケージ。これはDiscord Botの Interactions endpointを実装するのに便利なモジュールを提供している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/discord/discord-interactions-js"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Cloudflare Workersはリクエストのたびに実行するモデルなので、サーバーを起動しっぱなしにしてイベントをストリーミングすることができない。なので必然的にBotはInteractions Endpoint URLを介してクライアントとやりとりするしかない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "/images/discord-bot-cfworkers-hono/3c6255ea-b6c7-4055-8126-638d2819f0c3/324b15fd-2388-45cb-80f6-2114b409c009/Untitled.png",
      "caption": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "つまり、結局POSTリクエストを受け取ってレスポンスを返すにはWebサーバーを作る必要があり、Cloudflare WorkersでそれをやるならぜひHonoを使いたい。めっちゃ書きやすいので。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://hono.dev/"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "リクエストの検証のためにbodyをクローンして読む",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Interactions Endpointを介してクライアントとBotがやり取りするにあたって、エンドポイントに送られてきたリクエストが正しくDiscordのクライアントで作成されたものかを検証することが推奨されている。そうでないと単なるPOSTのエンドポイントなので、いくらでも偽造ができる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://discord.com/developers/docs/interactions/receiving-and-responding#security-and-authorization"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この検証処理はdiscord-interactions-jsが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "verifyKey",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数として提供しているのでそれを使うと楽。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "verifyKeyMiddleware",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " というものも提供しているがこれは Express 互換のサーバーにミドルウェアとして使えるもので、今回はHonoを使うので見送る。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ということで、Honoで使えるミドルウェアは自作する必要がある。やることは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "X-Signature-Ed25519",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ヘッダと ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "X-Signature-Timestamp",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ヘッダの値を取り出し、それとリクエストのボディをあわせてBotのPublic Keyとともに ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "verifyKey",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数を呼び出すこと。実装は次のようになった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "const verifyKeyMiddleware =\n  (): MiddlewareHandler<{ Bindings: Env }> => async (c, next) => {\n    const signature = c.req.header('X-Signature-Ed25519');\n    const timestamp = c.req.header('X-Signature-Timestamp');\n    const body = await c.req.raw.clone().text();\n    const isValidRequest =\n      signature &&\n      timestamp &&\n      verifyKey(body, signature, timestamp, c.env.DISCORD_PUBLIC_KEY);\n    if (!isValidRequest) {\n      console.log('Invalid request signature');\n      return c.text('Bad request signature', 401);\n    }\n    return await next();\n  };"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここでポイントは、ミドルウェアでそのまま ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "c.req.text()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のようにボディを読んでしまうと、後続のリクエストハンドラでボディを読もうとしたときにエラーになるため、一度 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "clone()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " してからボディを読むこと。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "c.req",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の HonoRequest オブジェクトは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "clone()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を持っていないので、内部の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "c.req.raw",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " をクローンしている。これは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "c.req.clone()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ができるとスッキリするなあと思ったのでHonoにIssueを上げようかと思っている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "…と書きながら考えていたのだが、調べてみると最新のHonoならリクエストボディの読み込みは内部でキャッシュされるため ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "c.req.text()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " をミドルウェアで読んでもいいことになっているようだ。改めてアプリケーションの問題なのかHonoの不具合を踏んだのか調べる必要がありそうだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/honojs/hono/pull/1333"
    },
    {
      "type": "link_preview",
      "url": "https://github.com/honojs/hono/pull/1393"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Deferred Messageは使えない",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これはCloudflare Workersを無料あるいは安めのプランで使う場合の制約で、ガッツリ有料で使うなら関係なさそう。リクエストが届いてワーカーが起動してから、レスポンスを返してワーカーが終了するまでのCPU時間は10msなので、それ以上の時間がかかる応答はできない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://developers.cloudflare.com/workers/platform/limits/#worker-limits",
          "href": "https://developers.cloudflare.com/workers/platform/limits/#worker-limits",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "なので、DiscordのBotでできることはクライアントからのInteractionsに対して即レスポンスを返すだけで、Deferred Messageを返しておいて時間差でFollow upするような振る舞いは厳しい。だいたいタイムアウトする。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "1つのリクエストに対して1つのレスポンスを返して終わるタイプのBotじゃないとCloudflare Workersで実装するのは難しいだろう",
          "annotations": {}
        }
      ]
    }
  ]
}
