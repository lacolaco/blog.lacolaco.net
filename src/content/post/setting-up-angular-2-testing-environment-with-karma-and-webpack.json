{
  "pageId": "ba94cfed-9b64-41d3-862b-55c25fe0cea7",
  "lastEditedAt": "2023-12-30T10:11:00.000Z",
  "slug": "setting-up-angular-2-testing-environment-with-karma-and-webpack",
  "properties": {
    "title": "Setting up Angular Testing Environment with Karma and webpack",
    "date": "2016-10-25T00:00:00.000Z",
    "tags": ["Angular", "Testing"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "This article will explain how to create an environment for Angular 2 testing. It uses ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Karma",
          "href": "https://karma-runner.github.io/1.0/index.html",
          "annotations": {}
        },
        {
          "type": "text",
          "text": ", ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "webpack",
          "href": "http://webpack.js.org/",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " and some useful stuffs. And it focuses on simplicity and ease to use. Let’s understand it step by step.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Create an Application (no tests)",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "> npm init -y\n> npm i -S @angular/{core,common,compiler,platform-browser,platform-browser-dynamic} rxjs zone.js core-js\n> npm i -D typescript webpack@~2.1.0-beta awesome-typescript-loader angular2-template-loader raw-loader node-static @types/node\n> $(npm bin)/tsc --init\n> touch webpack.config.js index.html\n> mkdir src\n> touch src/main.ts src/app.module.ts src/app.component.ts src/app.component.html"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "app.component.ts:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "import { Component } from \"@angular/core\";\n@Component({\n  selector: \"my-app\",\n  templateUrl: \"app.component.html\"\n})\nexport class AppComponent {}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "app.module.ts:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "import { NgModule } from \"@angular/core\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { AppComponent } from \"./app.component\";\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "main.ts:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "import \"core-js\";\nimport \"zone.js/dist/zone\";\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\nimport { AppModule } from \"./app.module\";\nplatformBrowserDynamic().bootstrapModule(AppModule);"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "tsconfig.json:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "json",
      "filename": "",
      "text": "{\n  \"compilerOptions\": {\n    \"module\": \"es2015\",\n    \"target\": \"es5\",\n    \"noImplicitAny\": false,\n    \"sourceMap\": true,\n    \"moduleResolution\": \"node\",\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    \"lib\": [\"es2015\", \"dom\"],\n    \"types\": [\"node\"]\n  },\n  \"awesomeTypeScriptLoaderOptions\": {\n    \"useWebpackText\": true\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "webpack.config.js:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "module.exports = () => {\n  return {\n    entry: {\n      main: \"./src/main.ts\"\n    },\n    output: {\n      path: \"./dist\",\n      filename: \"[name].bundle.js\"\n    },\n    resolve: {\n      extensions: [\".js\", \".ts\", \".html\"]\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.ts$/,\n          loaders: [\"awesome-typescript-loader\", \"angular2-template-loader\"]\n        },\n        {\n          test: /\\.html$/,\n          loader: \"raw\"\n        }\n      ]\n    },\n    devtool: \"inline-source-map\"\n  };\n};"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "package.json (scripts only):",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "json",
      "filename": "",
      "text": "\"scripts\": {\n    \"build\": \"webpack\",\n    \"start\": \"static .\"\n},"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Yay, We’ve created an awesome application quickly.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Setting up Karma runner",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "To make testing environment, we have to set up Karma test runner at first. Follow the command below:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "> npm i -D karma jasmine\n> $(npm bin)/karma init"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "This is the starting point of karma.config.js",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "module.exports = function(config) {\n  config.set({\n    basePath: \"\",\n    frameworks: [\"jasmine\"],\n    files: [],\n    exclude: [],\n    preprocessors: {},\n    reporters: [\"progress\"],\n    port: 9876,\n    colors: true,\n    logLevel: config.LOG_INFO,\n    autoWatch: false,\n    browsers: [\"Chrome\"],\n    singleRun: true,\n    concurrency: Infinity\n  });\n};"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Add test file",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "First step, let’s make a test file and add it into karma runner. Create test/main.js as following:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "describe(\"Meaningful Test\", () => {\n  it(\"1 + 1 => 2\", () => {\n    expect(1 + 1).toBe(2);\n  });\n});"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "And update files property in karma configuration:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "files: [\n  { pattern: 'test/main.js' }\n],"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "At last, add “test” npm-script in package.json:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "json",
      "filename": "",
      "text": "\"scripts\": {\n    \"build\": \"webpack\",\n    \"start\": \"static .\",\n    \"test\": \"karma start\"\n},"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Let’s execute “npm test” command.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": false,
      "url": "/src/content/images/setting-up-angular-2-testing-environment-with-karma-and-webpack/3c6255ea-b6c7-4055-8126-638d2819f0c3/1af5e44e-a7af-45d5-abcb-db96dd153fed.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Okey! Setting up karma runner is done! Let’s go to next step.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Use modules and karma-webpack",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Now, our test is only one file. So after now, all tests have to be written in test/main.js or add new file into karma configuration every times… Really?",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "No! Don’t worry, guys. We can separate tests as modules and bundle it to the single test file. No updates on karma configuration by per test.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Let’s get it started. Install karma-webpack and karma-sourcemap-loader at first:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "> npm i -D karma-webpack karma-sourcemap-loader"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "And then, update our karma.config.js. Look at ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "preprocessors",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " and ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "webpack",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " property. ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "webpack",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " preprocessor executes webpack bundling using ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "test/main.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " as an entry point. And ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "webpack",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " property is an configuration for the bundling.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "module.exports = function(config) {\n  config.set({\n    basePath: \"\",\n    frameworks: [\"jasmine\"],\n    files: [{ pattern: \"test/main.js\", watched: false }],\n    exclude: [],\n    preprocessors: {\n      \"test/main.js\": [\"webpack\"]\n    },\n    webpack: require(\"./webpack.config\")({ env: \"test\" }),\n    reporters: [\"progress\"],\n    port: 9876,\n    colors: true,\n    logLevel: config.LOG_INFO,\n    autoWatch: false,\n    browsers: [\"Chrome\"],\n    singleRun: true,\n    concurrency: Infinity\n  });\n};"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Execute “npm test” again and see logs.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "> karma start\nwebpack: wait until bundle finished:\nHash: 1130517a944241558f1f\nVersion: webpack 2.1.0-beta.25\nTime: 3069ms\nAsset     Size  Chunks             Chunk Names\nmain  2.19 MB       0  [emitted]  main\ntest/main.js  6.55 kB       1  [emitted]  test/main.js\nchunk    {0} main (main) 1.77 MB [entry] [rendered]\n[0] ./~/core-js/modules/_export.js 1.6 kB {0} [built]\n[1] ./~/@angular/core/index.js 355 bytes {0} [built]\n..."
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "webpack runs! karma-webpack is a very easy way to integrate Karma and webpack. So now, let’s make the second test in ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "test/sub.js",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": ":",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "describe(\"sub test\", () => {\n  it(\"always fails\", () => {\n    expect(0).toBe(1);\n  });\n});"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "And import that in test/main.js:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "describe(\"Meaningful Test\", () => {\n  it(\"1 + 1 => 2\", () => {\n    expect(1 + 1).toBe(2);\n  });\n});\nimport \"./sub\";"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "test/sub.js contains the test fails always. In this state, try to run test once.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "Chrome 54.0.2840 (Mac OS X 10.11.6) sub test always fails FAILED\nExpected 0 to be 1.\nat Object.it (test/main.js:74:19)\nChrome 54.0.2840 (Mac OS X 10.11.6): Executed 2 of 2 (1 FAILED) (0.045 secs / 0.014 secs)"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "As you can see, the test failed. It’s expected totally. But there is an important thing. Can you notice a weird information in that error logs?",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Yes, it’s a stack trace. Despite we wrote failing test at test/sub.js, that error is logged as ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "at Object.it (test/main.js:74:19)",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ". It’s because of webpack bundling. That stack trace, ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "(test/main.js:74:19)",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ", points at the line of the bundled file. It needs ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "sourcemap",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " information to show stack traces as we expect.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Install ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "karma-sourcemap-loader",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": ", which is a preprocessor for loading sourcemap into karma.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "> npm i -D karma-sourcemap-loader"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Next, update karma.config.js to add “sourcemap” into preprocessors.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "preprocessors: {\n    'test/main.js': ['webpack', 'sourcemap']\n},"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "It’s ready! Let’s fail our test again and see error logs.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "Chrome 54.0.2840 (Mac OS X 10.11.6) sub test always fails FAILED\nExpected 0 to be 1.\nat Object.it (webpack:///test/sub.js:3:0 <- test/main.js:74:19)\nChrome 54.0.2840 (Mac OS X 10.11.6): Executed 2 of 2 (1 FAILED) (0.03 secs / 0.007 secs)"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Woohoo! That’s a perfect stack trace. We’ve got an environment to execute karma tests with webpack. But this is a starting point. Next step is setting up ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Angular testing",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": ".",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Setting up Angular Testing",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Currently we have the entry point for testing bundle but it’s a JavaScript file. Let’s create ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "src/main.spec.ts",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " and update ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "test/main.js",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " to import it. (no longer use test/sub.js).",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "src/main.spec.ts:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "describe(\"main test\", () => {\n  it(\"always fails\", () => {\n    expect(0).toBe(1);\n  });\n});"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "test/main.js:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "require(\"../src/main.spec.ts\");"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "And install type definitions of Jasmine and add it into ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "types",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " property of tsconfig.json.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "> npm i -D @types/jasmine"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "tsconfig.json:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "json",
      "filename": "",
      "text": "{\n  \"compilerOptions\": {\n    \"module\": \"es2015\",\n    \"target\": \"es5\",\n    \"noImplicitAny\": false,\n    \"sourceMap\": true,\n    \"moduleResolution\": \"node\",\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    \"lib\": [\"es2015\", \"dom\"],\n    \"types\": [\"node\", \"jasmine\"]\n  },\n  \"awesomeTypeScriptLoaderOptions\": {\n    \"useWebpackText\": true\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Run tests. As below, sourcemap is working well even if tests are written in TypeScript.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "Chrome 54.0.2840 (Mac OS X 10.11.6) main test always fails FAILED\nExpected 0 to be 1.\nat Object.<anonymous> (webpack:///src/main.spec.ts:3:18 <- test/main.js:74:19)\nChrome 54.0.2840 (Mac OS X 10.11.6): Executed 1 of 1 (1 FAILED) ERROR (0.034 secs / 0.006 secs)"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Initializing Angular TestBed",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular testing uses ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "TestBed",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": ". We have to initialize it at the first of the test runner. In addition, importing ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "polyfills",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " and ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "zone.js",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " is needed.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Update ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "src/main.spec.ts",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " as following:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "import \"core-js\"; // ES6 + reflect-metadata\n// zone.js\nimport \"zone.js/dist/zone\";\nimport \"zone.js/dist/proxy\";\nimport \"zone.js/dist/sync-test\";\nimport \"zone.js/dist/async-test\";\nimport \"zone.js/dist/jasmine-patch\";\n// TestBed initialization\nimport { TestBed } from \"@angular/core/testing\";\nimport {\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting\n} from \"@angular/platform-browser-dynamic/testing\";\nTestBed.initTestEnvironment(\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting()\n);"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "All preparing was completely ended! At the beginning, let’s make a pipe and its spec.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "src/echo.pipe.ts;",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "import { Pipe, PipeTransform } from \"@angular/core\";\n@Pipe({\n  name: \"echo\"\n})\nexport class EchoPipe implements PipeTransform {\n  transform(value: any): any {\n    return value;\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "src/echo.pipe.spec.ts",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "import { Component } from \"@angular/core\";\nimport { TestBed, async } from \"@angular/core/testing\";\nimport { EchoPipe } from \"./echo.pipe\";\n@Component({\n  selector: \"test\",\n  template: `\n    <p>{{ text | echo }}</p>\n  `\n})\nclass TestComponent {\n  text: string;\n}\ndescribe(\"EchoPipe\", () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [TestComponent, EchoPipe]\n    });\n  });\n  beforeEach(async(() => {\n    TestBed.compileComponents();\n  }));\n  it(\"works well\", async(() => {\n    const fixture = TestBed.createComponent(TestComponent);\n    fixture.componentInstance.text = \"foo\";\n    fixture.detectChanges();\n    const el = fixture.debugElement.nativeElement as HTMLElement;\n    expect(el.querySelector(\"p\").textContent).toBe(\"foo\");\n  }));\n});"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "At last, load that spec from src/main.spec.ts. ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "require.context",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " is very useful utility of webpack that can load all modules in directory recursively.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "// TestBed initialization\n// ...\n// load all specs in ./src\nconst context = (require as any).context(\"./\", true, /\\.spec\\.ts$/);\ncontext.keys().map(context);"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "More things",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Official documentation for testing",
          "href": "https://angular.io/docs/ts/latest/guide/testing.html",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " is a very good article. You can trying it with the testing environment which we’ve created here.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Conclusion",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "karma-webpack",
              "annotations": {
                "bold": true
              }
            },
            {
              "type": "text",
              "text": " and sourcemap are awesome.",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Create a testing entry point and initialize ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "TestBed",
              "annotations": {
                "bold": true
              }
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Write tests!",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Source code in this article is at ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "GitHub",
          "href": "https://github.com/laco0416/ng2-test-seed",
          "annotations": {}
        }
      ]
    }
  ]
}
