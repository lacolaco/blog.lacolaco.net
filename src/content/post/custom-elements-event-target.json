{
  "pageId": "5a42f600-d919-4260-a6a8-94cfdc3fbe3d",
  "lastEditedAt": "2023-05-21T04:57:00.000Z",
  "slug": "custom-elements-event-target",
  "properties": {
    "title": "Custom ElementsとEventTargetの話",
    "date": "2018-04-25T00:00:00.000Z",
    "tags": ["tech", "Web Components"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Shadow DOM の Hayato Ito さんと、Custom Elements と EventTarget についてちょっと議論できた話。（ありがとうございました！）",
          "annotations": {}
        }
      ]
    },
    {
      "type": "divider"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "先日、Web Components Cafe で登壇しました。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://slides.com/laco/angular-webcomponents-20180423/"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "最近自分の中で Custom Elements の盛り上がりが強くて、 単純な Presentational なコンポーネントだけじゃなく、 ある程度の機能を備えたマイクロアプリケーションとしての Custom Elements をどう設計・運用するか、みたいなところを考えてる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "イベントの話",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Custom Elements で分断されたマイクロアプリケーション間でコミュニケーションしようとすると、当然それらの外側にある何かを介するしかなくて、 現実的には何かしらのイベントバスが必要になる。パッと思いつくのは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "window",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " をイベントバスとして使うケース。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/l/lacolaco/20180425/20180425101709.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これには問題があって、イベントは文字列で識別されるので、未知のタグやスクリプトから同じ名前のイベントが通知されるおそれがある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/l/lacolaco/20180425/20180425101949.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これを解決するためには、そのドメインに閉じた scoped なイベントバスが欲しいという話。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "CustomElementRegistry",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "で、そのスコープって今仕様が議論されている CustomElementRegistry と同じ粒度なんじゃないかと思い、 GitHub に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "EventTargetRegistry",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": "みたいなものがあると良いのでは！？というコメントを書いてみた。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "quote",
      "text": [
        {
          "type": "text",
          "text": "I think scoped root EventTarget also will be needed. Separated elements can only communicate each other via its outer event bus, window. Events are identified by its name as well as elements. So, as the same idea, I guess something like EventTargetRegistry will be important.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/w3c/webcomponents/issues/716#issuecomment-383540589",
          "href": "https://github.com/w3c/webcomponents/issues/716#issuecomment-383540589",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今思うとかなりふわふわしてるコメントだけど、ありがたいことに Shadow DOM の Hayato Ito さんが返信してくれた",
          "annotations": {}
        }
      ]
    },
    {
      "type": "quote",
      "text": [
        {
          "type": "text",
          "text": "@lacolaco Could you kindly give us an example how scoped root EventTarget works? Pseudo-code snippet might be helpful to understand the basic idea.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/w3c/webcomponents/issues/716#issuecomment-383780403",
          "href": "https://github.com/w3c/webcomponents/issues/716#issuecomment-383780403",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "改めてユースケースを考えてみると、新しい Registry が必要なことはなくて、CustomElementRegistry そのものが EventTarget になってくれたらよさそうだった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "quote",
      "text": [
        {
          "type": "text",
          "text": "@hayatoito Just an idea, for example, I think CustomEelementRegistry can be an EventTarget.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "const xRegistry = new CustomElementRegistry();class XFoo extends HTMLElement {  constructor() {    super();    this.addEventListener(\"click\", () => {      // dispatch a scoped event      xRegistry.dispatchEvent(new CustomEvent(\"xEvent\"));    });  }}class XBar extends HTMLElement {  constructor() {    super();    // subscribe scoped events    xRegistry.addEventListener(\"xEvent\", () => {      // ...    });  }}xRegistry.define(\"x-foo\", XFoo);xRegistry.define(\"x-bar\", XBar);"
    },
    {
      "type": "image",
      "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/l/lacolaco/20180425/20180425104452.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これには Hayato Ito さんも同意してくれたんだけど、実は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "EventTarget",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " って普通に new できることを教えてくれた。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "quote",
      "text": [
        {
          "type": "text",
          "text": "Thanks. Just in case, EventTarget is now constructible. Users can create their own EventTarget and use it for any purpose.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これ知らなかったのですべてひっくり返って「これでいいじゃん（いいじゃん）」になった。ありがとうございます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "new EventTarget()",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "window や document、Element など ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "addEventListener",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "できるオブジェクトはみんな",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "EventTarget",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "インターフェースを実装しているんだけど、 実は去年の whatwg DOM Standard のアップデートで、開発者が自由に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "new EventTarget()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " できるようになってた。知らなかった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ついでにいえば、サブクラスを作ることもできるようになってた。知らなかった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://dom.spec.whatwg.org/#dom-eventtarget-eventtarget",
          "href": "https://dom.spec.whatwg.org/#dom-eventtarget-eventtarget",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/whatwg/dom/commit/c4c1c8b47340a1e5ecc1a07670927b831f240586"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "MDN にも項目があった。知らなかった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/EventTarget",
          "href": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/EventTarget",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ただ、ブラウザの実装状況はまだそれほどよくない。まだ使いづらい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/l/lacolaco/20180425/20180425103928.png",
      "caption": ""
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "CustomElementRegistry が EventTarget になったら直感的な気がする",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "EventTarget は new できる",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "現状は自前で EventBus 作る感じになりそう。",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
