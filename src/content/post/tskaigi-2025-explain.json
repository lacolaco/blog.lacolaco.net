{
  "pageId": "2033521b-014a-80d9-8b70-f882faed196e",
  "lastEditedAt": "2025-05-31T02:12:00.000Z",
  "slug": "tskaigi-2025-explain",
  "locale": "ja",
  "properties": {
    "title": "TSKaigi 2025「SignalとObservable ― 新たなデータモデルを解きほぐす」補足解説",
    "date": "2025-05-31T02:05:00.000Z",
    "category": "Tech",
    "tags": ["TypeScript", "Signals", "パターン"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "先日TSKaigi 2025で話した「SignalとObservable ― 新たなデータモデルを解きほぐす」についての補足解説をする。当日は時間の関係で端折った部分や、登壇後のAsk the speakerでいただいた質問に対する見解なども含めている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "link_preview",
      "url": "https://blog.lacolaco.net/posts/tskaigi-2025-slide/"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Signalを解きほぐす",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "3部構成の初め、Signalについては以下のように論を展開した。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "ECMAScriptへの提案からモチベーションを探る",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Signalと呼ばれる構造の基本的要素をカウンターアプリの例から理解する",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "基本的要素が既存のSignal実装にも共通することを確認する",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Signalと呼ばれるパターンがどのように成立してきたか系譜をたどる",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "現代のJavaScriptでSignalが求められている背景を理解する",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Effectの困難さ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この中で、Signalベースのリアクティビティの基本3要素として “State”, “Computed State”, “Effect” を挙げたが、”Effect”について補足する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "発表中にも少しだけ触れたが、現状ではEffectにあたる機能を標準化するのはなかなか困難だ。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "現在のSignalsの提案",
          "href": "https://github.com/tc39/proposal-signals",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "の中でも、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " についてはスコープ外で、他のSignalプリミティブをベースに各ライブラリやフレームワークが",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に相当するものを実装することを想定している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "const counter = new Signal.State(0);\nconst isEven = new Signal.Computed(() => (counter.get() & 1) == 0);\nconst parity = new Signal.Computed(() => isEven.get() ? \"even\" : \"odd\");\n\n// A library or framework defines effects based on other Signal primitives\ndeclare function effect(cb: () => void): (() => void);\n\neffect(() => element.innerText = parity.get());\n\n// Simulate external updates to counter...\nsetInterval(() => counter.set(counter.get() + 1), 1000);"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そもそものモチベーションにあるように、Signalは状態の変更をリアクティブにUIへ反映させるためのものだった。そしてUIのレンダリングアルゴリズムは各ライブラリやフレームワークが開発者体験やパフォーマンス最適化のために磨き込み、しのぎを削っている部分である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "たとえば、Signalに新たな値をセットしたタイミングですべて同期的に処理することもできるし、新たな値がセットされたときにタスクをキューに積んで非同期的に処理することもできる。頻繁に状態が変わると再描画のコストが高い場合、ある程度の時間的ウィンドウを設けて一定時間内に起きた変更をバッチ処理でまとめて反映する戦略もありうる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Signalの状態変化をどういうタイミングでUIに反映させるのか、そのスケジューリング戦略はUIライブラリ・フレームワークの根幹に関わる部分なので、標準化は難しいだろう。そのスケジューリング戦略こそが",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "をどう実装するかとイコールなので、今回の標準化提案ではその難しい部分をスコープ外にして、まずは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "State",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Computed",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の2つをプリミティブなインターフェースにすることを優先していると思われる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "標準化の難しさ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Signalを標準化しようという提案に対してかならず向けられる反対意見は、「ライブラリで実現できてるならそれでいいのでは？」というものだ。達成したいモチベーションがかならずしもECMAScriptへの仕様追加がなくても実現できるのなら、仕様はできるだけ小さくとどめておくのが将来のためだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この点に関して提案側の言い分はこうだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "相互運用性、再利用可能性による利点",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "状態管理に関する実装が組み込み機能への依存になれば、UIライブラリ・フレームワークを変更するときにも影響を受けず再利用ができる。異なるUIシステムに対して相互運用可能な共通基盤を実装することができる。",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "パフォーマンス最適化",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "Signalの変更追跡アルゴリズムがブラウザのネイティブレイヤー（C++など）で実装されることによるオーバーヘッドの軽減は大きいと見ている",
                      "annotations": {}
                    }
                  ],
                  "children": []
                },
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "またJSファイルのサイズが減らせることによる読み込みパフォーマンスの改善も見込まれる",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "デバッガビリティ",
              "annotations": {}
            }
          ],
          "children": [
            {
              "type": "bulleted_list",
              "items": [
                {
                  "type": "bulleted_list_item",
                  "text": [
                    {
                      "type": "text",
                      "text": "Signalを使ったコードのデバッグは内部状態を追跡したり、リアクティビティの依存関係を視覚化するニーズがあるが、別々の実装だとそれぞれでDevTool的なものを作る必要がある。標準化されればブラウザの標準DevToolでデバッグできるようになる。",
                      "annotations": {}
                    }
                  ],
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これらの利点を踏まえても、現に標準化されなくとも使えている現実がある以上、標準化の必要性についてはやや不利なように思う。しかし、かつてこれと同様の状況にあったと思われるのは、いまや当たり前になっているPromiseの標準化だ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Promiseもかつてはデファクトスタンダード的なライブラリだったものがECMAScriptに組み込まれたもので、標準化以前からPromiseというものはあったし、使われていた。当時も「ライブラリでいいじゃん」という不要論はあったはずだ。それでもPromiseは標準化され、いまとなってはほとんどの非同期APIの共通インターフェースとして定着している。そして",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "async/await",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のような構文の追加にも発展している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今のSignal標準化に対する不要論は妥当だと思いつつ、もしかするとSignalがPromiseのようにいずれ定着した先、Signalを前提としてその上に新たな言語機能が生まれるチャンスを摘んでしまうのではないかと自分は考えている。そういう目線で今後の動向に期待している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Observableを解きほぐす",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "第2部も同様に、Observableについて以下のように論を進めた。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "ECMAScript, W3Cへの提案からモチベーションを探る",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Observableと呼ばれる構造の基本的要素を簡単な例から理解する",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "基本的要素が既存実装にも共通することを確認する",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Observableと呼ばれるパターンがどのように成立してきたか系譜をたどる",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "現代のJavaScriptでObservableが求められている背景を理解する",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "C#におけるLINQとRx",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "発表では時間の関係で途中のC#におけるLINQとRxの話をだいぶ端折ってしまった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "JavaScriptの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Iterable<T>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に相当するC#のインターフェースは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "IEnumerable<T>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という。JavaScriptと同じく配列やジェネレータなど反復可能なオブジェクトだが、C#ではLINQ（統合言語クエリ）という機能で",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "IEnumerable<T>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " インターフェースの利便性を高めている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次の例では、配列 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "numbers",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に対して ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": ".Where",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": ".Select",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という値をクエリするメソッドをつなげて",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "results",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を生成している。これは配列型固有のメソッドではなく、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "IEnumerable<T>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " インターフェースに対して共通に後付けされる",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "拡張メソッド",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": false,
      "path": "tskaigi-2025-explain/3c6255ea-b6c7-4055-8126-638d2819f0c3/4847ebc5-164b-4c5b-b75b-2c0c9d222978.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "C#の拡張メソッド（メンバー）というのは、次のように特定の型に対してメンバー変数を追加できる機能である。以下の例では、文字列型",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "string",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に対して",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "WordCount",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドを追加する拡張を加えている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://learn.microsoft.com/ja-jp/dotnet/csharp/programming-guide/classes-and-structs/extension-methods"
    },
    {
      "type": "code",
      "language": "c#",
      "filename": "",
      "text": "namespace CustomExtensionMembers;\n\npublic static class MyExtensions\n{\n    extension(string str)\n    {\n        public int WordCount() =>\n            str.Split([' ', '.', '?'], StringSplitOptions.RemoveEmptyEntries).Length;\n    }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これと同じことが",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "IEnumerable<T>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "にも行われている。さっきの配列をクエリするコードは、データソースをジェネレータに変えても全く同じである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": false,
      "path": "tskaigi-2025-explain/3c6255ea-b6c7-4055-8126-638d2819f0c3/5ed4c0ec-8c04-4e00-8d41-bece3fc3fdbd.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この考えを非同期データソースにも適用しようということで生まれたのがReactive Extensionsと",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "IObservable<T>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "だ。データソースが非同期的に値が流れてくるストリームであっても、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "results",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を作る宣言的なクエリの部分はほとんど変わっていないことがわかる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": false,
      "path": "tskaigi-2025-explain/3c6255ea-b6c7-4055-8126-638d2819f0c3/31bca5a0-7764-4085-9b0a-f0962185dded.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "標準化への道",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Observableの標準化への動きは今に始まったものではない。ECMAScriptへの追加提案が出されたのは2015年頃、RxJSとAngularの開発チームが中心だったが、これはほとんど前進せずに頓挫した。その後DOM APIへの組み込みに絞ったスコープで2017年頃から再始動し、それもなかなか難航したが、ようやくChromeに実装されるまでに至った。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このあたりのことはWCIGの提案の中にもまとまっているので一読するといい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/WICG/observable?tab=readme-ov-file#history",
          "href": "https://github.com/WICG/observable?tab=readme-ov-file#history",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Observableの標準化の困難さはいろいろあるが、まずひとつはブラウザにしろNode.jsにしろ、すでにストリームを扱うインターフェースがあることだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://developer.mozilla.org/ja/docs/Web/API/Streams_API"
    },
    {
      "type": "link_preview",
      "url": "https://nodejs.org/api/stream.html"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これらはそれぞれWHATWG、Node.jsのものなので、ECMAScriptの仕様ではない。とはいえ現実的にはストリームデータを扱うということだけなら事足りている現状というのはある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Observableが既存のStreamインターフェースと比べて優位性がある部分はおそらく宣言的なパイプライン構築の部分など開発者体験が主になりそうだが、それだけならライブラリのままでいいという不要論は退けられないだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Signalと同じくブラウザに組み込まれることによるパフォーマンス最適化や相互運用性の利点はあるにせよ、すでに標準化されているAPIとの間の棲み分けの点ではSignalよりもさらに困難かもしれない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Choosing a model",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "最後に、抽象化モデルの選択について話しながら結論へと向かった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "「不在=必要」ではない",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "発表スライドでは次の図を使って、SignalとObservableがそれぞれ現在のECMAScriptにおける「不在」を埋める抽象化モデルであると話した。だが、これらが「不在」だからといって、「必要」であるかどうかとはまったく別の話だ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": false,
      "path": "tskaigi-2025-explain/3c6255ea-b6c7-4055-8126-638d2819f0c3/101a3259-0a9f-4725-b00f-aff5cf488944.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "むしろ「不要」だからこそ、これまで不在だったのだと考えることもできる。つまり、JavaScriptという言語が適用される問題領域に対して、今の仕様で十分に解を与えられているならそれ以上に広げる必要はないということだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "だからこそ、こうした「不在」を「必要」に変えるためには新たな問題設定が重要で、エコシステムが取り組む問題領域のほうが広がっているのだという主張しないといけない。「今のJavaScriptでは解けない問題がある」ということに合意を形成できるかどうかにかかっている。それが特定のアーキテクチャ、特定の思想に閉じた問題であれば、標準化への道は険しくなるだろう。「まさしく問題なるものはない」のである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://blog.lacolaco.net/posts/there-is-no-problem/"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "以上、発表で話せなかった、伝わりにくかったと思われる部分の補足解説をした。結局のところ、この発表を通じて言いたかったことは2つ。具体的な物だけを見るのではなく構造とパターンを取り出し、そのパターンの背後にある原則や原理、そして価値観を把握することで、はじめて意味が見えてくるということ。もうひとつは、そのようにパターンは、言語を超えて紡がれている通時的な系譜の連続性と、共時的な発展の多様性の両方に視野を広げておくことで見つけやすくなるということ。やはり『達人プログラマー』の教えのとおり、毎年新しいプログラミング言語をひとつ習得するのは大事なことだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
