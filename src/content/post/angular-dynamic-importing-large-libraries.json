{
  "pageId": "d3b13513-d4e3-4d4a-bccf-1f286f55a32b",
  "lastEditedAt": "2023-05-21T05:52:00.000Z",
  "slug": "angular-dynamic-importing-large-libraries",
  "properties": {
    "title": "Angular: Dynamic Importing Large Libraries",
    "date": "2019-03-06T00:00:00.000Z",
    "tags": ["tech", "Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "This post explains how to import large 3rd-party libraries into your Angular application without pain on initial payload size.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Example: Chart.js in Angular",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Chart.js",
          "href": "https://www.chartjs.org/",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " is a popular library to render rich charts. It contains a lot of features and its payload size is huge.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "To use it in your Angular application, typically you write a ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "import",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " statement in TypeScript code and call it like the below;",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "import { Component, ViewChild, ElementRef } from \"@angular/core\";\n\n// Import 'chart.js' package\nimport * as Chart from \"chart.js\";\n\n@Component({\n  selector: \"app-root\",\n  template: `\n    <div>\n      <canvas #chart></canvas>\n    </div>\n  `\n})\nexport class AppComponent {\n  @ViewChild(\"chart\") chartElement: ElementRef<HTMLCanvasElement>;\n\n  ngOnInit() {\n    new Chart(this.chartElement.nativeElement, {\n      /** chart configurations */\n    });\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "As you can expect easily, this import makes ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "main.bundle.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " large. Increasing the initial payload size is one of what we want most to avoid.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "/images/angular-dynamic-importing-large-libraries/0c061a9d-975c-4166-95c4-1686e2d5ae3c/1__P7kR4JOftK2sOO43PCSLdw.png",
      "caption": "Build result"
    },
    {
      "type": "image",
      "url": "/images/angular-dynamic-importing-large-libraries/bc9c7a7a-9f04-405c-9d9d-07fee950a580/1__bdvPHFVhblVx3JsiGjxTwQ.png",
      "caption": "Chart.js: ~500KB"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Use import()",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "import()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " is a new feature of ECMAScript. It loads a script dynamically in runtime. In the future, all modern browsers support it natively. But today, its support is not enough.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Can I use… JavaScript modules: dynamic import()",
          "href": "https://caniuse.com/#feat=es6-module-dynamic-import",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "No problem, webpack helps us",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": ". webpack can replace",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "import()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " calls with its own dynamic module loading function in the bundling flow. You can imagine it just like a polyfill.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "webpack: Dynamic Imports",
          "href": "https://webpack.js.org/guides/code-splitting#dynamic-imports",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Because Angular CLI uses webpack, we can use it, even in Angular CLI-based applications. ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "There is no “",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "eject”",
          "annotations": {
            "bold": true,
            "italic": true
          }
        },
        {
          "type": "text",
          "text": ". Don’t worry! :)",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Preparation: Edit tsconfig.json",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Also, TypeScript has support for dynamic ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "import()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " , but it is enabled only in some module types. Open ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "tsconfig.json",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " at the root directory and set its ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "module",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " field to ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "esnext",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " . It doesn’t affect the final bundle’s browser compatibility because all module resolutions are solved by webpack behind of Angular CLI.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "json",
      "filename": "",
      "text": "{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"importHelpers\": true,\n    \"target\": \"es5\",\n    \"typeRoots\": [\"node_modules/@types\"],\n    \"lib\": [\"es2018\", \"dom\"]\n  }\n}"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Migrate to dynamic ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "import()",
          "annotations": {
            "code": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Call ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "import()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " in the TypeScript code simply like following. That’s all…",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "import { normalizeCommonJSImport } from '../utils/normalizeCommonJSImport';\n\n// import() returns a Promise\nconst importChart = normalizeCommonJSImport(\n  import(/* webpackChunkName: \"chart\" */ 'chart.js'),\n);**\n\n@Component({ ... })\nexport class AppComponent {\n  @ViewChild('chart') chartElement: ElementRef<HTMLCanvasElement>;\n\n async ngOnInit() {\n    // Wait for dynamic import resolution\n    const Chart = await importChart;\n\n    new Chart(this.chartElement.nativeElement, {\n      /** chart configurations */\n    });\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "normalizeCommonJSImport",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " is a utility function for ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "compatibility between CommonJS module and ES modules",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " and for ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "strict-typing.",
          "annotations": {
            "bold": true
          }
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "export function normalizeCommonJSImport<T>(\n  importPromise: Promise<T>\n): Promise<T> {\n  // CommonJS's `module.exports` is wrapped as `default` in ESModule.\n  return importPromise.then((m: any) => (m.default || m) as T);\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "For details about module compatibility, please read this.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "webpack 4: import() and CommonJs",
          "href": "https://medium.com/webpack/webpack-4-import-and-commonjs-d619d626b655",
          "annotations": {
            "bold": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "In this case, TypeScript’s ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "import()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " returns ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Promise<typeof Chart>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " as well as ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "import * as Chart from ‘chart.js’",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ". This is a problem because ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "chart.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " is a CommonJS module. Without any helpers,",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "default",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " doesn’t exist in the result of ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "import()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " . So we have to mark it as ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "any",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " temporary and remark ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "default",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " as the original type. This is a small hack for correct typing.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "As the result, you can see separated bundles like below. ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "chart.<hash>.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " is not marked as ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "[initial]",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "; it means this bundle is loaded lazily and doesn’t affect initial bootstrapping.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "/images/angular-dynamic-importing-large-libraries/e5553826-ec93-46b5-b80a-4fca0c793500/1__FY__MPUG__xp4BXeWVfZaTXg.png",
      "caption": "Build result"
    },
    {
      "type": "image",
      "url": "/images/angular-dynamic-importing-large-libraries/d04b613a-9c51-4298-8d27-55ef3e2f57df/1__aKkqoplA1K2wEBuhfBCBpQ.png",
      "caption": "Dynamic loading in the browser"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Conclusion",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Static importing large libraries brings big pain for initial bootstrapping performance.",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Dynamic importing will come to modern browsers in the future, and we can use it today with webpack’s help.",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "There are some issues which we have to care about around CommonJS-ESModules compatibility.",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "The full code example is here. Thanks.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "lacolaco/angular-chartjs-dynamic-import",
          "href": "https://github.com/lacolaco/angular-chartjs-dynamic-import",
          "annotations": {
            "bold": true
          }
        }
      ]
    }
  ]
}
