{
  "pageId": "ab8e4521-25df-4704-bcc7-aa3da401391d",
  "lastEditedAt": "2023-05-21T05:48:00.000Z",
  "slug": "angular-eliminate-render-blocking-requests",
  "properties": {
    "title": "Angular: Eliminate Render Blocking Requests の概要",
    "date": "2020-10-01T00:00:00.000Z",
    "tags": ["tech", "Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この記事では Angular CLI チームで現在進行中の “Eliminate Render Blocking Requests” というプロジェクトについてその内容を解説する。 一次ソースは以下のリンク先を参照されたし。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "[RFC] Eliminate Render Blocking Requests · Issue #18730 · angular/angular-cli",
              "href": "https://github.com/angular/angular-cli/issues/18730",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Eliminate render-blocking resources · Issue #17966 · angular/angular-cli",
              "href": "https://github.com/angular/angular-cli/issues/17966",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "概要",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このプロジェクトは Angular アプリケーションが依存する CSS について、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Render-Blocking",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " な HTTP リクエストを無くそうというものである。 Render-Blocking なリソースの除去については web.dev の記事を参考にするとよい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Eliminate render-blocking resources",
          "href": "https://web.dev/render-blocking-resources/",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "最初のレンダリングに必要な CSS の読み込み時間がなくなることで First Contentful Paint（FCP）のパフォーマンスが改善される見込みだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular CLI チームが RFC（Request For Comments）で 提案したのは次のような手法である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "CSS ファイルの読み込みの非同期化",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Angular Universal SSR や Pre-rendering、App-Shell、通常のクライアントサイドレンダリングでのクリティカル CSS のインライン化",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Google Fonts と Icons のインライン化",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これらを Angular CLI で特別な設定無しに利用できるようにすることを目的としている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "背景",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ng build",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " コマンドのビルドに使われる ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "styles",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の CSS ファイルは基本的にリセット CSS や Theming など、ページ表示の最初に読み込まれることが期待されている。 しかし CSS は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "styles.css",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のような形でバンドルされ、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<link>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "タグで読み込むことになるため、この ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "styles.css",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が肥大化するとページの First Contentful Paint（FCP）が遅くなる原因になる。 とはいえ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "styles.css",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の内容をすべてインライン化するのは HTML ファイルのペイロードサイズを肥大化させてしまう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そこで、本当にクリティカルな CSS だけをインライン化し、残りの部分を非同期化することで FCP を改善しようというのが今回の趣旨である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "解決案",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これらの手法は Angular CLI に合理的な形で組み込めるかどうかはまだ保証できないが、現時点でのアイデアとして提案されているものであり、確定事項ではない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "CSS の非同期読み込み",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "バンドルされた ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "styles.css",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が初期レンダリングに必要のないため CSS の読み込みを待たずにレンダリングを始めてよいことをブラウザに伝える。 具体的には ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<link>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " タグの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "media",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 属性を使い、印刷などの特殊なユースケースを除いた通常のユースケースでは読み込みを非同期化する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Before",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<link rel=\"stylesheet\" href=\"styles.css\" />"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "After",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<link\n  rel=\"stylesheet\"\n  href=\"styles.css\"\n  media=\"print\"\n  onload=\"this.media='all'\"\n/>\n<noscript><link rel=\"stylesheet\" href=\"styles.css\" /></noscript>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "参考: ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "レンダリング ブロック CSS  |  Web  |  Google Developers",
          "href": "https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "CSS Files Budget",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "CSS のダウンロードやパースの時間を短縮するため、ファイルサイズに関する新たな Budget を追加する。 実際には参照されないデッドコードの除去や、グローバル CSS ではなく適切なコンポーネントのスタイルへの移動などを促進する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "anyStyle",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": ": 外部 CSS ファイル個別のサイズ",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "allStyle",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": ": すべての外部 CSS ファイルの累計サイズ",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "すでに存在する",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "anyComponentSyle",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " はコンポーネント CSS のファイルサイズを対象としているので全く別物である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Google Fonts と Icons のインライン化",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://fonts.googleapis.com/",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " から最初にダウンロードするフォント読み込みの CSS をインライン化することで HTTP リクエストのラウンドトリップを削減する。 これまでは CSS の読み込みのあとに ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "woff",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " などのフォントファイルの読み込みが行われていたが、フォントファイルの読み込みだけになる。 また、Angular CLI が参照する browserslist の設定に基づいて最適なフォントフォーマットの決定も自動的に行われる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Before",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<link\n  rel=\"stylesheet\"\n  href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n/>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "After",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<style>\n  @font-face {\n    font-family: 'Material Icons';\n    font-style: normal;\n    font-weight: 400;\n    src: url(https://fonts.gstatic.com/s/materialicons/v55/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2)\n      format('woff2');\n  }\n\n  .material-icons {\n    font-family: 'Material Icons';\n    font-weight: normal;\n    font-style: normal;\n    font-size: 24px;\n    line-height: 1;\n    letter-spacing: normal;\n    text-transform: none;\n    display: inline-block;\n    white-space: nowrap;\n    word-wrap: normal;\n    direction: ltr;\n  }\n</style>"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "クリティカル CSS の抽出",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Render-Blocking な CSS だけをインライン化するためには CSS を解析してその部分だけを抽出する必要がある。 これをすでに実現しているプロジェクトとして、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "penthouse",
          "href": "https://github.com/pocketjoso/penthouse",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "critters",
          "href": "https://github.com/GoogleChromeLabs/critters",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "critical",
          "href": "https://github.com/addyosmani/critical",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "などがある。 これらはアプリケーションを一度レンダリングし、そこで参照されたクリティカル CSS を抽出する方法をとっている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Google Chrome チームが開発している critters は抽出のためのレンダリングにヘッドレスブラウザではなく JSDOM を用いており、 ビルド時だけでなくランタイムで動作させる選択肢としては上述のツールの中で最適であると考えられる。 ただし、critters は viewport を予測せず、ドキュメントに読み込まれたすべての CSS をインライン化してしまうトレードオフがある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、Angular アプリケーションのユースケースにおいてそれぞれの課題を挙げている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Angular Universal (SSR)",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "critters は webpack プラグインであるため、Node.js サーバー上で動的にビルドする Angular Universal は利用できない。 したがって、Universal を考慮すれば critters のコア機能だけを Node.js 向けに切り出したものが必要になるだろう。 うまく実現できれば、Universal でビルドした HTML の中にクリティカル CSS をインライン化してクライアントに返すことができる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "App-Shell / Pre-rendering",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular CLI のビルド時にあらかじめ HTML をレンダリングする App-Shell や Universal Pre-rendering のユースケースについては、critters の基本的なアプローチで解決できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Client Side Rendering （CSR）",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "クライアントサイドレンダリングのアプリケーションは、Node.js 環境で実行できないため critters のようなツールでの クリティカル CSS 抽出ができない。 しかし Angular コンテキストではないカスタムの CSS 読み込み は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "index.html",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で記述されることが多いため、ビルド時にこれらを抽出してインライン化することでこのケースをカバーする。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "代替案",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "以下のアイデアは現時点では有用性が低い、実現可能性が低いなどの理由で採用される見込みの低いものである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "明示的なクリティカル CSS 定義",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "インライン化されるべきクリティカル CSS を開発者がアノテーションし、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "postcss-critical-split",
          "href": "https://github.com/mrnocreativity/postcss-critical-split#readme",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "のようなツールで抽出するアプローチ。 このアプローチはその CSS がクリティカルであるかを開発者が判断しなければならないという問題と、サードパーティ CSS にはアノテーションできないという欠点があるため却下された。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "css",
      "filename": "",
      "text": "/* critical:start */\nheader {\n  background-color: #1d1d1d;\n  font-size: 2em;\n}\n\n.aside {\n  text-decoration: underline;\n}\n/* critical:end */"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "ヘッドレスブラウザによるクリティカル CSS 抽出",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Penthouse",
          "href": "https://github.com/pocketjoso/penthouse",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " はヘッドレス Chrome を使ってレンダリングしてクリティカル CSS を抽出するため、 Node.js で実行できない CSR のアプリケーションにも適用できる点で優れている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ただしこのアプローチはランタイムで実行しなければならない Angular Universal のユースケースでパフォーマンスを落とすため却下された。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "ルートコンポーネントでのグローバル CSS 読み込み",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "いわゆる ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "styles",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を使ってグローバル CSS を読み込んでしまうことで コンポーネント CSS として Render-Blocking しない形でインライン化するアプローチ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これは App-Shell や Pre-rendering のユースケースにおいて ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "index.html",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "styles.css",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の内容をすべて含み肥大化してしまう欠点がある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "DNS-Prefetch と Preconnect Hints",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Google Fonts と Icons の読み込みについて、DNS-Prefetch と Preconnect Hints を活用するアプローチ。 欠点は特に無いが CSS のインライン化のほうがより効果的であると考えている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "RFC のフィードバック",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "RFC を通して集まったフィードバックのまとめは以下の通り。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "この機能はデフォルトで有効であり、オプトアウト可能であるべき",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "新しい Size Budget は新プロジェクト、既存プロジェクトの両方に追加されるべき",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "CSS ファイルの Budget の追加にあたり、非利用 CSS の除去の手段も一緒に提供されることが望まれている",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "リリース時期はまだ未定であるが、Angular アプリケーションのパフォーマンス改善のための大きなプロジェクトである。 v10 で導入された CommonJS インポート時の警告といい、Angular 特有のパフォーマンスというよりは web.dev で取り上げられるようなベストプラクティス的なパフォーマンス改善のアプローチを、Angular CLI のデフォルト機能としてサポートする取り組みに力が入っているようにも見える。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "How CommonJS is making your bundles larger",
              "href": "https://web.dev/commonjs-larger-bundles/",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Eliminate Render-Blocking Requests についてはゼロコンフィグ、あるいはほぼ設定不要で使えるべきであるという姿勢が強く見られるため、 完成には時間がかかりそうではあるがぜひ期待したい。",
          "annotations": {}
        }
      ]
    }
  ]
}
