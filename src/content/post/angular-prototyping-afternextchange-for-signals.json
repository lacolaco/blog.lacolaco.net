{
  "pageId": "1803521b-014a-8061-ac65-d2a070fe5d09",
  "lastEditedAt": "2025-01-19T10:41:00.000Z",
  "slug": "angular-prototyping-afternextchange-for-signals",
  "locale": "ja",
  "properties": {
    "title": "Angular: Prototyping afterNextChange for Signals",
    "date": "2025-01-19T09:44:00.000Z",
    "category": "Tech",
    "tags": ["Angular", "Signals"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "While developing Angular applications with Signals, I frequently encounter the need for practical utilities not yet supported by the framework. This prototype addresses specific challenges when working with ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ".",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Wait for the next change",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "When working with signals, I sometimes need to delay a function's execution until the next signal change. However, using ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "effect()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " presents two key problems in this scenario.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "numbered_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "The first ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "effect()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " execution uses the current signal value.",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "An ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "effect()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " cannot be destroyed from within its own callback function.",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "As a result, here's an example implementation of ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "waitForNextChange()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ". This function returns a ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Promise<T>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " that resolves with the next value from the source ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Signa<T>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ". The function skips the first (current) value, uses the second value to resolve the promise, and when the promise resolves, the watcher will be destroyed.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "function waitForNextChange<T>(\n  source: Signal<T>,\n  injector: Injector\n): Promise<T> {\n  let watcher: EffectRef;\n  const p = new Promise<T>((resolve) => {\n    let first = true;\n    watcher = effect(\n      () => {\n        const value = source();\n        if (first) {\n          // skip the first value\n          first = false;\n        } else {\n          untracked(() => resolve(value));\n        }\n      },\n      { injector, manualCleanup: true }\n    );\n  });\n  return p.finally(() => watcher.destroy());\n}\n\nconst touched = signal(false);\nwaitForNextChange(touched, injector).then(() => {\n  console.log('touched');\n});\n"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "The above implementation is virtually same to this. ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "// Rewrite with rxjs-interop\nfunction waitForNextChange<T>(\n  source: Signal<T>,\n  injector: Injector\n): Promise<T> {\n  return firstValueFrom(toObservable(source, { injector }).pipe(skip(1)));\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Alternatively, using a callback function style similar to Angular's ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "afterNextRender",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ", the implementation would look like this:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "function afterNextChange<T>(\n  source: Signal<T>,\n  injector: Injector,\n  callback: (value: T) => void\n): void {\n  let watcher: EffectRef;\n  const p = new Promise<T>((resolve) => {\n    let first = true;\n    watcher = effect(\n      () => {\n        const value = source();\n        if (first) {\n          // skip the first value\n          first = false;\n        } else {\n          untracked(() => resolve(value));\n        }\n      },\n      { injector, manualCleanup: true }\n    );\n  });\n  p.then(callback).finally(() => watcher.destroy());\n}\n\nconst touched = signal(false);\nafterNextChange(touched, injector, () => {\n  console.log('touched');\n});"
    },
    {
      "type": "stackblitz",
      "url": "https://stackblitz.com/edit/stackblitz-starters-sbqq9vcc?ctl=1&embed=1&file=src%2Fmain.ts"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Considerations",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Although these implementations are functional, there are some drawbacks to consider. The requirement for an ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Injector",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " particularly degrades the developer experience. While Promises are a native JavaScript feature and Signals are meant to be Angular's \"primitives,\" converting between them is unexpectedly complex. This conversion process should be more intuitive and require less boilerplate.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
