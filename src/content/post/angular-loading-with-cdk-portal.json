{
  "pageId": "4218a5a9-be5f-46b9-b852-033819cb87da",
  "lastEditedAt": "2023-12-30T10:10:00.000Z",
  "slug": "angular-loading-with-cdk-portal",
  "locale": "ja",
  "properties": {
    "title": "Angular CDKのPortalを使ったローディングラッパーの実装",
    "date": "2018-07-01T00:00:00.000Z",
    "category": "Tech",
    "tags": ["Angular", "Angular CDK"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今回は Angular CDK(Component Dev Kit)の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Portal",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " 機能を使って、ローディングラッパーコンポーネントを実装する例の紹介です。 Angular の基本的な書き方はわかっている前提の内容になります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "divider"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ローディングラッパーとは次のようなテンプレートで、ローディング中はローディング表示を、ローディングが終わったら子要素を表示するようなコンポーネントを指しています。 たとえばこのようなテンプレートです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<mat-card>\n  <loading-wrapper [loading]=\"isLoading$ | async\">\n    <div>Done!</div>\n  </loading-wrapper>\n</mat-card>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このように、ローディング状態によってビューが差し替わります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": true,
      "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/l/lacolaco/20180701/20180701162327.gif",
      "caption": ""
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "CdkPortal の使い方",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "@angular/cdk/portal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "からインポートできる",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "PortalModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "によって、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "cdkPortalOutlet",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "などのいくつかのディレクティブが有効になります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import { NgModule } from \"@angular/core\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { PortalModule } from \"@angular/cdk/portal\";\n\nimport { AppComponent } from \"./app.component\";\nimport { LoadingWrapperComponent } from \"./loading-wrapper.component\";\n\n@NgModule({\n  imports: [BrowserModule, PortalModule],\n  declarations: [AppComponent, LoadingWrapperComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "cdkPortalOutlet",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ディレクティブは、渡された",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "CdkPortal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に紐づくビューをその位置に表示します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://material.angular.io/cdk/portal/api#CdkPortalOutlet",
          "href": "https://material.angular.io/cdk/portal/api#CdkPortalOutlet",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<ng-template [cdkPortalOutlet]=\"contentPortal\"></ng-template>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "つまり、ローディングラッパーコンポーネントがおこなうことは、ローディング状態に応じて",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "contentPortal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の中身を差し替えることです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "TemplatePortal の作成",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "CdkPortal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "はいくつかの種類がありますが、今回は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "TemplateRef",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "をビューとして保持する",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "TemplatePortal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使います。 ローディング状態のテンプレートを",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "loadingContent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "、親コンポーネントから渡されるコンテンツ要素を",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "content",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "として、それぞれ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ViewChild",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "でコンポーネントから参照できるようにします。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<ng-template #loadingContent>\n  <div>\n    <div>Loading...</div>\n    <mat-spinner color=\"accent\"></mat-spinner>\n  </div>\n</ng-template>\n\n<ng-template #content>\n  <ng-content></ng-content>\n</ng-template>\n\n<ng-template [cdkPortalOutlet]=\"contentPortal\"></ng-template>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コンポーネント側では、初期化時と、ローディング状態を制御する",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "loading",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティが変わったときにビューをスイッチするようにします。 次のコードにおける",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "switchView",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドが、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "TemplateOutlet",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を作成している部分です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: \"loading-wrapper\",\n  templateUrl: \"./loading-wrapper.component.html\"\n})\nexport class LoadingWrapperComponent implements OnInit, OnChanges {\n  @Input() loading: boolean;\n\n  @ViewChild(\"loadingContent\") loadingContentTemplate: TemplateRef<any>;\n  @ViewChild(\"content\") contentTemplate: TemplateRef<any>;\n\n  contentPortal: CdkPortal;\n\n  constructor(private vcRef: ViewContainerRef) {}\n\n  ngOnInit() {\n    this.switchView();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.hasOwnProperty(\"loading\")) {\n      this.switchView();\n    }\n  }\n\n  // 現在のローディング状態から適切なTemplatePortalを作成する\n  switchView() {\n    this.contentPortal = new TemplatePortal(this.getTemplate(), this.vcRef);\n  }\n\n  private getTemplate() {\n    if (this.loading) {\n      return this.loadingContentTemplate;\n    }\n    return this.contentTemplate;\n  }\n}"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "CdkPortal",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "を使って、状態に応じたビューの差し替えの実装が簡単にできる",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "TemplatePortal",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "を使って、",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "ng-template",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "から取り出した",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "TemplateRef",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "を",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "CdkPortal",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "に変換できる",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "完成形がこちらです。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://stackblitz.com/edit/angular-ttuxpm"
    }
  ]
}
