{
  "pageId": "de7ff9bc-e847-4322-bc47-d3f686b88db6",
  "lastEditedAt": "2023-06-03T11:23:00.000Z",
  "slug": "ng4-feature-core-update",
  "properties": {
    "title": "[Angular 4.0] core/commonモジュールの変更について",
    "date": "2017-03-09T00:00:00.000Z",
    "tags": ["tech", "Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 4.0新機能シリーズ第4弾です。今回はcoreモジュールとcommonモジュールに入った変更について解説します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "coreモジュールの変更",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "coreモジュールにはDependency Injectionとテンプレートシンタックスに変更が入っています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "OpaqueToken",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の廃止と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "InjectionToken<T>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の導入",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ひとつめはDependency Injectionに関する変更です。 これまでInjectionのキーとして使われていた",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "OpaqueToken",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ですが、4.0ではdeprecatedとなり、5.0で廃止されることになりました。 代わりに、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "InjectionToken",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "というクラスが導入され、今後はこちらを使うことになります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "InjectionToken",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "はInjectする対象の型情報をジェネリックとして持つことができます。 この変更に伴って",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Injector",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "にも変更が入っており、第1引数が",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "InjectionToken",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のときは戻り値の型が推論されるようになっています。 たとえば文字列を注入するときは次のように書きます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "/** これまで **/\n\nconst APP_NAME = new OpaqueToken('appName');\n\n{\n    providers: [{ provider: APP_NAME, useValue: 'My Awesome App'}]\n}\n\nconst appName = injector.get(APP_NAME) as string; // any型なのでキャストが必要\n\n/** これから **/\n\nconst APP_NAME = new InjectionToken<string>('appName');\n\n{\n    providers: [{ provider: APP_NAME, useValue: 'My Awesome App'}]\n}\n\nconst appName = injector.get(APP_NAME); // APP_NAMEから自動的にstring型になる"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "多くの場合、明示的なキャストが不要になり、簡潔なコードを書けるようになるでしょう。 もしユニットテストのモックなどで、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "InjectionToken<T>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と互換性のないものを注入したいときは、逆に明示的なキャストがないとコンパイルエラーになります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "ライフサイクルメソッドのinterface化",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これは一種の破壊的変更になりえるのですが、これまで抽象クラスとして提供されていた",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "OnInit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AfterViewInit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "などが、インターフェースとして提供されるようになります。 公式ドキュメントやほぼすべてのガイドでは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "implements OnInit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "という書き方で解説しているのですが、もし",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "extends OnInit",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と記述している人がいれば4.0からは動かなくなりますので注意してください。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "<template>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "タグに関する仕様変更",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これまでテンプレート中で",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<template>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "タグを使うと",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "TemplateRef",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のインスタンスが生成され、再利用可能なテンプレート部品として使えるようにできました。 しかしその際にAngularは最終的なDOMの出力から",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<template>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "タグを除去してしまいます。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<template>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "タグはHTMLの標準要素であり、Web Componentsの普及や他のライブラリによるタグの利用もあるので、あまり好ましくない挙動でした。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これを解決するために、4.0では新しく",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<ng-template>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "というテンプレートシンタックスを導入しました。 これはこれまでの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<template>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "タグとまったく同じ使い方で、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "TemplateRef",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "への参照を作成するためのタグです。 もちろんこれまでの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<template>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "タグの利用も可能ですが、おそらく5.0アップデート時には完全な切り替えが行われます。 アプリケーション中で",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<template>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "タグを使っているところがあれば、早めに書き直しておきましょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ちなみに、2系と同じ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<template>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "タグの動きを維持する挙動は無効にできます。 コンパイラの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "enableLegacyTemplate",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "オプションが",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "false",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に指定されていると、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<template>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "タグは完全にAngularの干渉を受けなくなります。 JiTコンパイルのときは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "bootstrapModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数の第2引数でコンパイラの設定ができます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "boostrapModule(AppModule, {\n    enableLegacyTemplate: false\n});"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "AoTコンパイルのときは、tsconfig.jsonやAoTPluginなどの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "angularCompilerOptions",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で設定できます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "json",
      "filename": "",
      "text": "{\n    \"angularCompilerOptions\": {\n        \"enableLegacyTemplate\": false\n    },\n    \"compilerOptions\": {\n    }\n}"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Renderer周辺の変更",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "4.0でもっとも大きな変更は、DOMレンダリングの内部機構の完全刷新です。 これまで使われていた",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Renderer",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に代わる",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Renderer2",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "がフルスクラッチで実装され、4.0からはそちらが使われています。 より高速で軽量になっていますが、これまでRendererの深いAPIを使っていた開発者にとっては僅かな修正が必要かもしれません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "RootRenderer",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "クラスは完全に廃止されていますので、代わりに",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "RendererFactory2",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使います。 なお、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Renderer",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "クラスはまだInjectして使用できますが、非推奨になり、内部的には",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Renderer2",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に処理を委譲しています。 今後は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Renderer2",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使うようにしましょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "commonモジュールの新機能",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "NgIf",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の改善以外にも、commonモジュールにはいくつかの新機能が追加されました。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "NgComponentOutlet",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の導入",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ダイアログのような用途で、コンポーネントを動的にテンプレートに追加したいケースで、これまでは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ViewContainer",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "などのAPIを用いていましたが、 4.0から専用の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NgComponentOutlet",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "というディレクティブが追加されて簡単に書けるようになります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "NgComponentOutlet",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NgTemplateOutlet",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と似ていて、次のように使います。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "import { MyDialogComponent } from './my-dialog.component';\n\n@Component({\n    template: `\n    <ng-container *ngComponentOutlet=\"dialogCmpType\"></ng-container>\n    `\n})\nexport class MyCmp {\n    dialogCmpType = MyDialogComponent;\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "注意としては、これまでと同様、動的に追加されるコンポーネントは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NgModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "entryComponents",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に設定するのを忘れないようにしましょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "詳しいAPIについては",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "APIドキュメント",
          "href": "https://github.com/angular/angular/blob/master/modules/%40angular/common/src/directives/ng_component_outlet.ts#L13-L70",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "を参考にしてください。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "titlecase",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "パイプの追加",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これまで",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "uppercase",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "lowercase",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "しか用意されていませんでしたが、単語の先頭だけを大文字にする",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "titlecase",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "パイプが追加されました。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "OpaqueToken",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "から",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "InjectionToken<T>",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "へ",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "<template>",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "から",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "<ng-template>",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "へ",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "NgComponentOutlet",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "で動的なコンポーネント生成",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "titlecase",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "パイプの追加",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "OnInit",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "のインターフェース化",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Renderer",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "のバージョンアップ",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "divider"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 4.0 Features",
          "annotations": {
            "bold": true
          }
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "新しいngIfの使い方",
              "href": "/post/ng4-feature-ngif/",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Metaサービスの使い方",
              "href": "/post/ng4-feature-meta-service/",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "formsモジュールの更新について",
              "href": "/post/ng4-feature-forms-update/",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "core/commonモジュールの変更について",
              "href": "/post/ng4-feature-core-update/",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "router/http/animationsモジュールの変更について",
              "href": "/post/ng4-feature-libs-update/",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
