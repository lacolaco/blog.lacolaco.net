{
  "pageId": "289a7964-b989-4c20-818f-45f429907bd1",
  "lastEditedAt": "2023-12-30T10:09:00.000Z",
  "slug": "async-pipe-initial-null-problem",
  "locale": "ja",
  "properties": {
    "title": "AsyncPipeの初期値null問題と非同期データバインディング",
    "date": "2020-02-18T00:00:00.000Z",
    "tags": ["Angular", "RxJS"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angularの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AsyncPipe",
          "href": "https://angular.io/api/common/AsyncPipe",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " は非同期データをテンプレートバインディングするのに便利な機能だが、実は実装当初からずっと大きな問題を抱えている。それが「初期値null問題」だ。 本稿ではAsyncPipeの初期値null問題とその根本的原因を解説し、この問題を解決するための新しい非同期データバインディングのあり方を論じる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "AsyncPipeの仕組みを理解する",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "一般的なAngularアプリケーションを作る上でいまやAsyncPipeは必ず使われるものと言っても過言ではない。Observable型のデータを購読し、そのスナップショットをデータバインディングするために多用される。 基本的な使われ方は次のような形だ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: \"app-root\",\n  template: `\n    <div *ngIf=\"source$ | async as state\">\n      {{ state.count }}\n    </div>\n  `,\n  styleUrls: [\"./app.component.css\"]\n})\nexport class AppComponent {\n  source$ = interval(1000).pipe(map(i => ({ count: i })));\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "さて、AsyncPipeはどのようにして、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "source$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が流す値をテンプレートにバインディングし、レンダリングさせているのだろうか？ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AsyncPipeの実装",
          "href": "https://github.com/angular/angular/blob/9.0.1/packages/common/src/pipes/async_pipe.ts#L71",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " を見てみよう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "AsyncPipeはPromiseとObservableのどちらでも扱えるように非同期データの抽象化のコードが多いが、本質的な部分が次のコードだ。他のどのPipeとも同じく、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "transform()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドを実装している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "  transform(obj: Observable<any>|Promise<any>|null|undefined): any {\n    if (!this._obj) {\n      if (obj) {\n        this._subscribe(obj);\n      }\n      this._latestReturnedValue = this._latestValue;\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform(obj as any);\n    }\n\n    if (ɵlooseIdentical(this._latestValue, this._latestReturnedValue)) {\n      return this._latestReturnedValue;\n    }\n\n    this._latestReturnedValue = this._latestValue;\n    return WrappedValue.wrap(this._latestValue);\n  }"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "上から順番に処理を見ていこう。最初の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "if (!this._obj)",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は、AsyncPipeに初めてObservableが渡されたときの条件で、つまり初期化処理である。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "this._obj",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " がない かつ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "obj",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " があれば、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "obj",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を購読する。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "obj",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が 最初の例の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "source$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " にあたる。AsyncPipeに渡したObservableはここで ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "subscribe()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " される。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次のif文は 購読中のObservableとは別のObservableが渡されたときで、これは今の購読を disposeして、再購読を始めるようになっている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そして残りのコードで、購読中のObservableから得られた最新の値 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "this._latestValue",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " をreturnしている。returnされた値が、実際にテンプレートのレンダリングに使われる値になる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここからわかることは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AsyncPipeは ",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "transform()",
          "annotations": {
            "bold": true,
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドが呼び出されたときにキャッシュしている ",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "this._latestValue",
          "annotations": {
            "bold": true,
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を返している",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " ということだ。 このことはAsyncPipeの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "_subscribe()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " メソッドと ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "this._updateLatestValue()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " メソッドを見てもわかる。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "_subscribe()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドで購読した非同期データに値が流れてきたら、そのコールバックで ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ChangeDetectorRef",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "markForCheck()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が呼び出される。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "  private _subscribe(obj: Observable<any>|Promise<any>|EventEmitter<any>): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(\n        obj, (value: Object) => this._updateLatestValue(obj, value));\n  }\n  ...\n  private _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.markForCheck();\n    }\n  }"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "つまり、AsyncPipeは次のような仕組みでテンプレートをレンダリングしている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "numbered_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Change DetectionでPipeの ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "transform()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " が呼び出される",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "渡されたObservableの購読を開始する",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "transform()",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " が呼び出された時点の ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "this._latestValue",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " を 返して終了する",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Observableが値を流したら ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "this._latestValue",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " を更新して Change Detectionをトリガーする（1に戻る）",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "テンプレートが最終的に同期的な値しかレンダリングできない以上、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "transform()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は同期的な値を返す必要があり、それは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "transform()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が呼ばれたタイミングでのスナップショットを返すことしかできないのだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここまでをしっかり理解すると、ある疑問が生まれるはずだ。それは、「購読を開始するタイミングの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "transform()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は値を返せないんじゃないか？」ということだ。そしてそれこそがAsyncPipeが抱える最大の課題である「初期値null問題」につながる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "初期値null問題",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "this._latestValue",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "はObservableの購読コールバックで値がセットされるのだから、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "transform()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の呼び出し時点ではまだ一度も値がセットされていない。しかし、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "transform()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "はかならず何かしら値を返さなければならないので、規定の初期値を返すようになっている。 もう一度 AsyncPipeの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "transform()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の冒頭を見てみよう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "    if (!this._obj) {\n      if (obj) {\n        this._subscribe(obj);\n      }\n      this._latestReturnedValue = this._latestValue;\n      return this._latestValue;\n    }"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "最後の2行で使われている ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "this._latestValue",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は一度も値がセットされていないので、このフィールドの初期値が使われることになる。その値が ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "null",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " なのだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "export class AsyncPipe implements OnDestroy, PipeTransform {\n  private _latestValue: any = null;\n  private _latestReturnedValue: any = null;"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "つまり、AsyncPipeは購読したObservableが最初の値を流す前に、必ず一度 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "null",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を返すようにできているのだ。もとのObservableが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Observable<State>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " だったとしても、 AsyncPipeを通すと ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "State | null",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " となってしまう、これを「初期値null問題」と呼んでいる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この問題は深刻そうに思えるが、実は多くのケースで自動的に回避されている。それはAsyncPipeとよく併用される ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "*ngIf",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "*ngFor",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が、AsyncPipeから返される ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "null",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を無視するようになっているからだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次のテンプレートでは、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "source$ | async",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が返した値を NgIfディレクティブが評価して、Truthyならレンダリングされるため、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "null",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のときは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "*ngIf",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の内側に入ることはない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<div *ngIf=\"source$ | async as state\">  {{ state.count }}</div>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "同様に次のテンプレートでは、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "source$ | async",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が返した値を NgForディレクティブが評価して、Falsyなら無視されるため、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "null",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のときは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "*ngFor",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の内側に入ることはない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<div *ngFor=\"let item of source$ | async\">  {{ item }}</div>"
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "ngIf",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " や ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "ngFor",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " のような null安全なディレクティブを通してあれば、初期値null問題がアプリケーションに影響を与えることはない。問題はそうではない場合、つまり、子コンポーネントのInputに直接AsyncPipeで値を渡しているケースだ。 次のようなケースで、子コンポーネントは ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "prop",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " Inputの型を定義してあるはずだが、そこには ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "null",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " が渡される可能性を考慮しなくてはならない。",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "prop",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " がgetterやsetterであった場合、値にアクセスしようとして実行時エラーが発生することは容易に想像できる。",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<child [prop]=\"source$ | async\"></child>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここまでの話で、簡単なベストプラクティスとして言えることはひとつ。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AsyncPipeは常にNgIfやNgForによるnull安全なガードを通して利用すべきである",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "AsyncPipeを置き換える",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここからは後編、上述の課題を抱えたAsyncPipeを置き換えられる新しい非同期データバインディングのあり方を模索する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "なぜAsyncPipeが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "null",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を返すことになったのか、それはPipeが同期的な値を返す必要があるからである。初期値null問題を解決するにはPipeをやめるしかない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そこでディレクティブを使ってみようと思う。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "*ngFor",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のように、Inputとテンプレートを受け取って、ディレクティブの裁量でテンプレートをレンダリングできるアプローチが、AsyncPipeを置き換えるには最適である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そこで筆者が実装したのが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "*rxSubscribe",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ディレクティブだ。実際に動作するサンプルは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "こちら",
          "href": "https://stackblitz.com/edit/github-zg4qep",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "。次のように構造ディレクティブでObservableを購読する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<div *rxSubscribe=\"source$; let state\">  {{ state.count }}</div>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ディレクティブは次のような実装になっている。このディレクティブがおこなうことは、",
          "annotations": {}
        }
      ]
    },
    {
      "type": "numbered_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "rxSubscribe",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " Inputで受け取ったObservableを ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "ngOnInit",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " で購読する。",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Observableが値を流したら、初回はテンプレートをEmbedする（レンダリングする）",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "2回め以降の値が流れてきたら、contextを更新して ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "markForCheck",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " を呼び出す",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/lacolaco/ngivy-rx-subscribe-directive/blob/master/src/app/rx-subscribe.directive.ts",
          "href": "https://github.com/lacolaco/ngivy-rx-subscribe-directive/blob/master/src/app/rx-subscribe.directive.ts",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Directive({\n  selector: \"[rxSubscribe]\"\n})\nexport class RxSubscribeDirective<T> implements OnInit, OnDestroy {\n  constructor(\n    private vcRef: ViewContainerRef,\n    private templateRef: TemplateRef<RxSubscribeFromContext<T>>\n  ) {}\n  @Input(\"rxSubscribe\")\n  source$: Observable<T>;\n\n  ngOnInit() {\n    let viewRef: EmbeddedViewRef<RxSubscribeFromContext<T>>;\n    this.source$.pipe(takeUntil(this.onDestroy$)).subscribe(source => {\n      if (!viewRef) {\n        viewRef = this.vcRef.createEmbeddedView(this.templateRef, {\n          $implicit: source\n        });\n      } else {\n        viewRef.context.$implicit = source;\n        viewRef.markForCheck();\n      }\n    });\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このアプローチであれば、最初に値が流れてくるまではテンプレートは描画されず、値が流れてきたタイミングでだけ再レンダリングをトリガーできる。初期値null問題を解決し、さらに再レンダリングも必要なときだけに絞られるのでCPUにもやさしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ちなみに 冒頭のテンプレートでの、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "let state",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の型は、Angular v9のIvy以降ならきっちりと ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "source$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の型から推論され、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "strictTemplates",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " フラグが有効ならば ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "state",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の使い方を間違えれば AOTコンパイルでエラーになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<div *rxSubscribe=\"source$; let state\">\n  {{ state.foo }}  <!-- stateは `foo` を持たないためAOTコンパイルエラーになる -->\n</div>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "AsyncPipeでは初期値null問題によって常に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "or null",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の推論しかできなかったが、構造ディレクティブのアプローチなら ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Observable<T>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に対して 正確に推論できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ちなみに、この ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "*rxSubscribe",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ディレクティブは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@soundng/rx-subscribe",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " というnpmパッケージで公開している。ぜひ使ってみてほしい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "GitHub ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "https://github.com/soundng/rx-subscribe",
              "href": "https://github.com/soundng/rx-subscribe",
              "annotations": {}
            },
            {
              "type": "text",
              "text": " ",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "NPM ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "https://www.npmjs.com/package/@soundng/rx-subscribe",
              "href": "https://www.npmjs.com/package/@soundng/rx-subscribe",
              "annotations": {}
            },
            {
              "type": "text",
              "text": " ",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Demo ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "https://stackblitz.com/edit/github-zg4qep-kq9pyw?file=src/app/app.component.html",
              "href": "https://stackblitz.com/edit/github-zg4qep-kq9pyw?file=src%2Fapp%2Fapp.component.html",
              "annotations": {}
            },
            {
              "type": "text",
              "text": " ",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "AsyncPipeには初期値null問題がある",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "NgIfやNgForでガードすれば影響はない",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "非同期データを扱うにはPipeの限界がある",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "構造ディレクティブによるアプローチはAsyncPipeの問題を解決できる",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "@soundng/rx-subscribe",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " へのフィードバック歓迎",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
