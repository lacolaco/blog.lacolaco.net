{
  "pageId": "8db2b4c6-9abe-4f39-94f1-e1bf70d145ed",
  "lastEditedAt": "2023-05-21T05:59:00.000Z",
  "slug": "angular-component-style-with-emotion",
  "properties": {
    "title": "Angularコンポーネントのスタイルにemotionを使う",
    "date": "2018-07-28T00:00:00.000Z",
    "tags": ["tech", "Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "追記",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "型安全に CSS のオブジェクトを書きたいというだけなら NgStyle と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "csstype",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使うだけでもよさそうだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/frenic/csstype",
          "href": "https://github.com/frenic/csstype",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/l/lacolaco/20180728/20180728090201.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "emotion を使うことによる利点は、",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "CSS クラスにシリアライズされるので、テンプレート中で評価対象が文字列となり、Change Detection のパフォーマンス上で有利",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "くらいなものか。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "divider"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今日の境界遊び。CSS in JS を Angular でやりたかった。 常識のある方は真似しないほうがよい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://cdn-ak.f.st-hatena.com/images/fotolife/l/lacolaco/20180728/20180728002419.png",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今回使ったのは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "https://emotion.sh/",
          "href": "https://emotion.sh/",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " .",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular で時々困るのは styles の中にデータバインディングを置きたいケース。 たとえば、フォームの入力に応じて動的にフォントサイズを変えるようなケースを考える。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "https://media.giphy.com/media/3IFE4ooosgtRPJbih9/giphy.gif",
      "caption": ""
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "emotion の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "css",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数は、与えた CSS スタイルシートをシリアライズしてユニークな CSS クラス名に変換してくれる。 Angular のコンポーネントは HTML 要素と 1:1 に対応するので、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "[className]",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プロパティにバインディングすれば emotion で生成したクラスを適用できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "helloClassName$",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プロパティは、フォントサイズに応じた CSS スタイルシートを CSS クラス名に変換した Observable である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "helloClassName$ = this.form.valueChanges.pipe(\n  map(({ fontSize }) => css({ fontSize }))\n);"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これをテンプレート中で次のように使えば、emotion によって動的に生成されたクラスを任意の要素に適用できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<hello [className]=\"helloClassName$ | async\" [name]=\"name\"></hello>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ところで、Angular の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "CommonModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " (@angular/common) は、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NgClass",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NgStyle",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という 2 つのディレクティブを提供している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://angular.io/api/common/NgStyle",
          "href": "https://angular.io/api/common/NgStyle",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://angular.io/api/common/NgClass",
          "href": "https://angular.io/api/common/NgClass",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "className",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使わずとも、次のように書くこともできる。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NgClass",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は文字列以外にも文字列の配列やオブジェクトを受け取れる以外には、本質的に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "className",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と何も違いはない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<hello [ngClass]=\"helloClassName$ | async\" [name]=\"name\"></hello>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "NgStyle",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使う場合は、emotion ではなく生のスタイルシートっぽいオブジェクトを渡すことになる。 本来 Angular だけで CSS-in-JS やろうとするとこの API になるわけだが、emotion だと",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "css",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数の引数オブジェクトに TypeScript 型定義もあるし嬉しいのでは？という目論見がある。 あと emotion なら同じスタイルなら同じクラスになり、キャッシュの仕組みが強いっぽいので、パフォーマンス良くなるかもしれない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://emotion.sh/docs/typescript",
          "href": "https://emotion.sh/docs/typescript",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "helloStyle$ = this.form.valueChanges.pipe( map(({ fontSize }) => ({ fontSize:\n`${fontSize}px` })) );\n\n<hello [ngStyle]=\"helloStyle$ | async\" [name]=\"name\"></hello>"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "すべて同じ動きとなるので好みで選べばよいが、個人的には React との対称性を考えて",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "[className]",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "でよいのでは？と感じる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "実際に動くサンプルは次の通り。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://stackblitz.com/edit/angular-emotion?embed=1&file=src/app/app.component.ts"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "React の場合、className は HTML 要素に対応するコンポーネントにしか使えないが、Angular の場合すべてのコンポーネントは HTML 要素に対応付けられるので、テンプレート中で親から className プロパティにバインディングするだけで子コンポーネント側でなにもしなくてもよいのは、比較的楽だなと思った。 しかし emotion で一番やりたい styled-component が React しか使えないので、これをどうにかしてみたい。",
          "annotations": {}
        }
      ]
    }
  ]
}
