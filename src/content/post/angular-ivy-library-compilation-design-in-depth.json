{
  "pageId": "6de3a8dd-12c3-4893-8a53-0fd4e5789e65",
  "lastEditedAt": "2023-12-24T00:38:00.000Z",
  "slug": "angular-ivy-library-compilation-design-in-depth",
  "locale": "ja",
  "properties": {
    "title": "Angular Ivyライブラリコンパイルを理解する",
    "date": "2021-02-24T00:00:00.000Z",
    "tags": ["Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この記事では Angular v11.1 から可能になった Angular ライブラリの Ivy コンパイルの方法と、その詳細について解説する。 想定する読者は、Angular のサードパーティライブラリを開発している人や、単に Angular の内部構造に興味がある人である。 Angular アプリケーションを開発する上では、この記事で解説する内容を知っていなくても何の問題もない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この記事の内容は Angular チームによって書かれた Design Doc をベースに、現状の実装での検証を加えて書いている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Ivy Library Compilation - Conceptual Design Doc",
          "href": "https://docs.google.com/document/d/148eXrCST6TM7Uo90KxaBrMbOkwJbYrQSQgRaGMK5WRc/edit#",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "ライブラリの Ivy コンパイル方法",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular CLI などを使って Angular ライブラリを開発するとき、現在はプロダクションビルド時に Ivy は無効化されている。 おそらく ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "src/tsconfig.lib.prod.json",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のようなファイルに次のように設定されているだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "json",
      "filename": "",
      "text": "{\n  \"angularCompilerOptions\": {\n    \"enableIvy\": false\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この設定でコンパイルされ NPM に公開された Angular ライブラリは、利用するアプリケーションが Ivy を有効にしていなくても使える互換性を保っている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular v11.1 からは実験的に、Ivy 未対応のアプリケーションへの互換性を捨て、Ivy 対応アプリケーションに最適化したコンパイルを行うことができる。 NPM に公開するライブラリを Ivy コンパイルするには、次のように設定する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "json",
      "filename": "",
      "text": "{\n  \"angularCompilerOptions\": {\n    \"enableIvy\": true,\n    \"compilationMode\": \"partial\"\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "\"compilationMode\": \"partial\"",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が重要なポイントであり、これが意味するところをこの記事の後半で解説する。 当然だがこの設定でコンパイルしたライブラリは Ivy 対応したアプリケーションでしか利用できないので、現在はまだ非推奨である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ちなみに、Angular CLI や Nrwl/Nx のような monorepo のローカルでだけ使われるライブラリは単純に ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "enableIvy: true",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " だけでよい。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "\"compilationMode\": \"partial\"",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が必要になるのはあくまでも NPM に公開されるものだけである。 この違いについても後半で解説する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "json",
      "filename": "",
      "text": "{\n  \"angularCompilerOptions\": {\n    \"enableIvy\": true\n  }\n}"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "用語の整理",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このあとの説明を簡潔にするために、はじめに用語の整理をしておく。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "table",
      "rows": [
        [
          [
            {
              "type": "text",
              "text": "用語",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "意味",
              "annotations": {}
            }
          ]
        ],
        [
          [
            {
              "type": "text",
              "text": "Angular デコレータ",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "@Component",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "、 ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "@Directive",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "、 ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "@Injectable",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "などの Angular が定義するデコレータ",
              "annotations": {}
            }
          ]
        ],
        [
          [
            {
              "type": "text",
              "text": "コンパイラ",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "Angular のコンパイラは Angular デコレータを解析して実行コードを生成するツール",
              "annotations": {}
            }
          ]
        ],
        [
          [
            {
              "type": "text",
              "text": "ngc",
              "annotations": {
                "code": true
              }
            }
          ],
          [
            {
              "type": "text",
              "text": "Angular コンパイラの 実行可能な CLI",
              "annotations": {}
            }
          ]
        ],
        [
          [
            {
              "type": "text",
              "text": "Ivy コンパイラ",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "Angular v9 で導入されたコンパイラ",
              "annotations": {}
            }
          ]
        ],
        [
          [
            {
              "type": "text",
              "text": "View Engine (VE)コンパイラ",
              "annotations": {}
            }
          ],
          [
            {
              "type": "text",
              "text": "Angular v8 までデフォルトで使われていた現在は非推奨のコンパイラ",
              "annotations": {}
            }
          ]
        ]
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "アプリケーションの Ivy コンパイル",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ライブラリの話に入る前に、すでに Ivy がデフォルトで有効になっているアプリケーションのコンパイルから見ていこう。 アプリケーション中の Angular デコレータはコンパイラによって解析され、抽出されたメタデータを元に実行コードを生成する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "簡単なコンポーネントのコンパイルの例を見てみよう。次のようなコンポーネントがあるとする。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'some-comp',\n  template: `<div> Hello! </div>`\n})\nexport class SomeComponent {}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このコードを Ivy コンパイルすると、次のような JavaScript が出力される。 ポイントは次の 2 点である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "デコレータは JavaScript に残らない",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネントクラスの static フィールドに生成コードが挿入される",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "export class SomeComponent {}\n\nSomeComponent.ɵcmp = ɵɵdefineComponent({\n  selectors: [['some-comp']],\n  template: (rf) => {\n    if (rf & 1) {\n      ɵɵelementStart('div');\n      ɵɵtext(' Hello! ');\n      ɵɵelementEnd();\n    }\n  },\n});"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Ivy コンパイラはデコレータに含まれるメタデータから ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Definition",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": " を作成するコードを生成する。 文字列だった HTML テンプレートは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "テンプレート関数",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "として実行可能なコードになる。 テンプレート関数の中で利用される",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ɵɵelementStart",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ɵɵtext",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "テンプレートインストラクション",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " と呼ばれ、具体的な DOM API の呼び出しやデータバインディングの更新処理などを隠蔽している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "/images/angular-ivy-library-compilation-design-in-depth/3c6255ea-b6c7-4055-8126-638d2819f0c3/76a73cc6-eae0-4193-9241-8a9617ac614e.png",
      "caption": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このようなアプリケーションのコンパイルは、内部的には 2 つのステップに分かれている。解析ステップとコード生成ステップだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "解析ステップ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コンパイルの解析ステップでは、アプリケーション全体のデコレータから得られたメタデータを統合し、コンポーネント/ディレクティブ間の依存関係を洗い出す。 このとき重要になるのが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@NgModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " である。テンプレートに含まれる未知の HTML タグや属性に対応する参照先を決定するために使われる。 解析ステップが終わると、コンパイラは次の情報を得る。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "どのコンポーネントがどのディレクティブ/コンポーネントに依存しているのか",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "各コンポーネント/ディレクティブをインスタンス化するために必要な依存性はなにか",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "コード生成ステップ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コード生成ステップでは、解析ステップで得られた情報を元に Angular デコレータそれぞれに対応するコードを生成する。 コード生成ステップで生成されるコードには",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Locality",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ランタイム互換性",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "の 2 つが必要とされる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Locality",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Locality は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "self-contained",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " とも表現される。あるコンポーネントのコンパイル時に必要な参照がすべてそのコンポーネントクラス自身に含められているということである。 これにより差分ビルドが効率的になる。 理解しやすくするために、Locality がなかった Ivy 以前の View Engine 時代の課題を振り返ってみよう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "VE コンパイラは生成コードを元のファイルから独立した ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "*.ngfactory.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " というファイルとして生成していた。 Angular は実行時にこの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "*.ngfactory.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を実行し、その内部の生成コードが元のコンポーネントクラスを参照する。 このアプローチは、コンポーネントが別のコンポーネントに依存しているときに問題になる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "例えばコンポーネント ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<app-parent>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " がテンプレート中でコンポーネント ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<app-child>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を呼び出しているとき、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "parent.component.ts",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " から ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "child.component.ts",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " へ、JavaScript のモジュールとしての参照はない。 この親子関係が表れるのは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "parent.component.ngfactory.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "child.component.ngfactory.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の間だけである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "直接のコンパイル結果である ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "parent.component.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "child.component.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "child.component.ngfactory.js",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "どちらも参照していないため、いつ再コンパイルされる必要があるのか決定できない。 よって、ViewEngine では差分ビルド時に毎回アプリケーション全体をコンパイルし直す必要があった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "/images/angular-ivy-library-compilation-design-in-depth/3c6255ea-b6c7-4055-8126-638d2819f0c3/072288c8-ef3c-427f-aa88-f5ad18b06d0a.png",
      "caption": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この問題を解決するために、Ivy コンパイラは生成コードをそのクラスの static フィールドとして生成する。 生成コードには、そのテンプレート内で参照されているディレクティブのクラスも列挙される。 これによって、そのファイルが変更されたときにどのファイルへ影響するのかを簡単に決定できるようになった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次のように Locality を備えたコード生成であれば、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ParentComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の再コンパイルが必要になるのはそれ自身か",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ChildComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が変更された時だけで十分なことがわかる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "// parent.component.js\nimport { ChildComponent } from './child.component';\n\nParentComponent.ɵcmp = ɵɵdefineComponent({\n    ...\n    template: function ParentComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            ɵɵelement(2, \"app-child\");\n        }\n    },\n    // テンプレートから依存されているディレクティブ\n    directives: [ChildComponent]\n});"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "ランタイム互換性",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コード生成で重要なもうひとつの要素がランタイム互換性である。 この要素はアプリケーションのコンパイルでは問題にならないが、ライブラリのコンパイルのときに非常に重要になる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "アプリケーションではコンパイルはアプリケーションのビルドの中で同時に行われるため、基本的にコンパイラのバージョンと Angular のランタイムのバージョンは一致する。 だがライブラリはそうではない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "NPM に公開されるライブラリでは、ライブラリをコンパイルした Angular のバージョンと、そのライブラリを使うアプリケーションが実行時に利用する Angular のバージョンが一致しないことを前提にしなければならない。 そこで特に問題になるのは、生成コード内で呼び出される Angular API の互換性である。 コンパイル時のバージョンでは存在した API が、ランタイムの Angular には存在しなかったりシグネチャが変わっていたりする可能性がある。 したがって、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "コード生成のルールはそれを実行するランタイムの Angular バージョンで決定されなければならない",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "monorepo 内でローカルに利用されるライブラリが以前から Ivy コンパイル可能だったのは、それが monorepo である限りライブラリとアプリケーションが同じ Angular バージョンであることが確実だからである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "ライブラリのコンパイル",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここからが本題だ。まずは v11 現在の推奨設定である ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "enableIvy: false",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " でのライブラリのコンパイルについて見てみよう。 Ivy を無効化したライブラリのコンパイルは、解析ステップで収集した",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "メタデータをインライン化",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "するだけである。 次のように、static フィールドの中にそのクラスに付与されていた Angular デコレータのメタデータが埋め込まれている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "/images/angular-ivy-library-compilation-design-in-depth/3c6255ea-b6c7-4055-8126-638d2819f0c3/166eefcb-12a2-4bcc-a274-7aa4fa7f0d2f.png",
      "caption": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ライブラリコンパイルは NPM に公開可能な JavaScript の形にメタデータを変換する役割を果たしているが、 これはまだメタデータの状態であり、このままアプリケーションから読み込まれてもコンポーネントとして実行はできない。 このメタデータを元に、もう一度コンパイルが必要である。それを行うのが ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngcc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Angular Compatibility Compiler",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "ngcc",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "アプリケーション側のコンパイラが Ivy か VE かがわからない以上、互換性を保つためにはそもそもライブラリコードのコンパイルをアプリケーション側で行ってもらうしかない。 これが",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngcc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "がアプリケーションビルド時に実行される目的だ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ngcc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "のコンパイル結果はライブラリを直接コンパイルしたものと同じになる。 違うのは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が TypeScript 内のデコレータをメタデータとしてコンパイルするのに対して、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngcc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は JavaScript 内の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": ".decorators",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "をメタデータとしてコンパイルすることだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "/images/angular-ivy-library-compilation-design-in-depth/3c6255ea-b6c7-4055-8126-638d2819f0c3/5f281063-edff-4c75-8017-0690c96cf7cf.png",
      "caption": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "互換性を保った状態でライブラリを NPM に公開可能にする目的は果たした",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngcc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "だったが、頻発するコンパイルは開発者体験を損ねることにもなった。 ライブラリをインストールするたびに何度も",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngcc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が走りストレスを感じた人も多いだろう。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngcc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は NPM からインストールした",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "node_modules",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "内のライブラリコードに対して上書きしてコンパイルを行うため、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "npm install",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " コマンドなどで",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "node_modules",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の中身が変更されたら再コンパイルしなければならない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "だがもともと",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngcc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "はアプリケーションの View Engine サポートが廃止されるまでの過渡期のアプローチである。 このあと解説する Ivy ライブラリコンパイラは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngcc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で明らかになった課題を克服した、Ivy ネイティブな新しいライブラリコンパイルの仕組みである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Ivy ライブラリコンパイル",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ngcc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の最大の課題はコンパイルをアプリケーション側で行う実行コストだった。 もし",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngcc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "が十分に高速であれば、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "node_modules",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の中にコンパイル結果を永続化しなくても、アプリケーションのコンパイル時に Just-in-Time でライブラリをコンパイルすることもできただろう。 実行コストが高いから回数を減らしたいし、結果を保存しておきたくなるのだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "逆に、ライブラリの公開前にコンパイルを終わらせてしまうと、アプリケーションのビルドは速くなるがランタイム互換性を失ってしまう。 コード生成ステップはどうしてもアプリケーションの Angular バージョンで行われる必要がある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "こうして、ライブラリインストール後に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "コード生成ステップだけを高速に実行できる仕組み",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "、そのために必要になる",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NPM 公開前に解析ステップを完了する仕組み",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "のセットが Ivy ライブラリコンパイルのコンセプトになった。前者の仕組みをライブラリの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "リンク (Link)",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " と呼び、後者の仕組みを",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Link-Time Optimization (LTO)コンパイル",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "と呼ぶ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "LTO コンパイル (公開前コンパイル)",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "NPM に公開する前に行う LTO コンパイルは、コンパイル全体の解析ステップだけを完了させ、その結果を JavaScript に埋め込む仕組みである。 冒頭で触れたとおり、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "\"compilationMode\": \"partial\"",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "という設定があるとき、コンパイラはライブラリの LTO コンパイルを行う。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "json",
      "filename": "",
      "text": "{\n  \"angularCompilerOptions\": {\n    \"enableIvy\": true,\n    \"compilationMode\": \"partial\"\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コンパイル後の JavaScript には次のようなコードが生成されている。 普通のコンパイル結果と同じように見えるが、注目すべきは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "テンプレートが文字列のまま残されている",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "ことと、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Locality を備えている",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "ことだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "/images/angular-ivy-library-compilation-design-in-depth/3c6255ea-b6c7-4055-8126-638d2819f0c3/1ab52bbd-9b1b-4c3a-a5f3-83d480001027.png",
      "caption": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "解析ステップにより決定された情報を ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Declaration",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": " という形でインライン化する。 ここには依存しているディレクティブが列挙されており、そのファイルだけの情報でコード生成ステップを実行できる Locality を備えている。 そしてリンクされるまでテンプレート関数のコード生成を先送りすることで、ライブラリはランタイム互換性を担保できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、LTO コンパイルを行った Angular バージョンが添えられているのもポイントだ。 同じテンプレートであっても、それが書かれたバージョンと実行するバージョンの組み合わせによってリンク時に最適化できる余地を残している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "ライブラリのリンク",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "LTO コンパイルされたライブラリをインストールしたアプリケーションは、ビルド時にライブラリのリンクを Just-in-Time で行う。 リンクを行う",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Linker",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "は LTO コンパイルで生成された Declaration を元にコード生成ステップを実行して、アプリケーションから呼び出し可能な Definition へ置き換える。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "url": "/images/angular-ivy-library-compilation-design-in-depth/3c6255ea-b6c7-4055-8126-638d2819f0c3/73005a77-b6c1-42b7-b0ec-47899baf1831.png",
      "caption": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "解析ステップが必要だった",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngcc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と違い、リンク処理は LTO コンパイルの Locality によりファイルごとに独立して実行できるため、webpack のようなモジュール解決の中でプラグインとして機能できるようになった。Angular CLI によるビルドでは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AngularLinker",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という Babel プラグインとして実装されている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "まとめ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "新しい Ivy ライブラリコンパイルを簡単にまとめると、次のように説明できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "ライブラリのコンパイルを NPM 公開前と後の 2 つに分離する",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "ひとつは NPM 公開前にデコレータの解析を終わらせる ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "LTO コンパイル",
              "annotations": {
                "bold": true
              }
            },
            {
              "type": "text",
              "text": "処理",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "もうひとつはアプリケーションビルド時にコード生成を行い、ライブラリのコンパイルを完了させる",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "リンク",
              "annotations": {
                "bold": true
              }
            },
            {
              "type": "text",
              "text": "処理",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この記事を読むことで、コンパイルにおけるアプリケーションとライブラリの違い、そして現在使われている",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ngcc",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の課題を踏まえた上で、新しく導入される Ivy ライブラリコンパイルがどのような目的で設計されたのかを読者が理解できればと思う。",
          "annotations": {}
        }
      ]
    }
  ]
}
