{
  "pageId": "4a9df5fd-86fa-43de-838c-f962af587ebe",
  "lastEditedAt": "2023-09-06T08:41:00.000Z",
  "slug": "angular-signal-as-a-dependency",
  "properties": {
    "title": "Angular: Signal as a Dependency（依存オブジェクトのシグナル化）",
    "date": "2023-09-06T07:30:00.000Z",
    "tags": ["Angular", "Signals"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "最近思いついて、妙案ではないかと感じているもの。まだはっきり断言はできないが、もし興味を持った読者がいたら試してみて感想や意見をもらいたい。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "divider"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angularアプリケーションにおいて、あるサービスクラスが別のサービスクラスに依存することは多い。たとえば、あるコンポーネントのUIの状態が、ユーザーの認証状態に依存するというとき、これまでは次のようにクラスが記述されることが多かった。つまり、あるサービスが保持する状態にアクセスするために、そのサービスのインスタンスへの依存を宣言する（ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "inject(UserAuthState)",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ）ということである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export type UserAuth = { permissions: string[] };\n\n// ユーザーの認証状態を管理するrootスコープのサービス\n@Injectable({ providedIn: 'root' })\nexport class UserAuthState {\n  $currentUser = signal<UserAuth | null>(null);\n}\n\n// Appコンポーネントの状態を管理するコンポーネントスコープのサービス\n@Injectable()\nexport class AppState {\n  userAuth = inject(UserAuthState);\n\n  $isAdmin = computed(() =>\n    this.userAuth.$currentUser()?.permissions?.includes('ADMIN')\n  );\n}\n\n@Component({\n  selector: 'my-app',\n  standalone: true,\n  providers: [AppState],\n  template: `\n    <button [disabled]=\"!state.$isAdmin()\">Admin Only</button>\n  `,\n})\nexport class App {\n  state = inject(AppState);\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここで考えなければならないのは、このシステムにおいて、真に依存関係があるのは状態のレベルであって、クラスのレベルではない。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " クラスが  ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UserAuthState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " クラスに依存しているのはその中身の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "$currentUser",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " にアクセスするためで、クラスそのものには興味がない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そのことがよく現れるのはこの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "App",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " コンポーネントのテストを書こうとしたときで、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "$isAdmin",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " がtrueになるようなテストケースを書くためにまず思いつくのは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UserAuthState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " クラスのインスタンスを差し替えることだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "// テストコードは @testing-library/angular を使ったコードで示す。\n// 1. UserAuthState のインスタンスを差し替える\nawait render(App, {\n  providers: [\n    {\n      provide: UserAuthState,\n      useValue: {\n        $currentUser: signal({ permissions: ['ADMIN'] }),\n      },\n    },\n  ],\n});"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "クラスそのものに関心がないからこそ、関心のあるフィールドだけを持ったモックオブジェクトを作成することになる。また、特に好ましくないのは、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "App",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " コンポーネントが直接依存しているのは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " サービスなのに、テストケースのために間接的な依存である ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UserAuthState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を差し替えていることだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "AppState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を差し替えるにしても、同様にインスタンスの実態はモックオブジェクトにならざるを得ない。なぜかというと ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " もAngularのInjectorによるインスタンス化を前提としているからだ。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UserAuthState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の注入が必要なので、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "new AppState()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " はできない。やるにしてもInjection Contextのセットアップが必要になり、結局 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UserAuthState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が必要になる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "// 2. AppState のインスタンスを差し替える\nawait render(App, {\n  componentProviders: [\n    {\n      provide: AppState,\n      useValue: {\n        $isAdmin: signal(true),\n      },\n    },\n  ],\n});"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "つまりこのアプローチでは、本物の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を使おうとすれば",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UserAuthState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のモックが必要になり、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UserAuthState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " を関心から外すには 本物の ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は使えない、ということになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "AppState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のようなコンポーネントスコープのサービスは、コンポーネントと協調して動作しなければ意味がない。そういう意味で、この2択はどちらも選びたくないものだった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "Signal-as-a-Dependency",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そこで思いついたのは、依存関係が状態のレベルなら、それをそのまま表現してみてはどうか、ということだ。クラスからクラスに依存するのではなく、クラスが必要とする外部の状態に直接依存する。これは、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Signal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 型のオブジェクト（シグナル）をコンストラクタ引数で受け取る形で表現できる。ただのオブジェクトではなくSignalなので、外部での状態変化に反応して ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "$isAdmin",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の値は追従できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export class AppState {\n  constructor(readonly $currentUser: Signal<UserAuth | null>) {}\n\n  $isAdmin = computed(() =>\n    this.$currentUser()?.permissions?.includes('ADMIN')\n  );\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "もちろん、このクラスのインスタンス化は、AngularのDependency Injectionでそのまま解決はできない。このクラスをどのようにインスタンス化すればよいかは、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " クラスのプロバイダー関数で教える必要がある。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "provideAppState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数を作成し、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "useFactory",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " でファクトリー関数を定義する。ここではプロバイダー関数に引数があればそれをそのまま利用し、なければDependency Injectionで必要なオブジェクトを解決して ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "new",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "// プロバイダー定義を返す関数\nexport function provideAppState(override?: AppState) {\n  return [\n    {\n      provide: AppState,\n      useFactory: () => {\n        if (override) return override;\n        const userAuth = inject(UserAuthState);\n        return new AppState(userAuth.$currentUser);\n      },\n    },\n  ];\n}\n\n@Component({\n  selector: 'my-app',\n  standalone: true,\n  imports: [CommonModule],\n  // コンポーネントのプロバイダー宣言で呼び出す\n  providers: [provideAppState()],\n  template: `\n    <button [disabled]=\"!state.$isAdmin()\">Admin Only</button>\n  `,\n})\nexport class App {\n  state = inject(AppState);\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "一見冗長だが、このプロバイダー関数を今後書き直すのは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のコンストラクタ引数が増えたときだけだし、このプロバイダー関数はテストでなかなか便利に使える。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "新しい ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "provideAppState()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数により、ユーザーの認証状態を変更するテストコードは次のようになる。  ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UserAuthState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " クラスへの依存をやめたことで、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "new AppState(user)",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の形でインスタンス化できるようになった。このインスタンス化にDependency Injectionは一切関わっていない。また、そのインスタンスをコンポーネントから参照させるために使うのは、アプリケーションコードでも使ったのと同じ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "provideAppState()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数である。オプショナル引数を受け付けるようにしておくことで、同じプロバイダー定義を再利用できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "// AppState のインスタンスを差し替える\nconst state = new AppState(signal({ permissions: ['ADMIN'] }));\nawait render(App, {\n  componentProviders: [provideAppState(state)],\n});"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このアプローチであれば、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "本物を使ってテストする",
          "href": "https://twitter.com/t_wada/status/1216953597637713921",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ことに以前よりも近づいているだろう。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "App",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " コンポーネントが直接依存していない ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "UserAuthState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " についての関心は漏れ出てこない。それは自身のインスタンス化についての ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AppState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の責任にとどまる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ちなみに、これと同じことは Signal が登場する以前でも、Observableを使って実現できた。しかし外部ライブラリが必要なObservableとフレームワークビルトインのSignalでは、アプリケーションにおけるプリミティブ具合がまるで違う。また、Observableは本質的に状態管理の道具ではなく（「現在の値」という概念がない）、常に非同期という属性と不可分であり、それが状態の管理を複雑にするが、Signalは通知機能がついた同期的な値であってその点でも簡単になる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コンポーネントに近いスコープのサービスクラスは、このようなアプローチを試してみるとコンポーネントと一緒に統合テストが書きやすくなる。モックオブジェクトを作るニーズが減り、テストコードの見通しもよくなる効果を見込んでいる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
