{
  "pageId": "b423a3ed-d0c9-4e59-9e12-35e08c72bc64",
  "lastEditedAt": "2023-06-03T11:23:00.000Z",
  "slug": "forget-compile-in-angular-2",
  "properties": {
    "title": "Forget $compile in Angular 2",
    "date": "2016-10-02T00:00:00.000Z",
    "tags": ["tech", "Angular", "AngularJS"]
  },
  "content": [
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "TL;DR",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Forget about ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "$compile",
              "annotations": {
                "code": true
              }
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Use ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "innerHTML",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": " and DOM APIs",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "$compile",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " in Angular 2",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "I wrote an ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "article",
          "href": "http://blog.lacolaco.net/post/dynamic-component-creation-in-angular-2/",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " that explain “how to load a HTML template with using dynamic component creation.”",
          "annotations": {}
        }
      ]
    },
    {
      "type": "quote",
      "text": [
        {
          "type": "text",
          "text": "Since Angular 2, $compile was dropped. There are no ways to insert HTML fragments into the component view except using innerHTML. But if we could create a component and load it…? Yes, we can do it! This post will explain about dynamic HTML projection in Angular 2 with dynamic component creation.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "How did I ?",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Before ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@NgModule",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " introduced, I used ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ViewContainerRef",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " and ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "RuntimeCompiler",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " with a ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "dynamic component factory.",
          "annotations": {
            "bold": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Dynamic component factory is a just function that calls ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Component()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " decorator function to ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "create decorated class object",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " dynamically.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "  private createDynamicComponent(selector, template) {\n    const metadata = new ComponentMetadata({\n      selector,\n      template,\n    });\n\n    const cmpClass = class _ { };\n    return Component(metadata)(cmpClass);\n  }"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "And then, I passed the class to ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "RuntimeCompiler",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " and get ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ComponentFactory",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ".",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "this.compiler\n  .compileComponentAsync(this.createDynamicComponent(selector, template))\n  .then(factory => {\n    this.vcRef.clear();\n    this.vcRef.createComponent(factory, 0, injector);\n  });"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "After ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NgModule",
          "annotations": {
            "code": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "In Angular 2.0.0-rc.6, many APIs including ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Compiler#compileComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " were removed as deprecated API. Now, every component is belonging to its NgModules as declarations, and every compilation starts on the module.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Important thing: NgModules are compilation context.",
          "annotations": {
            "bold": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "That means I no longer be able to compile components separately because any compilations needs a module.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Of course, then I had an idea; ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "dynamic component compilation with dynamic module creation.",
          "annotations": {
            "bold": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "If you are interested in the idea and my challenge, see this code.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/laco0416/angular2-component-outlet/blob/master/src/component-outlet.ts#L70-L99",
          "href": "https://github.com/laco0416/angular2-component-outlet/blob/master/src/component-outlet.ts#L70-L99",
          "annotations": {}
        },
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "I tried that and it seems succeeded, but it has a big problem: ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "AoT",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": ".",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "RuntimeCompiler is dead",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Ahead of Time compilation",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " is a powerful feature of Angular 2 to gain drastic performance improvement. It allows us to compile templates at the build time and reduce dependency on ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@angular/compiler",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " package. It significantly affects to app bundle size if we use ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "tree-shaking.",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " why? Because then our app doesn’t have ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "RuntimeCompiler",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ". As all compilation finished in offline, a compiler is not needed in runtime.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "AoT compilation brings many benefits to us:",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Small payload bundle",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Fast bootstrapping",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Template error detection",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "So, I chose AoT and threw away ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "$compile",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ".",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Use ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "innerHTML",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " and DOM APIs",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Instead of ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "$compile",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": ", I decided to use ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "innerHTML",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " and DOM APIs to implement something like ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "directive",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " or Custom Elements.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Most of our directives may be reproduced with native DOM. For example, we can create ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "pseudo-routerLink",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": " in a dynamic HTML.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "It’s very grunt code, but works well. We should go on the right way of Angular and Web standards.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Summary",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 2 is stable now. We should throw away tricky ways. Keep our applications AoT-friendly and optimizable. Follow the right Angular way.",
          "annotations": {}
        }
      ]
    }
  ]
}
