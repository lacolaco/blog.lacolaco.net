{
  "pageId": "6d1b50f2-cb24-42fb-94d8-7a1fc04688b6",
  "lastEditedAt": "2024-07-10T12:15:00.000Z",
  "slug": "cloudflare-image-transform-for-image-optimization",
  "locale": "ja",
  "properties": {
    "title": "Cloudflare Image Transformationで画像最適化した",
    "date": "2024-06-23T00:52:00.000Z",
    "category": "Tech",
    "tags": ["Cloudflare", "Blog Dev", "Astro"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このブログで表示する画像の最適化について、以前にAstroの組み込み機能を使った記事を書いた。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://blog.lacolaco.net/posts/8892acbcdb0e/"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今回、Astroの画像最適化機能を使うのを完全にやめて、CloudflareのImage Transformationを使うことにした。背景にはAstroのビルド時間の肥大化がある。SSRではなく静的サイトとしてビルドしている都合上、すべての記事のすべての画像をビルド時に変換することになる。そのせいでブログのデプロイ時間が数分かかるようになってしまい、CI/CDが詰まるようになった。せっかくCloudflare Pagesのプレビューデプロイをしているのにプッシュから数分待たないといけないのは体験が悪すぎるので、この機能を使うのをやめた。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "つまり画像最適化をビルド時ではなくオンデマンドでやるようにすればいいのだが、すでにホスティングにCloudflare Pagesを使っているのでそのままCloudflare Imagesを使うことにした。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://developers.cloudflare.com/images/"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "画像はAstroの静的ファイルとしてCloudflare Pagesにアップロードするのが楽だから、追加で画像ストレージにアップロードするのは面倒だった。なので今回はストレージなしで画像変換プロキシとしてだけ使えるImage Transformation機能を使うことにした。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://developers.cloudflare.com/images/transform-images/"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "いろいろ試行錯誤してみたが、Cloudflare PagesのFunctionでは自分自身でホストしている静的ファイルに対して Transform via Worker の機能は使えないようだった（そう書いてあったわけではないので方法を見つけられなかっただけかもしれない）。Transform via URLのほうは問題なく動いたので、そちらで実装している。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "なんやかんや試していったん出来上がった形がこの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Image",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " コンポーネントである。現状では画像フォーマットの最適化と横幅によるリサイズだけを行っている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "https://github.com/lacolaco/blog.lacolaco.net/blob/main/src/components/content/Image.astro",
          "href": "https://github.com/lacolaco/blog.lacolaco.net/blob/main/src/components/content/Image.astro",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "まず、CDNによる画像変換はキャッシュさせることが前提になるので、ローカルや未公開時点での画像を食わせてはいけない。そもそもプレビュー環境にはCloudflare Accessで保護をかけているので変換サーバーからアクセスできない。そういうことで本番環境でだけImage TransformationのURLに向けている。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "env.PRODUCTION",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は自分で追加した環境変数で、ビルド自体は本番相当でもプレビュー環境用の場合は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "false",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "になる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "function imageLoader(config: { src: string; width: number }): string {\n  const { src, width } = config;\n  if (!env.PRODUCTION) {\n    return src;\n  }\n\n  const params = ['format=auto'];\n  if (width) {\n    params.push(`w=${width}`);\n  }\n\n  return `https://blog.lacolaco.net/cdn-cgi/image/${params.join(',')}/${src}`;\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "あとはこのURLを",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "img",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "タグの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "src",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に指定するだけだが、せっかくなのでレスポンシブに適切なサイズの画像をダウンロードするように",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "srcset",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を指定した。また、画像ファイルはビルド時に存在するので、元画像の縦横のサイズだけは取得して",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "width",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "属性と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "height",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "属性を設定した。これにより縦横比が確定し、レスポンシブであっても横幅を基準にして高さが決まるのでレイアウトシフトが起こらない。Astro（Vite）の環境で画像ファイルをモジュールとしてインポートするとサイズが手に入るのは非常に便利だ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "imgタグとsrcset属性",
      "text": "      <img\n        class:list=\"object-contain w-full md:max-w-screen-md max-h-[50vh]\"\n        src={`/images/${image.path}`}\n        {...await getLocalImageSize(image.path)}\n        srcset={[\n          `${imageLoader({ src: `/images/${image.path}`, width: 640 })} 640w`,\n          `${imageLoader({ src: `/images/${image.path}`, width: 768 })} 768w`,\n          `${imageLoader({ src: `/images/${image.path}`, width: 1024 })} 1024w`,\n        ].join(',')}\n        alt={...}\n        loading=\"lazy\"\n        decoding=\"async\"\n      />"
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "Astroのpublicディレクトリの中にある画像ファイルの縦横サイズを取り出す",
      "text": "async function getLocalImageSize(src: string): Promise<{ width: number; height: number }> {\n  const getImage = localImages[`/public/images/${src}`];\n  if (!getImage) {\n    throw new Error('Image not found');\n  }\n  const { width, height } = await getImage().then((m) => m.default);\n  if (!width || !height) {\n    throw new Error('Failed to get image size');\n  }\n  return { width, height };\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コードは整理できる余地はあるが、いったんブログの仕組みとしては納得いく形になった。ビルド時間もプッシュから1分程度でプレビュー環境がデプロイされるくらいに短縮できたので満足である。まだ時間がかかっているのはOGPの画像生成をこれもビルド時に全記事処理しているからで、これもオンデマンド生成+CDNキャッシュに切り替えることでもっと短縮できる見込みがある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "最後に画像最適化のサンプルとして、これは昨日の隅田川である。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "image",
      "external": false,
      "path": "cloudflare-image-transform-for-image-optimization/3c6255ea-b6c7-4055-8126-638d2819f0c3/4a9d4c30-3de1-4e07-afc5-5b0b17b507d5.png",
      "caption": ""
    }
  ]
}
