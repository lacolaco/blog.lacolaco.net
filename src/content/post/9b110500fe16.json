{
  "pageId": "f2915bdd-b7a5-4468-b295-cd685099ce5f",
  "lastEditedAt": "2024-07-10T03:09:00.000Z",
  "slug": "9b110500fe16",
  "locale": "ja",
  "properties": {
    "title": "Angular: disabled状態を持つカスタムコントロールとSignals",
    "date": "2024-07-10T03:05:00.000Z",
    "category": "Tech",
    "tags": ["Angular", "Signals", "Forms"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angularでカスタムコントロールとして機能するコンポーネントを実装する場合、そのコントロールに ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "disabled",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プロパティがある場合、Signals で実装するのは少し工夫が必要になる。端的に言えば ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "input()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "model()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " だけでは実現できない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "disabled の実装",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次のようなテンプレートで用いられる ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<app-checkbox>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " コンポーネントを想定する。このコンポーネントはHTML標準の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<input>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "によるチェックボックスと同じくコントロールを不活性にする ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "disabled",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " プロパティを持つとする。また、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<input>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と同じく ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "disabled",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 属性によって不活性にすることもできるとする。さらに、AngularのForms APIによってフォームコントロールの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "disable()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " メソッドから不活性にもできるとする。この3つの要件を満たせるカスタムコントロールを作ることを考える。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [AppCheckbox, ReactiveFormsModule],\n  template: `\n  <div>\n    <app-checkbox disabled />\n    <app-checkbox [disabled]=\"true\" />\n    <app-checkbox [formControl]=\"formControl\" /> \n  </div>\n  `,\n})\nexport class App {\n  formControl = new FormControl(false);\n\n  constructor() {\n    this.formControl.disable();\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular v18.0の現状では、この要件すべてを満たすには ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "input()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "model()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "だけではなく",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@Input()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " デコレータを使った実装が必要になる。具体的には次のような実装がSignalを使った最も簡素なものになるだろう。不活性化状態を保持するのはプライベートフィールドの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "#disabled",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で、WritableなSignalである。そして、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@Input()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "デコレータを付与したセッターによって",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "#disabled",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に受け取った値をセットしており、同様に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ControlValueAccessor",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "として",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "setDisabledState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドでも受け取った値をセットしている。そして",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "transform: booleanAttribute",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "設定によって ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "disabled",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 属性でも不活性化できる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: 'app-checkbox',\n  standalone: true,\n  template: `\n  <label>\n    <input type=\"checkbox\" \n      #input \n      [checked]=\"checked\" \n      (change)=\"onInputChange(input.checked)\" \n      [disabled]=\"disabled\"> \n    <span [style.textDecoration]=\"disabled ? 'line-through' : 'unset'\">checkbox<span>\n  <label>\n  `,\n  providers: [\n    { provide: NG_VALUE_ACCESSOR, useExisting: AppCheckbox, multi: true },\n  ],\n})\nexport class AppCheckbox implements ControlValueAccessor {\n  readonly #disabled = signal(false);\n  \n  @Input({ transform: booleanAttribute })\n  set disabled(value: boolean) {\n    this.#disabled.set(value);\n  }\n  get disabled(): boolean {\n    return this.#disabled();\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this.#disabled.set(isDisabled);\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここからはなぜこのような実装が必要になるのかを説明する。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Input Signalは読み取り専用である",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "@Input()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " デコレータに代わるコンポーネントのインプット宣言方法として ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "input()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数が導入されたが、この関数が返すInput Signalはコンポーネント内部からは読み取り専用である。したがって、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "setDisabledState",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "メソッドが実装できなくなる。よって、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "disabled",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "にInput Signalは使えない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export class AppCheckbox implements ControlValueAccessor {\n  readonly disabled = input(false, { transform: booleanAttribute });\n\n  setDisabledState(isDisabled: boolean) {\n    this.disabled.set(isDisabled); // <-- ERROR!!\n  }\n}"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Model Inputは変換できない",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "input()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 関数と違ってコンポーネント内部で書き込み可能なものとして",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "model()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "関数も導入されているが、こちらの場合は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "disabled",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 属性による不活性化を可能にするための transform オプションを持たない。よって、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "disabled",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "にModel Inputも使えない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export class AppCheckbox implements ControlValueAccessor {\n  readonly disabled = model(false, { \n    transform: booleanAttribute // <-- ERROR!!\n  });\n\n  setDisabledState(isDisabled: boolean) {\n    this.disabled.set(isDisabled);\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "なぜModel Inputが値の変換をサポートしていないのかについては、GitHubのIssueでAngularチームのテクニカルリードであるAlexからコメントがされている。双方向バインディングのメンタルモデルからすると、親からバインディングした値と内部で保持される値が違うというのは混乱を招きやすいということが主な理由だ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://github.com/angular/angular/issues/55166#issuecomment-2032150999"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "以上の理由から、現状のSignal APIでは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@Input()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "デコレータを使わずに冒頭の3つの要件を満たすことはできない。もちろん ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "disabled",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 属性によって不活性化できる要件を無視すれば",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "model()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "で満足できるが、Signalsで統一された実装のために要件を妥協するかといわれればそれは選ばないだろう。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@Input()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "デコレータを使っていても現状では非推奨化もされていないし、状態の保持がSignal化されていればそれだけでパフォーマンスの最適化やZoneless化には寄与するわけだから、特に何も失うことはない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、現状のSignalsとForm APIsが噛み合っていないことについてはAngular開発ロードマップの中で高い優先度で取り組まれているので、今回説明したワークアラウンドについてはそのうち不要になるだろう。それまではこのやり方が無難だと思われる。",
          "annotations": {}
        }
      ]
    }
  ]
}
