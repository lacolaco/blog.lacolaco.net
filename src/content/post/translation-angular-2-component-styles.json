{
  "pageId": "44848909-3c08-4dc8-986a-050b8741eaff",
  "lastEditedAt": "2023-12-30T10:11:00.000Z",
  "slug": "translation-angular-2-component-styles",
  "locale": "ja",
  "properties": {
    "title": "[日本語訳] Angular 2 Component Styles",
    "date": "2016-04-16T00:00:00.000Z",
    "category": "Tech",
    "tags": ["Angular", "translation"]
  },
  "content": [
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Original: ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "Component Styles - ts",
              "href": "https://angular.io/docs/ts/latest/guide/component-styles.html",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Written by: ",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "angular.io",
              "href": "https://angular.io/",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Translated at: 04/15/2016",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "divider"
    },
    {
      "type": "heading",
      "level": 1,
      "text": [
        {
          "type": "text",
          "text": "コンポーネントのスタイル",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 2のアプリケーションは標準のCSSによってスタイリングすることができます。 つまり、CSSのスタイルシートやセレクタ、ルールやメディアクエリなどについて知っていることをそのままAngular 2のアプリケーションに適用できます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "さらに、Angular 2はCSSのスタイルシートをモジュール化し、コンポーネントに同梱することが可能です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この章ではどのようにして ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "コンポーネントスタイル",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": " を読み込み、適用するかについて解説します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "コンポーネントスタイルを使う",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular 2のコンポーネントを書くとき、HTMLのテンプレートだけでなく、CSSのスタイルも決めるでしょう。 コンポーネントのテンプレートに対してスタイルを適用する1つの方法は、コンポーネントのメタデータ中の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "styles",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティを使うことです。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "styles",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティはstringの配列としてCSSを受け取ります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'hero-app',\n  template: `\n    <h1>Tour of Heroes</h1>\n    <hero-app-main [hero]=hero></hero-app-main>`,\n  styles: ['h1 { font-weight: normal; }'],\n  directives: [HeroAppMainComponent]\n})"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コンポーネントスタイルはこれまでのグローバルのスタイルとはいくつか違いが有ります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "第一に、セレクタはそのコンポーネントのテンプレート内にしか適用されません。 上の例にある",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "h1 { }",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "セレクタは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "hero-app",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "コンポーネントのテンプレート内にある",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<h1>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "タグにだけ適用され、 それ以外の他の場所には影響しません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これは古典的なCSSとくらべてモジュール化において大きな改良点です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "numbered_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネントのコンテキストの中で、直感的なセレクタやクラス名を使うことができます",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "クラス名やセレクタがアプリケーション中で衝突することを気にする必要がありません",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネントのスタイルが別の場所から書き換えられることがありません",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "プロジェクトの構造が変わり、CSSのコードをTypeScriptやHTMLと同じディレクトリに置くことができます。",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "将来的にCSSのコードを変えたり削除したりする際に、そのスタイルが他の場所で使われていないかを気にしなくてよいです",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "特殊セレクタ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コンポーネントスタイルでは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Shadow DOM",
          "href": "https://www.w3.org/TR/css-scoping-1/",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "に由来するいくつかの特殊なセレクタを使うことができます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": ":host",
          "annotations": {
            "code": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": ":host",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "擬似クラスセレクタは、そのコンポーネント自身にマッチします。(コンポーネント内のすべての要素にヒットするわけではありません)",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "css",
      "filename": "",
      "text": ":host {\n  display: block;\n  border: 1px solid black;\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これはホスト要素にアクセスする唯一の方法です。 他のセレクタではコンポーネント自身にマッチすることはできません。 なぜならコンポーネントの要素はそのコンポーネントのテンプレートの一部ではないからです。 ホスト要素は、その親のコンポーネントのテンプレート内の要素です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "カッコとセレクタを使って表現する ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "関数フォーム",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": " を使って、ホストのスタイルを状態に応じて変えることができます。 次の例では、自身に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "active",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "クラスが付いているときだけ適用するスタイルを宣言しています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "css",
      "filename": "",
      "text": ":host(.active) {\n  border-width: 3px;\n}"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": ":host-context",
          "annotations": {
            "code": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": ":host-context",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "セレクタは、コンポーネントの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "外",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": " の状態に応じたスタイルを書くときに便利です。 例えば、CSSのテーマのクラスがドキュメントの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "body",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "に適用されているとき、 コンポーネントのスタイルもそれに追従したい場合があるでしょう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": ":host-context",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "擬似クラスセレクタは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": ":host",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の関数フォームと同じように動作します。 コンポーネントのホスト要素の親 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "すべて",
          "annotations": {
            "italic": true
          }
        },
        {
          "type": "text",
          "text": " に、該当するセレクタを持っていないかをチェックします。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次の例ではコンポーネント中の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<h2>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "background-color",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "スタイルを、祖先の要素が",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "theme-light",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を持っている時だけ変更するように書いています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "css",
      "filename": "",
      "text": ":host-context(.theme-light) h2 {\n  background-color: #eef;\n}"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "/deep/",
          "annotations": {
            "code": true
          }
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コンポーネントスタイルは基本的に、自身のテンプレート内にしか適用されません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ただし、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "/deep/",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "セレクタを使うと、強制的に子コンポーネントの内部にスタイルを適用することができます。 ネストはどこまででも深く適用され、テンプレート中の子だけでなく、contentとしての子にも作用します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次の例では、コンポーネント自身とその子すべてが持つ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<h3>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "要素にマッチするCSSを書いています。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "css",
      "filename": "",
      "text": ":host /deep/ h3 {\n  font-style: italic;\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "/deep/",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "セレクタは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": ">>>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と書くこともできます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "注意",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "/deep/",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と",
          "annotations": {}
        },
        {
          "type": "text",
          "text": ">>>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ViewEncapsulation.Emulated",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "でしか使えません。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ViewEncapsulation.Emulated",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "はコンポーネントのデフォルトの設定です。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "スタイルをコンポーネントへ読み込む方法",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "コンポーネントにスタイルを追加する方法はいくつかあります。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "テンプレートHTML中に記述する方法",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "コンポーネントのメタデータで",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "styles",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "か",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "styleUrls",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "を使う方法",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "CSS importsを使う方法",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これまでに説明したCSSのスコーピングは、どの方法でも適用されます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "メタデータでスタイルを読み込む",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "@Component",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "デコレータの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "styles",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティで、stringの配列として記述できます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'hero-app',\n  template: `\n    <h1>Tour of Heroes</h1>\n    <hero-app-main [hero]=hero></hero-app-main>`,\n  styles: ['h1 { font-weight: normal; }'],\n  directives: [HeroAppMainComponent]\n})"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "テンプレートインラインスタイル",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "テンプレートHTML中に",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<style>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "タグで直接埋め込むこともできます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'hero-controls',\n  template: `\n    <style>\n      button {\n        background-color: white;\n        border: 1px solid #777;\n      }\n    </style>\n    <h3>Controls</h3>\n    <button (click)=\"activate()\">Activate</button>\n  `\n})"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "StyleのURLをメタデータに記述する",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "外部のCSSファイルを",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "styleUrls",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "として記述することができます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'hero-details',\n  template: `\n    <h2>{{hero.name}}</h2>\n    <hero-team [hero]=hero></hero-team>\n    <ng-content></ng-content>\n  `,\n  styleUrls: ['app/hero-details.component.css'],\n  directives: [HeroTeamComponent]\n})\nexport class HeroDetailsComponent {"
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "注意",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このURLは、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "index.html",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "から見た相対パスであり、コンポーネントのファイルから見た相対パスではありません。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Webpackの場合",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Webpackを使っている場合は、外部CSSを使いつつ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "styles",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティを使用することもできます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "styles: [require('my.component.css')]"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "こうすることで、バンドル時にCSSの読み込みが完了します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "Linkタグによる読み込み",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "さらに、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<link>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "タグでCSSファイルを読み込むこともできます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "@Component({\n  selector: 'hero-team',\n  template: `\n    <link rel=\"stylesheet\" href=\"app/hero-team.component.css\">\n    <h3>Team</h3>\n    <ul>\n      <li *ngFor=\"#member of hero.team\">\n        {{member}}\n      </li>\n    </ul>`\n})"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この場合、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "styleUrls",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "と同じように、アプリケーションのルートからの相対パスで記述します。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 3,
      "text": [
        {
          "type": "text",
          "text": "CSS @importsによる読み込み",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "最後に、コンポーネントスタイルではCSS標準の",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@import",
          "href": "https://developer.mozilla.org/en/docs/Web/CSS/@import",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "ルール",
          "href": "https://developer.mozilla.org/en/docs/Web/CSS/@import",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "を使うこともできます。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "css",
      "filename": "",
      "text": "@import 'hero-details-box.css';"
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "ビューのカプセル化をコントロールする： Native, Emulated, None",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここまでに述べたように、コンポーネントのCSSスタイルはカプセル化されています。 Angular 2では、コンポーネントごとに、スタイルのカプセル化の設定を行うことができます。現在は3つの選択肢があります",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Native",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "：カプセル化にブラウザのネイティブ実装の",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "Shadow DOM",
              "href": "https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM",
              "annotations": {}
            },
            {
              "type": "text",
              "text": "を使います。 コンポーネントのテンプレートHTMLは、Shadow DOM内に描画されます。",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "Emulated",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "：(デフォルト)Shadow DOMの振る舞いをエミュレートし、描画後の要素に適切なクラスや属性を自動で付与して擬似的にカプセル化します。",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "None",
              "annotations": {
                "code": true
              }
            },
            {
              "type": "text",
              "text": "：Angularによるカプセル化を行いません。 これまでに述べたスコーピングは適用されず、グローバルなスタイルが直接影響します。",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これらはコンポーネントのメタデータにある",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "encapsulation",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "プロパティにセットします。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "// warning: few browsers support shadow DOM encapsulation at this time\nencapsulation: ViewEncapsulation.Native"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Native",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "はブラウザがShadow DOMを実装している時だけ動作します。 Shadow DOMはまだサポートが進んでいないため、多くの場合ではデフォルトの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Emulated",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使うことをおすすめします。",
          "annotations": {}
        }
      ]
    }
  ]
}
