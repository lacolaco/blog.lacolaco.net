{
  "pageId": "61a8dc12-72fb-4e08-abc3-40051de4f75f",
  "lastEditedAt": "2024-02-14T23:45:00.000Z",
  "slug": "functionality-of-patterns",
  "locale": "ja",
  "properties": {
    "title": "パターンが機能するとはどういうことか",
    "date": "2024-02-14T23:35:00.000Z",
    "category": "Idea",
    "tags": ["パターン"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Kent Beckは、名著『実装パターン』（Kent Beck 著 長瀬嘉秀・永田渉 監訳 ピアソン・エデュケーション・2008。残念なことに絶版のようだ。）の中で次のように書いている。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "quote",
      "text": [
        {
          "type": "text",
          "text": "価値、原則、パターンという3つの要素で、開発のスタイルはバランスよく表現される。パターンは行動の内容を説明する。価値は動機を提供する。そして原則は、動機を行動に変換するのに役立つ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "どんなパターンにも、そのパターンが生まれるための",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "動機",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "となる価値観がある。価値観に共感できないパターンは使う意味がない。なぜなら、何を問題とするかはまさに価値観によるのであって、価値観が違うならそのパターンで解決しようとする問題意識そのものが共有されないからだ。パターンが機能するひとつの形は、そのパターンの根底にある",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "価値観と問題意識を共有した人にとっての先人の知恵",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "ということになるだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、パターンは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "それがパターンである",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "ということ自体でも機能する。少し経験のあるプログラマーであれば誰でも、他人の書いたプログラムから意図を理解するのに苦労した経験があるだろう。もしかしたら、他人ではなく過去の自分が書いたものでさえも理解できないことがあるかもしれない。プログラムは書かれるものであると同時に読まれるものでもあり、往々にして読まれることのほうが多い。であれば、他人に意図が伝わりやすいプログラムを書き、他人のプログラムから意図をうまく読み取るにはどうすればいいだろうか。そのひとつの答えがパターンである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "パターンに沿って書かれたプログラムは、そのパターンを知っている読み手にとって補助線が引かれているようなものだ。パターンはプログラムの重要で注目すべき部分はどこなのかを教えてくれる。パターンで書かれた部分の意図はそのプログラム固有のものではない。パターンに沿って書かれたプログラムの中でなお",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "パターン化されえない部分",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "こそが、そのプログラムの個別的で本質的な部分であり、時間をかけて読むべき部分である。パターンという補助線によって、プログラムを読むために必要なコストを最小限にできる。当然だが書き手にとっても同じことが言える。パターンに沿って書くことで、プログラムの重要な部分を強調し、思考をその部分に集中することができる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "『プログラマー脳』",
          "href": "https://www.shuwasystem.co.jp/book/9784798068534.html",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "（Felienne Hermans 著 水野貴明 訳 水野いずみ 監訳 秀和システム・2023）で語られているように、熟練者と初心者との間でプログラムを読む速度に違いが出るのは、熟練者のほうがそのプログラムに",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "慣れている",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "からだ。馴染みのないプログラムは熟練者であっても初心者と同じように時間がかかる。熟練者を熟練者たらしめる能力の一側面は、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "知っているパターンの豊富さ",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "、そして",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "既知のパターンを目の前のプログラムに当てはめる力",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "だといえるだろう。これこそがプログラマーにとっての",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "経験",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "の大部分ではないだろうか。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "広く普及しているパターンにはそれだけの理由がある。そのようなパターンを学ぶことは、プログラミングの基礎的な力を鍛えることにも役に立つ。あるパターンがどのような原則に基づいているのか。パターンを生み出した偉大な先人たちはどのように問題を認識してきたのか。そのような問いから新たな視点を得ることで、プログラミングに対する洞察力が養われるだろう。そうした過程はパターンそのもの以上に大きな価値がある。だから、古くなったといわれるパターンであっても学ぶ価値があり、それがどのような前提条件で有用であったのかと考察することで得られる示唆がある。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    }
  ]
}
