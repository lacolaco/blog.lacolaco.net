{
  "pageId": "6de8867a-9891-4c24-b26c-b45aeb3f3e32",
  "lastEditedAt": "2024-07-03T03:05:00.000Z",
  "slug": "angular-v18-let-syntax",
  "locale": "ja",
  "properties": {
    "title": "Angular: v18.1で @let 構文が追加される",
    "date": "2024-07-03T03:05:00.000Z",
    "category": "Tech",
    "tags": ["Angular", "TypeScript"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular v18.1で、HTMLテンプレートで使える ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@let",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 構文が新たに追加されることになったので解説する。この記事を書いている時点ではまだv18.1はRC版だが、特に何も起きなければこのまま正式にリリースされる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "機能としては小さく、長くAngularを使っている人ほどニーズを感じられるような、かゆいところに手が届くのアップデートである。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "構文",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "@let",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 構文の基本的な使い方は次の形である。HTMLテンプレート中でローカル変数を宣言できるだけである。",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "=",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で繋いだ右辺には、いわゆる",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "テンプレート式",
          "annotations": {
            "bold": true
          }
        },
        {
          "type": "text",
          "text": "を記述できる。ほとんどJavaScriptの式と同じで、一部制約のあるサブセットだ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "@let name = \"World\";\n<div>Hello, {{ name }}</div>"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この例だとTypeScriptコードのほうにプロパティを持っておけばいい話だが、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@let",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 構文が真価を発揮するのは次のようなケースである。たとえば、AsyncPipeで非同期データを購読したうえで、nullであったときにはデフォルト値にフォールバックするようなケースを考える。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  template: `\n  @let user = user$ | async ?? defaultUser;\n\t<div>Name: {{ user.name }}</div>\n\t<div>Age: {{ user.age }}</div>\n\t`\n})\nclass Example {\n  user$: Observable<User>;\n  defaultUser: User;\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このようなフォールバックは以前はif-elseを用いる必要があり、テンプレートが二重管理になることが多かった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "@if(user$ | async; as user) {\n\t<div>Name: {{ user.name }}</div>\n\t<div>Age: {{ user.age }}</div>\n} \n@else {\n\t<div>Name: {{ defaultUser.name }}</div>\n\t<div>Age: {{ defaultUser.age }}</div>\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Signalを使った値もgetterの呼び出しを一回にできるため、何度も呼び出されていたものをまとめれば、テンプレート中の括弧が減って見やすくなるだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  template: `\n  @let state = $state();\n\t<div>{{ state.foo }}</div>\n\t<div>{{ state.bar }}</div>\n\t<div>{{ state.baz }}</div>\n\t`\n})\nclass Example {\n  $state: Signal<State>;\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "あとは、値の変換とその呼び出しの部分を分割することも主な用途だろう。複数の変数を宣言、変換する行をまとめておき、テンプレート全体を見通しやすくできる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "@let userName = user.displayName;\n@let userAge = user.age;\n@let userBirthday = user.birthday | date:'yyyy/MM/dd';\n@let welcomeMessage = 'Welcome, ' + userName + '!';\n\n<h1>{{ welcomeMessage }}</h1>\n<div>Name: {{ userName }}</div>\n<div>Age: {{ userAge }}</div>\n<div>Birthday: {{ userBirthday }}</div>"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このように、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@let",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 構文が提供するのはテンプレート中での変数宣言を可能にすることだけであり、それ以上のことはない。機能的には",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@if",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ブロックの",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "as",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " でも実現できることだが、変数宣言のために余計なブロックのネストをしなくてよいこと、その行は変数宣言を目的としていることが明らかであることが主な効果になるだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、この",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@let",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 構文で宣言されるテンプレートローカル変数は、その宣言がなされているブロックにスコープが閉じている。クラスフィールドとして宣言するとテンプレート中のどこでも参照できるが、スコープを限定したいときに便利だ。たとえば",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@for",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ブロックの中で一時的な計算結果を変数に格納しておきたいときなどに役立つ。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "html",
      "filename": "",
      "text": "<div>  \n    @for (product of products; track product.id) {\n        @let price = product.price | currency;\n        \n        <div>Price: {{ price }}</div>\n    }\n    {{ price }} <!-- error!! -->\n</div>"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "ここまで見たように、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@let",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 構文は既存のなにかを非推奨にするものではなく、単純にテンプレートの新しい書き方を追加するものである。なので、すでに書かれていて特に問題のないテンプレートに対して、これを積極的に使うように置き換えていく理由はない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "そもそもテンプレートで行うべきでない関心事は",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@let",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " があろうがなかろうがテンプレートから出すべきだし、逆もまた然りである。だがテンプレートの制約によってしかたなくTypeScriptコード側に書いていたUI的な関心のコードがあれば、それを移動させやすくなる可能性はある。処理が複雑で読みにくくなっているテンプレートに対しては使ってみてもいいだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "参考リンク",
          "annotations": {}
        }
      ]
    },
    {
      "type": "bulleted_list",
      "items": [
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "https://github.com/angular/angular/issues/15280",
              "href": "https://github.com/angular/angular/issues/15280",
              "annotations": {}
            }
          ],
          "children": []
        },
        {
          "type": "bulleted_list_item",
          "text": [
            {
              "type": "text",
              "text": "https://github.com/angular/angular/pull/56715",
              "href": "https://github.com/angular/angular/pull/56715",
              "annotations": {}
            }
          ],
          "children": []
        }
      ]
    }
  ]
}
