{
  "pageId": "50321da1-64af-4987-8a8f-24041e7761af",
  "lastEditedAt": "2024-09-04T09:48:00.000Z",
  "slug": "angular-defer-scheduled-view",
  "locale": "ja",
  "properties": {
    "title": "AngularのDeferred Viewで時限式ビューを作る",
    "date": "2024-08-27T12:13:00.000Z",
    "category": "Tech",
    "tags": ["Angular"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "mizdraさんのブログに触発されて、特定の日時を過ぎるまでは秘匿されなければならないビューをクライアントサイドだけで実装する方法を考えた。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://www.mizdra.net/entry/2024/08/27/190853"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angularには ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@defer",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 構文によってチャンク分割したコンポーネントを遅延読み込みする機能があるため、これを使うと似たようなことができるのではと思い、実験してみた。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "実装",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "まずは秘匿されるコンテンツをひとつのコンポーネントにまとめる。今回は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "CampaignMessage",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " とした。このコンポーネントは遅延読み込みされる側なので特別な実装はなにもない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "src/campaign.ts",
      "text": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'campaign-message',\n  standalone: true,\n  template: `\n  <p>Happy New Year!</p>\n  `,\n})\nexport default class CampaignMessage {}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "このコンポーネントを遅延読み込みする側でスケジュールを管理する必要がある。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@defer",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " にはビルトインの ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "on",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " トリガーもあるが、 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "when",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " で任意のトリガーを実装できる。 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "when",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " トリガーには評価するとブール値が返されるような式を渡せばよく、はじめて評価結果が True になったときに遅延読み込みが開始される。評価結果が False の間は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "@placeholder",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の内容が表示される。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "link_preview",
      "url": "https://angular.jp/guide/defer#トリガー"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "import CampaignMessage from './campaign';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [CampaignMessage],\n  template: `\n    @defer(when isOpen(\"2024-01-01\")) {\n      <campaign-message />\n    }\n    @placeholder {\n      <p>Stay tuned!</p>\n    }\n  `,\n})\nexport class App {\n  isOpen(shownAt: string) {\n    return new Date() >= new Date(shownAt);\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "@defer",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ブロックによってJavaScriptファイルが分割されているため、トリガーが発火するまでにブラウザからダウンロードされるファイルにはキャンペーン内容は含まれていない。ただし遅延読み込みするコード（実体は結局 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "import()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ）は含まれているのでそこからファイルパスを引き抜かれたら直接ダウンロードされてしまうリスクはある。今回はその点については諦めた。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "もともとの要件では、秘匿される情報はブラウザにダウンロードされるJavaScriptファイルの中に含めてはいけない。サーバーサイドがあるならAPIで返すなりSSRで埋め込むなりやりようはいろいろあるが、これをサーバーサイドなしでやろうとするとどこかで妥協は必要になる。そもそもデバイスの時計をいじられたらアウトだ。なので実用性はあまりないかもしれない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "また、あくまでも遅延読み込みされることを前提としており、どこか別の場所で ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "campaign.ts",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " をインポートして中身を静的に参照していたら当然一緒にバンドルされるので意味がない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "とはいえ ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "when",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 条件を使う例としておもしろかった。実際に動作するサンプルも置いておく。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "stackblitz",
      "url": "https://stackblitz.com/edit/stackblitz-starters-vrvpn4?ctl=1&embed=1&file=src/main.ts"
    }
  ]
}
