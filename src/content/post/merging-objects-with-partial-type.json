{
  "pageId": "eb888a6f-797f-4562-907a-2adb7ea9d36a",
  "lastEditedAt": "2023-05-21T03:13:00.000Z",
  "slug": "merging-objects-with-partial-type",
  "properties": {
    "title": "Merging objects with Partial type",
    "date": "2017-11-16T00:00:00.000Z",
    "tags": ["tech", "TypeScript"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "My usual implementation pattern of immutable merging in TypeScript.",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "",
      "filename": "",
      "text": "class MyClass {\n  constructor(public id: string, public name: string) {}\n\n  clone() {\n    return new MyClass(this.id, this.name);\n  }\n\n  merge(another: Partial<MyClass>) {\n    return Object.assign(this.clone(), another);\n  }\n}\n\nconst objA = new MyClass(\"1\", \"foo\");\n\nconst objB = objA.merge({ name: \"bar\" });\n\nconsole.log(objA !== objB);\nconsole.log(objB.id === \"1\");\nconsole.log(objB.name === \"bar\");"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Partial<MyClass>",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " allows us to pass an object matching ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "MyClass",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " partially.",
          "annotations": {}
        }
      ]
    }
  ]
}
