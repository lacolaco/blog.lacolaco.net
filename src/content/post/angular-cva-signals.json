{
  "pageId": "3a28e81c-63c8-4670-af97-d9e6218e2db8",
  "lastEditedAt": "2024-06-14T01:04:00.000Z",
  "slug": "angular-cva-signals",
  "locale": "ja",
  "properties": {
    "title": "Angular: Model Inputsを使ったカスタムフォームコントロール実装例",
    "date": "2024-06-13T14:44:00.000Z",
    "category": "Tech",
    "tags": ["Angular", "Signals", "Forms"]
  },
  "content": [
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Angular v17.2で実装されたModel Inputsを使ってカスタムフォームコントロールを実装してみよう。SignalベースのAPIが揃ってきたことで、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ControlValueAccessor",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "の実装もかなり簡潔になった。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "heading",
      "level": 2,
      "text": [
        {
          "type": "text",
          "text": "TimeInputComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " ",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "次のような",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Time",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "型を読み書きする",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ControlValueAccessor",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を題材にする。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "export type Time = {\n  hour: number;\n  minute: number;\n};"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "今回は素朴にselect要素で時間と分を選択するようなコンポーネントを考える。UIだけ実装すると次のようになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: 'app-time-input',\n  standalone: true,\n  imports: [DecimalPipe],\n  template: `\n    <div>\n      <select>\n        @for(i of hourOptions; track i) {\n          <option [value]=\"i\">{{ i | number : '2.0' }}</option>\n        }\n      </select>\n      <span>:</span>\n      <select>\n        @for(i of minuteOptions; track i) {\n          <option [value]=\"i\">{{ i | number : '2.0' }}</option>\n        }\n      </select>\n    </div>\n  `,\n  styles: `:host { display: inline-block; }`,\n})\nexport class TimeInputComponent {\n  readonly hourOptions = getRange(0, 23);\n  readonly minuteOptions = getRange(0, 59);\n}\n"
    },
    {
      "type": "image",
      "external": false,
      "url": "/src/content/images/angular-cva-signals/3c6255ea-b6c7-4055-8126-638d2819f0c3/f016cf07-271e-4deb-8177-87946c26eb5a.png",
      "caption": "時と分をセレクトボックスで選択できる素朴な時刻入力コンポーネント"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これをAngular Formsと連携できるカスタムフォームコントロールとして実装しよう。まずは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "value",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Time",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "型のModel Inputを作成する。これを次のように",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NgModel",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "を使ってselectと紐付ける。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: 'app-time-input',\n  standalone: true,\n  imports: [FormsModule, DecimalPipe],\n  template: `\n    <div>\n      <select [ngModel]=\"value().hour\" (ngModelChange)=\"updateHour($event)\">\n      @for(i of hourOptions; track i) {\n        <option [value]=\"i\">{{ i | number : '2.0' }}</option>\n      }\n      </select>\n      <span>:</span>\n      <select [ngModel]=\"value().minute\" (ngModelChange)=\"updateMinute($event)\">\n      @for(i of minuteOptions; track i) {\n        <option [value]=\"i\">{{ i | number : '2.0' }}</option>\n      }\n      </select>\n    </div>\n  `\n})\nexport class TimeInputComponent {\n  readonly value = model<Time>({ hour: 0, minute: 0 });\n\n  readonly hourOptions = getRange(0, 23);\n  readonly minuteOptions = getRange(0, 59);\n\n  updateHour(value: number) {\n    this.value.update((curr) => ({ ...curr, hour: value }));\n  }\n\n  updateMinute(value: number) {\n    this.value.update((v) => ({ ...v, minute: value }));\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "これだけでも、親からは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<app-time-input [(value)]=\"...\">",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " という形で双方向バインディング可能になった。ここからはさらに",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<app-time-input [(ngModel)]=\"...\">",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " や",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "<app-time-input [formControl]=\"...\">",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " のようにAngular Formsとの連携が可能となるように、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ControlValueAccessor",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "としての実装を加える。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "TImeInputComponent",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " クラスで",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "ControlValueAccessor",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " インターフェースを実装すると次のようになる。Angular Formsからカスタムフォームコントロールであることが識別できるように",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "NG_VALUE_ACCESSOR",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " として自身を提供することを忘れないようにする。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "@Component({\n  selector: 'app-time-input',\n  standalone: true,\n  imports: [FormsModule, DecimalPipe],\n  template: `...`,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: TimeInputComponent,\n      multi: true,\n    },\n  ],\n})\nexport class TimeInputComponent implements ControlValueAccessor {\n  readonly value = model<Time>({ hour: 0, minute: 0 });\n  #onChangeListener = (_: Time) => {};\n  \n  constructor() {\n    // Emit value change to form control\n    effect(() => {\n      this.#onChangeListener(this.#value());\n    });\n  }\n\n  // ControlValueAccessor implementation\n\n  writeValue(value: Time): void {\n    this.value.set(value);\n  }\n\n  registerOnChange(fn: (v: Time) => void): void {\n    this.#onChangeListener = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    // noop\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "Signalベースになったことでのポイントは、フォームモデルへ値の変更を伝えるためのコールバック関数 ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "#onChangeListener",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " の呼び出しが、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "value",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " SignalのEffectを書くだけで完結している点だ。どのような経緯であれ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "value",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " に変更があればフォームモデルに同期できるため、同期漏れの心配がない。また、コンポーネントが破棄されたあとのメモリリークの心配もない。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "  #onChangeListener = (_: Time) => {};\n\n  constructor() {\n    effect(() => {\n      this.#onChangeListener(this.value());\n    });\n  }\n\n  registerOnChange(fn: (v: Time) => void): void {\n    this.#onChangeListener = fn;\n  }"
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "同期漏れの心配はないが、逆に同期しすぎることはありえる。特に今回の例では",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Time",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " 型はオブジェクトなので、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "value",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " が更新されるたびに参照が変わる。等値ではないことになるため、実際の値が変わっていなくても",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "value",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " がセットされるたびにフォームモデルへ通知されてしまう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "callout",
      "text": [
        {
          "type": "text",
          "text": "model()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " は ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "signal()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " や ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "computed()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " と違い、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "equal",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " オプションを持たないため、等値判定を変更できない。これは ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "input()",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " も同様である。オプションの追加を求めるイシューがあるため、賛同する人がいればイシューに対してさらなるVoteをお願いしたい。\n\n",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "https://github.com/angular/angular/issues/54111",
          "href": "https://github.com/angular/angular/issues/54111",
          "annotations": {}
        }
      ]
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "この問題を解決するために、新たに ",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "#changedValue",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " Signalを作成する。これは",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "value",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": " Signalから派生し、",
          "annotations": {}
        },
        {
          "type": "text",
          "text": "Time",
          "annotations": {
            "code": true
          }
        },
        {
          "type": "text",
          "text": "型のための等値判定関数を与えていることで、実際の値が変更したときだけ通知されるSignalになる。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "code",
      "language": "typescript",
      "filename": "",
      "text": "// 等値判定関数\nexport function isEqualTime(a: Time, b: Time) {\n  return a.hour === b.hour && a.minute === b.minute;\n}\n\nexport class TimeInputComponent implements ControlValueAccessor {\n  readonly value = model<Time>({ hour: 0, minute: 0 });\n\n  readonly #changedValue = computed(() => this.value(), { equal: isEqualTime });\n\n  constructor() {\n    // Emit value change to form control\n    effect(() => {\n      this.#onChangeListener(this.#changedValue());\n    });\n  }\n}"
    },
    {
      "type": "paragraph",
      "text": []
    },
    {
      "type": "paragraph",
      "text": [
        {
          "type": "text",
          "text": "動作するサンプルは以下。現実のユースケースではもう少し複雑なコンポーネントになるが、基本的な構造はこの形から始めて拡張していけるはずだ。また、Angular本体のほうでもよりSignal APIとの親和性を高めるためのフォームAPIの拡張を計画しているため、それが来るともっとボイラープレートを減らせるかもしれない。それに備える意味でも今からカスタムコントロールをSignalベースに寄せていくのは無駄にならないだろう。",
          "annotations": {}
        }
      ]
    },
    {
      "type": "stackblitz",
      "url": "https://stackblitz.com/edit/angular-91xmwg?ctl=1&embed=1&file=src/main.ts"
    }
  ]
}
