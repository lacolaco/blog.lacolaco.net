---
import type { PostFrontmatterOut } from '@lib/post';
import { isAfter as isAfterDate } from 'date-fns';
import BaseHead from 'src/components/BaseHead.astro';
import Footer from 'src/components/Footer.astro';
import FormattedDate from 'src/components/FormattedDate';
import Header from 'src/components/Header.astro';
import MainContainer from 'src/components/MainContainer.astro';
import ShareButtons from 'src/components/ShareButtons.astro';
import Tag from 'src/components/Tag.astro';
import TagList from 'src/components/TagList.astro';
import { SITE_TITLE } from 'src/consts';
import { Content, frontmatter } from '../content/kitchen-sink.md';

const { title, category, tags, created_time, last_edited_time, canonical_url, features } =
  frontmatter as PostFrontmatterOut;
const isUpdated = last_edited_time && isAfterDate(last_edited_time, created_time);
---

<!doctype html>
<html lang="ja">
  <head>
    <BaseHead title={`${title} | ${SITE_TITLE}`} description={''} />

    {canonical_url && <link rel="canonical" href={canonical_url} />}
    {features?.katex ? (
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.22/dist/katex.min.css" integrity="sha384-5TcZemv2l/9On385z///+d7MSYlvIEw9FuZTIdZ14vJLqWphw7e7ZPuOiCHJcFCP" crossorigin="anonymous" />
    ) : null}
  </head>

  <body class="font-base bg-default">
    <Header class="" />

    <MainContainer>
      <article class="py-8 lg:py-16">
        <header class="mb-6">
          <span class="text-sm text-muted">
            <FormattedDate date={created_time} />
            {
              isUpdated && (
                <span class="text-sm text-muted">
                  {'(Updated at: '}
                  <FormattedDate date={last_edited_time} />
                  {')'}
                </span>
              )
            }
          </span>
          <h1 class="text-2xl font-semibold leading-tight mb-1">{title}</h1>
          <div class="py-1">
            <TagList>
              {category && <Tag name={category} isCategory />}
              {tags && tags.map((tag) => <Tag name={tag} />)}
            </TagList>
          </div>
        </header>
        <div class="markdown-body mb-4">
          <Content />
        </div>
        <div class="mt-8">
          <ShareButtons url={Astro.url.toString()} title={`${title} | ${SITE_TITLE}`} />
        </div>
      </article>
    </MainContainer>

    <Footer class="py-4" />

    {features?.tweet ? <script is:inline async src="https://platform.twitter.com/widgets.js" charset="utf-8" /> : null}
    {features?.mermaid ? (
      <script>
        import mermaid from 'mermaid';
        mermaid.initialize({ startOnLoad: true });
      </script>
    ) : null}
  </body>
</html>
