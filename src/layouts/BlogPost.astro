---
import type { PostData } from '@lib/post';
import { add as addDate, isAfter as isAfterDate } from 'date-fns';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate';
import Header from '../components/Header.astro';
import MainContainer from '../components/MainContainer.astro';
import MessageBox from '../components/MessageBox.astro';
import ShareButtons from '../components/ShareButtons.astro';
import Tag from '../components/Tag.astro';
import TagList from '../components/TagList.astro';
import Content from '../components/content/Content.astro';
import { SITE_TITLE } from '../consts';

type Props = {
  post: PostData;
  otherLocaleUrls?: {
    ja?: string;
    en?: string;
  };
};

const { post, otherLocaleUrls: locales } = Astro.props;
const { title, date, category, tags, updatedAt, canonicalUrl } = post.properties;

const isUpdated = updatedAt && isAfterDate(updatedAt, date);
const isOutdated = isUpdated && isAfterDate(new Date(), addDate(updatedAt, { years: 2 }));
---

<!doctype html>
<html lang={post.locale}>
  <head>
    <BaseHead
      title={`${title} | ${SITE_TITLE}`}
      description={''}
      image={`/og/${post.slug}.png`}
      gtagProps={{
        post_slug: `${post.slug}`,
        post_locale: `${post.locale}`,
        post_title: `${post.properties.title}`,
        post_timestamp: `${post.properties.date.getTime()}`,
      }}
    />

    {canonicalUrl && <link rel="canonical" href={canonicalUrl} />}
  </head>

  <body class="font-base bg-default">
    <Header class="" />

    <MainContainer>
      <article class="py-8 lg:py-16">
        <header class="mb-6">
          <div class="leading-none">
            <span class="text-sm text-muted">
              <FormattedDate date={date} />
              {
                isUpdated && (
                  <span class="text-sm text-muted">
                    {'(Updated at: '}
                    <FormattedDate date={updatedAt} />
                    {')'}
                  </span>
                )
              }
            </span>
            <h1 class="text-2xl font-semibold leading-tight mb-1">{title}</h1>
            <div class="py-1">
              <TagList>
                {category && <Tag name={category} isCategory />}
                {tags && tags.map((tag) => <Tag name={tag} />)}
              </TagList>
            </div>
          </div>
        </header>

        {
          locales?.en && (
            <MessageBox type="info">
              <a href={locales.en} class="text-sm">
                This article has an English version.
              </a>
            </MessageBox>
          )
        }
        {
          locales?.ja && (
            <MessageBox type="info">
              <a href={locales.ja} class="text-sm">
                この記事には日本語版があります。
              </a>
            </MessageBox>
          )
        }

        {isOutdated && <MessageBox type="warn">This post is possibly out of date.</MessageBox>}

        <div class="markdown-body mb-4">
          <Content nodes={post.content} />
        </div>
        <div class="mt-8">
          <ShareButtons url={Astro.url.toString()} title={`${title} | ${SITE_TITLE}`} />
        </div>
      </article>
    </MainContainer>

    <Footer class="py-4" />
  </body>
</html>
