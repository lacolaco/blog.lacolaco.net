---
import { type ImageNode } from '@lib/post';
import Text from './Text.astro';

type Props = ImageNode;

const image = Astro.props;

function imageLoader(config: { src: string; width: number }): string {
  const { src, width } = config;
  if (!import.meta.env.PRODUCTION) {
    return src;
  }

  const params = ['format=auto'];
  if (width) {
    params.push(`w=${width}`);
  }

  return `https://blog.lacolaco.net/cdn-cgi/image/${params.join(',')}/${src}`;
}

const localImages = import.meta.glob<{ default: { width: number; height: number } }>(
  '/public/images/**/*.{jpg,jpeg,png,webp,gif,svg}',
);

async function getLocalImageSize(src: string): Promise<{ width: number; height: number }> {
  const getImage = localImages[`/public/images/${src}`];
  if (!getImage) {
    throw new Error('Image not found');
  }
  const { width, height } = await getImage().then((m) => m.default);
  if (!width || !height) {
    throw new Error('Failed to get image size');
  }
  return { width, height };
}
---

<p>
  <figure class="flex flex-col items-center py-2">
    {
      image.external ? (
        <img
          class="object-contain w-full md:max-w-(--breakpoint-md) max-h-[75vh]"
          src={image.url}
          decoding="async"
          loading="lazy"
        />
      ) : (
        <img
          class="object-contain w-full md:max-w-(--breakpoint-md) max-h-[75vh]"
          src={`/images/${image.path}`}
          {...await getLocalImageSize(image.path)}
          srcset={[
            `${imageLoader({ src: `/images/${image.path}`, width: 640 })} 640w`,
            `${imageLoader({ src: `/images/${image.path}`, width: 768 })} 768w`,
            `${imageLoader({ src: `/images/${image.path}`, width: 1024 })} 1024w`,
          ].join(',')}
          alt={
            image.caption
              ? Array.isArray(image.caption)
                ? image.caption.map((node) => node.text).join('')
                : image.caption
              : ''
          }
          loading="lazy"
          decoding="async"
        />
      )
    }
    {
      image.caption && (
        <figcaption class="text-center text-sm text-gray-500">
          {Array.isArray(image.caption) ? image.caption.map((node) => <Text {...node} />) : image.caption}
        </figcaption>
      )
    }
  </figure>
</p>
